// {
//   "Account Takeovers Methodologies": [
//     {
//       "Account Takeovers Methods": `\r\n## Chaining Session Hijacking with XSS\r\n \r\n1.I have added a session hijacking method in broken authentication and session management. \r\n2.If you find that on target.\r\n3.Try anyway to steal cookies on that target.\r\n4.Here I am saying look for xss .\r\n5.If you find xss you can steal the cookies of victim and using session hijacking you can takeover the account of victim.\r\n \r\n##  No Rate Limit On Login With Weak Password Policy\r\n \r\nSo if you find that target have weak password policy, try to go for no rate limit attacks in poc shows by creating very weak password of your account.\r\n\r\n(May or may not be accepted)\r\n \r\n## Password Reset Poisioning Leads To Token Theft\r\n \r\n1.Go to password reset funtion.\r\n2.Enter email and intercept the request.\r\n3.Change host header to some other host i.e,\r\n    Host:target.com\r\n    Host:attacker.com\r\n  also try to add some headers without changing host like\r\n    X-Forwarded-Host: evil.com\r\n    Referrer: https://evil.com\r\n4.Forward this if you find that in next request attacker.com means you managed to successfully steal the token. :)\r\n \r\n## Using  Auth Bypass\r\n \r\nCheck out Auth Bypass method, there is a method for OTP bypass via response manipulation, this can leads to account takeovers.\r\n1.Enter the wrong auth code / Password\r\n2.Capture a auth request in burpsuite and send it to repeater \r\n3.Check for the resoponse\r\n4.Change the respone by manipulating the following parameters\r\n  {“code”:”invalid_credentials”} -> {“code”:”valid_credentials”}\r\n  {“verify”:”false”}             -> {“verify”:”true”}\r\n  \r\n  \r\n \r\n## Try For CSRF On\r\n \r\n1.Change Password function.\r\n2.Email change\r\n3.Change Security Question\r\n \r\n## Token Leaks In Response\r\n\r\n* So there are multiple ways to do it but all are same.\r\n\r\n* So I will sharing my method that I have learnt here .\r\n\r\n* Endpoints:(Register,Forget Password)\r\n\r\n* Steps(For Registration):\r\n \r\n  1. For registeration intercept the signup request that contains the data you have entered.\r\n  2. Click on action -> do -> intercept the response to this request.\r\n  3. Click forward.\r\n  4. Check response if that contains any link, any token or OTP.\r\n  \r\n ------------------------\r\n * Steps (For password reset):\r\n   \r\n  1. Intercept the forget password option.\r\n  2. Click on action -> do -> intercept the response to this request.\r\n  3. Click forward.\r\n  4. Check response if that contains any link,any token or OTP.\r\n  \r\n\r\n## Reference:\r\n* Various Source From Google,Twitter,Medium\r\n* https://avanishpathak.medium.com/an-account-takeover-vulnerability-due-to-response-manipulation-e23fe629bd1\r\n\r\n## Author\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [@v3daxt](https://twitter.com/v3daxt)\r\n`
//     }
//   ],
//   "API_Testing": [
//     {
//       "Hidden_API_Functionality_Exposure.md": `# Hidden API Functionality Exposure\r\n- Application programming interfaces (APIs) have become a critical part of almost every business. APIs are responsible for transferring information between systems within a company or to external companies. For example, when you log in to a website like Google or Facebook, an API processes your login credentials to verify they are correct.\r\n\r\n1. Swagger UI Documentation\r\n2. Dictionary Attack | Brute force\r\n3. Common wordlist for API Enum :\r\n- https://wordlists.assetnote.io/\r\n- https://github.com/Net-hunter121/API-Wordlist\r\n\r\n## Steps to Perform This Attack :\r\n \r\nStep 1 : Capture the request into Burp, Send the request to repeater and intruder tab.\r\nStep 2 : Add the endpoint into the intruder tab and add the payload from the word-list.\r\nStep 3 : First use dictionary attack with SecLists (https://github.com/danielmiessler/SecLists) on the Endpoint.\r\nStep 4 : Either use your customized list or use the ones which I have provided in the above step.\r\nStep 5 : Then simply start the attack, start checking for 200 status.\r\nStep 7 : Once there is HTTP 200 OK status, start the recursive scan on the same endpoint for juicy information like swagger doc and so on.\r\nstep 8 : Other method is to change the API version and try bruteforcing the same endpoint\r\nEg: Redacted.com/api/v1/{Endpoint} ----- Redacted.com/api/v2/{Endpoint}\r\n \r\n* Note: There will be minimum limits per request which will be assigned without API keys so make sure to utilize manual approach as much as you can, then the rest can be automated for scanning the vulnerability in API with automated tools.\r\n\r\n## Contributor:\r\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\r\n`
//     }
//   ]
// }
