// topicsData.js
const topics = [
    {
        id: 1,
        title: "Introduction to XSS",
        tags: ["XSS", "Web Security", "Database Security"],
        level: "Beginner",
        category: "XSS",
        desc: [
            {
                title: "Overview",
                content:
                    "XSS is a web security vulnerability that allows attackers to inject malicious scripts into trusted websites. These scripts execute in the victim's browser, potentially stealing data, redirecting users, or defacing websites. XSS is a widespread threat due to its ease of exploitation and diverse attack vectors.",
                labs: [
                    {
                        title: "Reflected XSS",
                        content: "Lab 1 content",
                        level: "Beginner",
                        link: "1",
                        isCompleted: true,
                    },
                    {
                        title: "Stored XSS",
                        content: "Lab 2 content",
                        level: "Beginner",
                        link: "2",
                        isCompleted: false,
                    },
                ],
            },
            {
                title: "Types of XSS",
                content: "XSS attacks can be classified into three main types: Reflected, Stored, and DOM-based.",
            },
            {
                title: "Reflected XSS",
                content: `Reflected Cross-Site Scripting (XSS) occurs when an attacker injects malicious scripts into user-provided data, such as input fields or URL parameters. These scripts are then reflected back to the user's browser by the web application, potentially leading to the execution of the malicious code in the context of the victim's session. Here's a javascript code which is vulnerable to Reflected XSS:

![](https://thecyberhub-assets.s3.ap-south-1.amazonaws.com/thecyberhub-assets/development/notes/1708420176731.png)

![](https://thecyberhub-assets.s3.ap-south-1.amazonaws.com/thecyberhub-assets/development/notes/1702915910929.png)

Reflected Cross-Site Scripting (XSS) occurs when an attacker injects malicious scripts into user-provided data, such as input fields or URL parameters. These scripts are then reflected back to the user's browser by the web application, potentially leading to the execution of the malicious code in the context of the victim's session. Here's a javascript code which is vulnerable to Reflected XSS:

\`\`\`javascript
let username = new URLSearchParams(window.location.search).get('user');
document.write("<h1>Hello, " + username + "!</h1>");
\`\`\`

The vulnerable code doesn't validate or sanitize the user input and thus the script below would be reflected in the HTML generated by document.write, leading to the execution of the malicious code when the page is loaded.

\`\`\`javascript
?user=<script>alert("XSS");</script>
\`\`\`
`,
            },
            {
                title: "Stored XSS",
                content: `Stored XSS (Cross-Site Scripting) occurs when an attacker injects malicious scripts into a website's database, and these scripts are then served to users when they retrieve the stored content, leading to the execution of the malicious code in their browsers. This type of XSS poses a persistent threat as the injected scripts are stored on the server, affecting all users who access the compromised content. Here's a javascript code which is vulnerable to Stored XSS:
\`\`\`javascript
let savedUsername = localStorage.getItem('user');
document.write("<h1>Hello, " + savedUsername + "!</h1>");
\`\`\`

The vulnerable code doesn't validate or sanitize the user input and thus the script below would be reflected in the HTML generated by document.write, leading to the execution of the malicious code when the page is loaded.

\`\`\`javascript
?user=<script>alert("XSS");</script>
\`\`\`
`,
            },
            {
                title: "DOM XSS",
                content: `In DOM XSS attack, an attacker injects malicious code into a web application's client-side script, often through user input. When the manipulated script is executed by the victim's browser, it can modify the Document Object Model (DOM) of the webpage, leading to unintended behaviors, data theft, or other security risks. Here's a javascript code which is vulnerable to DOM XSS:

\`\`\`javascript
let username = new URLSearchParams(window.location.search).get('user');
document.getElementById('greeting').innerHTML = "<h1>Hello, " + username + "!</h1>";
\`\`\`
           
The vulnerable code doesn't validate or sanitize the user input and thus the script below would be reflected in the HTML generated by document.write, leading to the execution of the malicious code when the page is loaded.

\`\`\`javascript
?user=<script>alert("XSS");</script>
\`\`\`
`,
            },
            {
                title: "Consequences",
                content: `- Data Theft: Attackers can steal sensitive information like cookies, session tokens, or credit card details.
- Account Takeover: Stolen credentials can be used to hijack user accounts.
- Malware Distribution: Malicious scripts can be used to download and install malware on user devices.
- Website Defacement: Attackers can alter the appearance or content of a website for malicious purposes.
- Phishing Attacks: XSS can be used to create more believable phishing attempts by embedding malicious code within seemingly legitimate websites.`,
            },
            {
                title: "Mitigation",
                content: `- Input Validation and Sanitization: Validate and sanitize all user input to remove potentially harmful characters that could be used for XSS attacks.
- Output Encoding: Encode user input before displaying it on a web page to prevent it from being interpreted as code.
- Content Security Policy (CSP): Implement a CSP to restrict the sources of scripts allowed to load on your web pages.
- Regular Security Testing: Conduct penetration testing and code reviews to identify and address potential XSS vulnerabilities`,
            },
            {
                title: "Importance",
                content: `XSS is a serious security threat that can have significant consequences for both users and organizations. By understanding XSS and implementing appropriate mitigation strategies, developers and security professionals can significantly reduce the risk of XSS attack.`,
            },
        ],
    },
    {
        id: 2,
        title: "Detailed Explanation of Reflected XSS",
        tags: ["XSS", "Reflected XSS", "Web Security"],
        level: "Intermediate",
        category: "XSS",
        desc: [
            {
                title: "What is Reflected XSS?",
                content:
                    "Reflected XSS occurs when user input, such as what is entered into a search form, is immediately returned by web applications in error messages or search results. This vulnerability allows attackers to execute malicious scripts in the browser of the user viewing the content, as the browser believes the script is coming from a trusted source.",
            },
            {
                title: "Example of Reflected XSS",
                content:
                    "Consider a website with a search feature that reflects user input in its results without proper sanitization or encoding. An attacker could craft a malicious URL with a script embedded within the search parameters. If another user clicks on this link, the malicious script will execute, potentially leading to unauthorized actions performed under the user's credentials.",
            },
            {
                title: "How it Works",
                content: "Here's a step-by-step illustration of how reflected XSS attacks work:",
            },
            {
                title: "Prevention and Mitigation",
                content:
                    "To prevent reflected XSS, developers must implement proper input validation, sanitization, and output encoding. These measures ensure that special characters do not execute as part of the HTML or JavaScript, thus neutralizing the threat.",
            },
        ],
    },
];

export default topics;
